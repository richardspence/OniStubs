using System;
using Unity;
     public abstract class Debug 
	         {
                public static      void Break ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogException (System.Exception exception)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Log (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Log (System.Object obj, UnityEngine.Object context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogFormat (System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogFormat (UnityEngine.Object context, System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarning (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarning (System.Object obj, UnityEngine.Object context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarningFormat (System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarningFormat (UnityEngine.Object context, System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogError (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogError (System.Object obj, UnityEngine.Object context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogErrorFormat (System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogErrorFormat (UnityEngine.Object context, System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean condition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean condition, System.Object message)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean condition, System.Object message, UnityEngine.Object context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DisableLogging ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLine (UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawRay (UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Debug ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isDebugBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean developerConsoleVisible
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public abstract class DebugExtension 
	         {
                public static      void DebugPoint (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single scale, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugPoint (UnityEngine.Vector3 position, System.Single scale, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugBounds (UnityEngine.Bounds bounds, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugExtense (System.Single x, System.Single y, System.Single z, UnityEngine.Vector3 center, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugAABB (AABB3 bounds, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugAABB (UnityEngine.Vector3 position, AABB3 bounds, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugRect (UnityEngine.Rect rect, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugBounds (UnityEngine.Bounds bounds, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugLocalCube (UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugLocalCube (UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugLocalCube (UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugLocalCube (UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCircle (UnityEngine.Vector3 position, UnityEngine.Vector3 up, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest, System.Single jumpPerSegment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCircle (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCircle2d (UnityEngine.Vector2 position, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest, System.Single jumpPerSegment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCircle (UnityEngine.Vector3 position, UnityEngine.Vector3 up, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCircle (UnityEngine.Vector3 position, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugWireSphere (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugWireSphere (UnityEngine.Vector3 position, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCylinder (UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCylinder (UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCone (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single angle, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCone (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single angle, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCone (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single angle, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCone (UnityEngine.Vector3 position, System.Single angle, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugArrow (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugArrow (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCapsule (UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugCapsule (UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius, System.Single duration, System.Boolean depthTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawPoint (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawPoint (UnityEngine.Vector3 position, System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawBounds (UnityEngine.Bounds bounds, UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawBounds (UnityEngine.Bounds bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLocalCube (UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLocalCube (UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Vector3 center)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLocalCube (UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLocalCube (UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Vector3 center)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircle (UnityEngine.Vector3 position, UnityEngine.Vector3 up, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircleNoGizmo (UnityEngine.Vector3 position, UnityEngine.Vector3 up, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircle (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircleNoGizmo (UnityEngine.Vector2 position, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircle (UnityEngine.Vector3 position, UnityEngine.Vector3 up, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCircle (UnityEngine.Vector3 position, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCylinder (UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCylinder (UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCone (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single angle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCone (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single angle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCone (UnityEngine.Vector3 position, UnityEngine.Color color, System.Single angle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCone (UnityEngine.Vector3 position, System.Single angle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawArrow (UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawArrow (UnityEngine.Vector3 position, UnityEngine.Vector3 direction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCapsule (UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCapsule (UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String MethodsOfObject (System.Object obj, System.Boolean includeInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String MethodsOfType (System.Type type, System.Boolean includeInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class KProfilerBegin 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public KProfilerBegin ()  {
                throw new System.NotImplementedException();
            }
                     static KProfilerBegin ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 begin_counter;
                }

     public class KProfilerEnd 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public KProfilerEnd ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct BatchKey 
	 			: System.IEquatable<BatchKey>  
                    {
                public static      BatchKey Create (KAnimConverter.IAnimConverter controller, Vector2I idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      BatchKey Create (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (BatchKey other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     BatchKey (KAnimConverter.IAnimConverter controller)  {
                throw new System.NotImplementedException();
            }
                     BatchKey (KAnimConverter.IAnimConverter controller, Vector2I idx)  {
                throw new System.NotImplementedException();
            }
         public  System.Single z
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 layer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  HashedString groupID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Vector2I idx
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  KAnimBatchGroup.MaterialType materialType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 hash
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class BatchSet 
	         {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimBatch GetBatch (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveBatch (KAnimBatch batch)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddBatch (KAnimBatch batch)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetDirty ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetActive (System.Boolean isActive)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 UpdateDirty (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BatchSet (KAnimBatchGroup batchGroup, BatchKey batchKey, Vector2I spacialIdx)  {
                throw new System.NotImplementedException();
            }
         public  KAnimBatchGroup group
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnimBatch> batches
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2I idx
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  BatchKey key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean dirty
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean active
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 batchCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 dirtyBatchLastFrame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 lastDirtyFrame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KAnim 
	         {
                     public KAnim ()  {
                throw new System.NotImplementedException();
            }
             public enum  PlayMode {
                Loop,
                        Once,
                        Paused,
                }
         public enum  LayerFlags {
                FG,
                }
         public enum  SymbolFlags {
                Bloom,
                        OnLight,
                        SnapTo,
                        FG,
                }
         public struct AnimHashTable 
	         {
                            public  KAnimHashedString[] hashes;
                }
     public class Anim 
	         {
                public       System.Int32 GetFrameIdx (KAnim.PlayMode mode, System.Single t)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.Frame GetFrame (KAnimFileData animFile, KAnim.PlayMode mode, System.Single t)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.Frame GetFrame (HashedString batchTag, System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim Copy ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Anim (KAnimFileData anim_file, System.Int32 idx)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimFileData animFile
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String name;
                                    public  HashedString id;
                                    public  System.Single frameRate;
                                    public  System.Int32 firstFrameIdx;
                                    public  System.Int32 numFrames;
                                    public  HashedString rootSymbol;
                                    public  HashedString hash;
                                    public  System.Single totalTime;
                                    public  System.Single scaledBoundingRadius;
                                    public  UnityEngine.Vector2 unScaledSize;
                     public struct Frame 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Frame ()  {
                throw new System.NotImplementedException();
            }
                            public  AABB3 bbox;
                                    public  System.Int32 firstElementIdx;
                                    public  System.Int32 idx;
                                    public  System.Int32 numElements;
                                    public static KAnim.Anim.Frame InvalidFrame;
                }
     public struct FrameElement 
	         {
                            public  KAnimHashedString fileHash;
                                    public  KAnimHashedString symbol;
                                    public  System.Int32 symbolIdx;
                                    public  KAnimHashedString folder;
                                    public  System.Int32 frame;
                                    public  Matrix2x3 transform;
                                    public  UnityEngine.Color multColour;
                                    public  System.Int32 flags;
                }
}
     public class Build 
	 			: UnityEngine.ISerializationCallbackReceiver  
                    {
                public   virtual    void OnBeforeSerialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnAfterDeserialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol GetSymbolByIndex (System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Texture2D GetTexture (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetSymbolOffset (KAnimHashedString symbol_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol GetSymbol (KAnimHashedString symbol_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Build ()  {
                throw new System.NotImplementedException();
            }
                            public  KAnimHashedString fileHash;
                                    public  System.Int32 index;
                                    public  System.String name;
                                    public  HashedString batchTag;
                                    public  System.Int32 textureStartIdx;
                                    public  System.Int32 textureCount;
                                    public  KAnim.Build.Symbol[] symbols;
                                    public  KAnim.Build.SymbolFrame[] frames;
                     public class SymbolFrame 
	 			: System.IComparable<KAnim.Build.SymbolFrame>  
                    {
                public   virtual    System.Int32 CompareTo (KAnim.Build.SymbolFrame obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SymbolFrame ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 sourceFrameNum;
                                    public  System.Int32 duration;
                                    public  KAnimHashedString fileNameHash;
                                    public  UnityEngine.Vector2 uvMin;
                                    public  UnityEngine.Vector2 uvMax;
                                    public  UnityEngine.Vector2 bboxMin;
                                    public  UnityEngine.Vector2 bboxMax;
                }
     public struct SymbolFrameInstance 
	         {
                            public  KAnim.Build.SymbolFrame symbolFrame;
                                    public  System.Int32 buildImageIdx;
                                    public  System.Int32 symbolIdx;
                }
     public class Symbol 
	 			: System.IComparable  
                    {
                public       System.Int32 GetFrameIdx (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasFrame (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.SymbolFrameInstance GetFrame (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 CompareTo (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasFlag (KAnim.SymbolFlags flag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol Copy ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Symbol ()  {
                throw new System.NotImplementedException();
            }
                            public  KAnim.Build build;
                                    public  KAnimHashedString hash;
                                    public  KAnimHashedString path;
                                    public  KAnimHashedString folder;
                                    public  KAnimHashedString colourChannel;
                                    public  System.Int32 flags;
                                    public  System.Int32 firstFrameIdx;
                                    public  System.Int32 numFrames;
                                    public  System.Int32 numLookupFrames;
                                    public  System.Int32[] frameLookup;
                                    public  System.Int32 index;
                                    public  System.Int32 symbolIndexInSourceBuild;
                }
}
}

     public class KAnimBatch 
	         {
                public       void DestroyTex ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBatchSet (BatchSet newBatchSet)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Register (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OverrideZ (System.Single z)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetLayer (System.Int32 layer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Deregister (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Activate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Deactivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetDirty (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 UpdateDirty (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimBatch (KAnimBatchGroup group, System.Int32 layer, System.Single z, KAnimBatchGroup.MaterialType material_type)  {
                throw new System.NotImplementedException();
            }
                     static KAnimBatch ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean dirty
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 dirtyCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean active
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 size
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector3 position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 layer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnimConverter.IAnimConverter> Controllers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  KAnimBatchGroup.MaterialType materialType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  HashedString batchGroup
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  BatchSet batchset
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup group
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 writtenLastFrame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.MaterialPropertyBlock matProperties
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup.KAnimBatchTextureCache.Entry dataTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup.KAnimBatchTextureCache.Entry symbolInstanceTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup.KAnimBatchTextureCache.Entry symbolOverrideInfoTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  KAnimBatch.AtlasList atlases;
                                    public static System.Int32 ShaderProperty_SUPPORTS_SYMBOL_OVERRIDING;
                                    public static System.Int32 ShaderProperty_ANIM_TEXTURE_START_OFFSET;
                     public struct SymbolInstanceSlot 
	         {
                            public  SymbolInstanceGpuData symbolInstanceData;
                                    public  System.Int32 dataVersion;
                }
     public struct SymbolOverrideInfoSlot 
	         {
                            public  SymbolOverrideInfoGpuData symbolOverrideInfo;
                                    public  System.Int32 dataVersion;
                }
     public class AtlasList 
	         {
                public       System.Int32 Add (UnityEngine.Texture2D atlas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Apply (UnityEngine.MaterialPropertyBlock material_property_block)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear (System.Int32 start_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetAtlasIdx (UnityEngine.Texture2D atlas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AtlasList (System.Int32 start_idx)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }
}

     public struct BatchGroupKey 
	 			: System.IEquatable<BatchGroupKey>  
                    {
                public       System.Boolean Equals (BatchGroupKey other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BatchGroupKey (HashedString group_id)  {
                throw new System.NotImplementedException();
            }
         public  HashedString groupID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class KAnimBatchGroup 
	         {
                public static      void FinalizeTextureCache ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Material GetMaterial (KAnimBatchGroup.MaterialType material_type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void FreeResources ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetBestTextureSize (System.Single cost)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void InitBuildAndAnimTex ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimBatchGroup.KAnimBatchTextureCache.Entry CreateTexture (System.String name, System.Int32 size_in_floats, System.Int32 texture_property_id, System.Int32 texture_size_property_id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimBatchGroup.KAnimBatchTextureCache.Entry CreateTexture ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void FreeTexture (KAnimBatchGroup.KAnimBatchTextureCache.Entry entry)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetDataTextures (UnityEngine.MaterialPropertyBlock matProperties, KAnimBatch.AtlasList atlases)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimBatchGroup (HashedString id)  {
                throw new System.NotImplementedException();
            }
                     static KAnimBatchGroup ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 maxGroupSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Mesh mesh
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  HashedString batchID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KBatchGroupData data
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup.KAnimBatchTextureCache.Entry buildAndAnimTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean InitOK
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32 batchCount;
                                    public static System.Int32 ShaderProperty_SYMBOLS_PER_BUILD;
                                    public static System.Int32 ShaderProperty_ANIM_TEXTURE_START_OFFSET;
                                    public static System.Int32 ShaderProperty_SYMBOL_OVERRIDES_PER_BUILD;
                     public class KAnimBatchTextureCache 
	         {
                public       KAnimBatchGroup.KAnimBatchTextureCache.Entry Get (System.Int32 float4s_per_side, System.Int32 texture_property_id, System.Int32 texture_size_property_id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Free (KAnimBatchGroup.KAnimBatchTextureCache.Entry entry)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Finalise ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimBatchTextureCache ()  {
                throw new System.NotImplementedException();
            }
             public class Entry 
	         {
                public       void SetTextureAndSize (UnityEngine.MaterialPropertyBlock property_block)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Apply ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadRawTextureData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Entry (System.Int32 float4s_per_side)  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Texture2D texture
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte[] bytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single[] floats
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector2 texelSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Int32 texturePropertyId;
                                    public  System.Int32 textureSizePropertyId;
                                    public  System.Int32 cacheIndex;
                     public struct ByteToFloatConverter 
	         {
                            public  System.Byte[] bytes;
                                    public  System.Single[] floats;
                }
}
}
     public enum  RendererType {
                Default,
                        UI,
                        StaticBatch,
                        DontRender,
                        AnimOnly,
                }
         public enum  MaterialType {
                Default,
                        Simple,
                        Placer,
                        UI,
                        Overlay,
                        NumMaterials,
                }
    }

     public class KAnimBatchManager 
	         {
                public static      void CreateInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KAnimBatchManager Instance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KBatchGroupData GetBatchGroupData (HashedString groupID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimBatchGroup GetBatchGroup (BatchGroupKey group_key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Vector2I CellXYToChunkXY (Vector2I cell_xy)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Vector2I ControllerToChunkXY (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Register (KAnimConverter.IAnimConverter controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateActiveArea (Vector2I vis_chunk_min, Vector2I vis_chunk_max)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 UpdateDirty (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Render ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CompleteInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimBatchManager ()  {
                throw new System.NotImplementedException();
            }
                     static KAnimBatchManager ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 dirtyBatchLastFrame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchManager instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean isReady
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32[] atlasNames;
                                    public static HashedString NO_BATCH;
                                    public static HashedString IGNORE;
                                    public static UnityEngine.Vector2 GROUP_SIZE;
                                    public static System.Int32 CHUNK_SIZE;
                }

     public class KAnimConverter 
	         {
                     public KAnimConverter ()  {
                throw new System.NotImplementedException();
            }
             public interface IAnimConverter 
	         {
                       System.Int32 GetMaxVisible ()  
                    ;
                           HashedString GetBatchGroupID (System.Boolean isEditorWindow)  
                    ;
                           KAnimBatch GetBatch ()  
                    ;
                           void SetBatch (KAnimBatch id)  
                    ;
                           Vector2I GetCellXY ()  
                    ;
                           System.Single GetZ ()  
                    ;
                           System.Int32 GetLayer ()  
                    ;
                           System.String GetName ()  
                    ;
                           System.Boolean IsActive ()  
                    ;
                           System.Boolean IsVisible ()  
                    ;
                           System.Int32 GetCurrentNumFrames ()  
                    ;
                           System.Int32 GetFirstFrameIndex ()  
                    ;
                           System.Int32 GetCurrentFrameIndex ()  
                    ;
                           Matrix2x3 GetTransformMatrix ()  
                    ;
                           KBatchedAnimInstanceData GetBatchInstanceData ()  
                    ;
                           KAnimBatchGroup.MaterialType GetMaterialType ()  
                    ;
                           System.Boolean ApplySymbolOverrides ()  
                    ;
               SymbolInstanceGpuData symbolInstanceGpuData
                   
                 {
                                                get;
                                         }
                    SymbolOverrideInfoGpuData symbolOverrideInfoGpuData
                   
                 {
                                                get;
                                         }
                 }
}

     public class KAnimFile 
	 			: UnityEngine.ScriptableObject  
                    {
                public       void Initialize (UnityEngine.TextAsset anim, UnityEngine.TextAsset build, System.Collections.Generic.IList<UnityEngine.Texture2D> textures)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimFileData GetData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimFile ()  {
                throw new System.NotImplementedException();
            }
         public  System.Byte[] animBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Byte[] buildBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Texture2D> textureList
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  HashedString batchTag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  KAnimFile.Mod mod;
                                    public  System.String homedirectory;
                                    public static System.String ANIM_ROOT_PATH;
                     public class Mod 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Mod ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Byte[] anim;
                                    public  System.Byte[] build;
                                    public  System.Collections.Generic.List<UnityEngine.Texture2D> textures;
                }
}

     public class KAnimFileData 
	         {
                public       KAnim.Anim GetAnim (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.FrameElement GetAnimFrameElement (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.FrameElement FindAnimFrameElement (KAnimHashedString symbolName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimFileData (System.String name)  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimHashedString hashName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnim.Build build
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32 index;
                                    public  HashedString batchTag;
                                    public  System.Int32 buildIndex;
                                    public  HashedString animBatchTag;
                                    public  System.Int32 firstAnimIndex;
                                    public  System.Int32 animCount;
                                    public  System.Int32 frameCount;
                                    public  System.Int32 firstElementIndex;
                                    public  System.Int32 elementCount;
                                    public  System.Int32 maxVisSymbolFrames;
                                    public static System.Int32 NO_RECORD;
                }

     public class AnimCommandFile 
	         {
                public       System.Boolean IsSwap (KAnimFile file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddGroupFile (KAnimGroupFile.GroupFile gf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetGroupName (KAnimFile kaf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AnimCommandFile ()  {
                throw new System.NotImplementedException();
            }
         public  AnimCommandFile.ConfigType Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  AnimCommandFile.GroupBy TagGroup
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KAnimBatchGroup.RendererType RendererType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TargetBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AnimTargetBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SwapTargetBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>> DefaultBuilds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 MaxGroupSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String directory;
                     public enum  ConfigType {
                Default,
                        AnimOnly,
                }
         public enum  GroupBy {
                __IGNORE__,
                        DontGroup,
                        Folder,
                        NamedGroup,
                        NamedGroupNoSplit,
                }
    }

     public class KAnimGroupFile 
	 			: UnityEngine.ScriptableObject  
                    {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFilePath (System.String contentDir)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KAnimGroupFile GetGroupFile ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KAnimGroupFile.Group GetGroup (HashedString tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      HashedString GetGroupForHomeDirectory (HashedString homedirectory)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<KAnimGroupFile.Group> GetData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean AddAnimFile (KAnimGroupFile.GroupFile gf, AnimCommandFile akf, KAnimFile file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimGroupFile.AddModResult AddAnimMod (KAnimGroupFile.GroupFile gf, AnimCommandFile akf, KAnimFile file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadGroupResourceFile ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadAll ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MapNamesToAnimFiles (System.Collections.Generic.Dictionary<HashedString, KAnimFile> animTable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimGroupFile ()  {
                throw new System.NotImplementedException();
            }
                     static KAnimGroupFile ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 MAX_ANIMS_PER_GROUP;
                     public class Group 
	         {
                     public Group (HashedString tag)  {
                throw new System.NotImplementedException();
            }
                            public  HashedString id;
                                    public  System.String commandDirectory;
                                    public  System.Collections.Generic.List<HashedString> animNames;
                                    public  KAnimBatchGroup.RendererType renderType;
                                    public  System.Int32 maxVisibleSymbols;
                                    public  System.Int32 maxGroupSize;
                                    public  HashedString target;
                                    public  HashedString swapTarget;
                                    public  HashedString animTarget;
                                    public  System.Collections.Generic.List<KAnimFile> animFiles;
                }
     public class GroupFile 
	         {
                     public GroupFile ()  {
                throw new System.NotImplementedException();
            }
         public  System.String groupID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String commandDirectory
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public enum  AddModResult {
                Added,
                        Replaced,
                }
    }

     public struct KAnimHashedString 
	 			: System.IComparable<KAnimHashedString>,System.IEquatable<KAnimHashedString>  
                    {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (KAnimHashedString obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (KAnimHashedString other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAnimHashedString (System.String name)  {
                throw new System.NotImplementedException();
            }
                     public KAnimHashedString (System.Int32 hash)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 HashValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DebuggerDisplay
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class KBatchGroupData 
	         {
                public       void FreeResources ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build AddNewBuildFile (KAnimHashedString fileHash)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddTextures (System.Collections.Generic.List<UnityEngine.Texture2D> buildtextures)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddAnim (KAnim.Anim anim)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim GetAnim (System.Int32 anim)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build GetBuild (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateMaxVisibleSymbols (System.Int32 newCount)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol GetSymbol (KAnimHashedString symbol_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol GetSymbol (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddBuildSymbol (KAnim.Build.Symbol symbol)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetSymbolCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.SymbolFrameInstance GetSymbolFrameInstance (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Texture2D GetTexure (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Build.Symbol GetBuildSymbol (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.Frame GetFrame (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnim.Anim.FrameElement GetFrameElement (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<KAnim.Anim.Frame> GetAnimFrames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<KAnim.Anim.FrameElement> GetAnimFrameElements ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetBuildSymbolFrameCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void WriteAnimData (System.Int32 start_index, System.Single[] data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetFirstIndex (KAnimHashedString symbol)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetSymbolIndex (KAnimHashedString symbol)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 WriteBuildData (System.Collections.Generic.List<KAnim.Build.SymbolFrameInstance> symbol_frame_instances, System.Single[] data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KBatchGroupData (HashedString id)  {
                throw new System.NotImplementedException();
            }
         public  HashedString groupID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean isSwap
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 maxVisibleSymbols
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 maxSymbolsPerBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 maxSymbolFrameInstancesPerbuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 animDataStartOffset
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<KAnim.Anim> anims
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<KAnimHashedString, System.Int32> animIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<KAnimHashedString, System.Int32> animCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnim.Anim.Frame> animFrames
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnim.Anim.FrameElement> frameElements
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnim.Build> builds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnim.Build.Symbol> frameElementSymbols
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<KAnimHashedString, System.Int32> frameElementSymbolIndices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<KAnim.Build.SymbolFrameInstance> symbolFrameInstances
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<KAnimHashedString, System.Int32> textureStartIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<KAnimHashedString, System.Int32> firstSymbolIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Texture2D> textures
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 SIZE_OF_SYMBOL_FRAME_ELEMENT;
                                    public static System.Int32 SIZE_OF_ANIM_FRAME;
                                    public static System.Int32 SIZE_OF_ANIM_FRAME_ELEMENT;
                                    public static System.Int32 MAX_GROUP_SIZE;
                }

     public class KBatchedAnimCanvasRenderer 
	 			: UnityEngine.MonoBehaviour,UnityEngine.UI.IMaskable  
                    {
                       void UnityEngine.UI.IMaskable.RecalculateMasking ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBatch (KAnimConverter.IAnimConverter conv)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KBatchedAnimCanvasRenderer ()  {
                throw new System.NotImplementedException();
            }
                     static KBatchedAnimCanvasRenderer ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.CanvasRenderer canvass
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Rendering.CompareFunction compare
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Rendering.StencilOp stencilOp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  KAnimBatch batch;
                                    public  UnityEngine.Material uiMat;
                }

     public class KBatchedAnimInstanceData 
	         {
                public       void SetClipRadius (System.Single x, System.Single y, System.Single dist_sq, System.Boolean do_clip)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBlend (System.Single amt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Color GetOverlayColour ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SetOverlayColour (UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Color GetTintColour ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SetTintColour (UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Color GetHighlightcolour ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SetHighlightColour (UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void WriteToTexture (System.Byte[] output_bytes, System.Int32 output_index, System.Int32 this_index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetOverrideTransformMatrix (Matrix2x3 transform_matrix)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearOverrideTransformMatrix ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KBatchedAnimInstanceData (KAnimConverter.IAnimConverter target)  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 SIZE_IN_BYTES;
                                    public static System.Int32 SIZE_IN_FLOATS;
                     public struct AnimInstanceData 
	         {
                            public  System.Single curAnimFrameIndex;
                                    public  System.Single thisIndex;
                                    public  System.Single currentAnimNumFrames;
                                    public  System.Single currentAnimFirstFrameIdx;
                                    public  Matrix2x3 transformMatrix;
                                    public  System.Single blend;
                                    public  System.Single unused;
                                    public  UnityEngine.Color highlightColour;
                                    public  UnityEngine.Color tintColour;
                                    public  UnityEngine.Color overlayColour;
                                    public  UnityEngine.Vector4 clipParameters;
                }
     public struct AnimInstanceDataToByteConverter 
	         {
                            public  System.Byte[] bytes;
                                    public  KBatchedAnimInstanceData.AnimInstanceData[] animInstanceData;
                }
}

     public class KCompBuilder 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public KCompBuilder ()  {
                throw new System.NotImplementedException();
            }
             public struct BodyData 
	         {
                            public  HashedString headShape;
                                    public  HashedString mouth;
                                    public  HashedString neck;
                                    public  HashedString eyes;
                                    public  HashedString hair;
                                    public  HashedString body;
                                    public  HashedString arms;
                                    public  HashedString hat;
                                    public  HashedString faceFX;
                }
}

     public class KGlobalAnimParser 
	         {
                public static      void CreateInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KGlobalAnimParser Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimFileData GetFile (KAnimFile anim_file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KAnimFileData Load (KAnimFile anim_file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      AnimCommandFile GetParseCommands (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ParseAnimData (KBatchGroupData data, HashedString fileNameHash, FastReader reader, KAnimFileData animFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ParseBuildData (KBatchGroupData data, KAnimHashedString fileNameHash, FastReader reader, System.Collections.Generic.List<UnityEngine.Texture2D> textures)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PostParse (KBatchGroupData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KGlobalAnimParser ()  {
                throw new System.NotImplementedException();
            }
                     static KGlobalAnimParser ()  {
                throw new System.NotImplementedException();
            }
         public  KGlobalAnimParser instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static KAnimHashedString MISSING_SYMBOL;
                                    public static System.String ANIM_COMMAND_FILE;
                                    public static System.Single ANIM_SCALE;
                }

     public class SymbolInstanceGpuData 
	         {
                public       void SetVisible (System.Int32 symbol_idx, System.Boolean is_visible)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsVisible (System.Int32 symbol_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSymbolScale (System.Int32 symbol_index, System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSymbolTint (System.Int32 symbol_index, UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void WriteToTexture (System.Byte[] data, System.Int32 data_idx, System.Int32 instance_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SymbolInstanceGpuData (System.Int32 symbol_count)  {
                throw new System.NotImplementedException();
            }
         public  SymbolInstanceGpuData.SymbolInstance[] symbolInstances
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 version
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 FLOATS_PER_SYMBOL_INSTANCE;
                     public struct SymbolInstance 
	         {
                            public  System.Single symbolIndex;
                                    public  System.Single isVisible;
                                    public  System.Single scale;
                                    public  System.Single unused;
                                    public  UnityEngine.Color color;
                }
     public struct SymbolInstanceToByteConverter 
	         {
                            public  System.Byte[] bytes;
                                    public  SymbolInstanceGpuData.SymbolInstance[] symbolInstances;
                }
}

     public class SymbolOverrideInfoGpuData 
	         {
                public       void SetSymbolOverrideInfo (System.Int32 symbol_start_idx, System.Int32 symbol_num_frames, System.Int32 atlas_idx, KBatchGroupData source_data, System.Int32 source_start_idx, System.Int32 source_num_frames)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSymbolOverrideInfo (System.Int32 symbol_idx, KAnim.Build.SymbolFrameInstance symbol_frame_instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void WriteToTexture (System.Byte[] data, System.Int32 data_idx, System.Int32 instance_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SymbolOverrideInfoGpuData (System.Int32 symbol_count)  {
                throw new System.NotImplementedException();
            }
         public  SymbolOverrideInfoGpuData.SymbolOverrideInfo[] symbolOverrideInfos
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 version
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 FLOATS_PER_SYMBOL_OVERRIDE_INFO;
                     public struct SymbolOverrideInfo 
	         {
                            public  System.Single atlas;
                                    public  System.Single isoverriden;
                                    public  System.Single unused1;
                                    public  System.Single unused2;
                                    public  UnityEngine.Vector2 bboxMin;
                                    public  UnityEngine.Vector2 bboxMax;
                                    public  UnityEngine.Vector2 uvMin;
                                    public  UnityEngine.Vector2 uvMax;
                }
     public struct SymbolOverrideInfoToByteConverter 
	         {
                            public  System.Byte[] bytes;
                                    public  SymbolOverrideInfoGpuData.SymbolOverrideInfo[] symbolOverrideInfos;
                }
}

     public class Audio 
	 			: UnityEngine.ScriptableObject  
                    {
                public static      Audio Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Audio ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Single listenerMinZ;
                                    public  System.Single listenerMinOrthographicSize;
                                    public  System.Single listenerReferenceZ;
                                    public  System.Single listenerReferenceOrthographicSize;
                }

     public struct SoundDescription 
	         {
                public       FMOD.Studio.PARAMETER_ID GetParameterId (HashedString name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  System.String path;
                                    public  System.Single falloffDistanceSq;
                                    public  SoundDescription.Parameter[] parameters;
                                    public  OneShotSoundParameterUpdater[] oneShotParameterUpdaters;
                     public struct Parameter 
	         {
                     static Parameter ()  {
                throw new System.NotImplementedException();
            }
                            public  HashedString name;
                                    public  FMOD.Studio.PARAMETER_ID id;
                                    public static FMOD.Studio.PARAMETER_ID INVALID_ID;
                }
}

     public class KFMOD 
	         {
                public static      SoundDescription GetSoundEventDescription (HashedString path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlayOneShot (System.String sound, UnityEngine.Vector3 position, System.Single volume)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlayUISound (System.String sound)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      FMOD.Studio.EventInstance BeginOneShot (System.String sound, UnityEngine.Vector3 position, System.Single volume)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EndOneShot (FMOD.Studio.EventInstance instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      FMOD.Studio.EventInstance CreateInstance (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RenderEveryTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KFMOD ()  {
                throw new System.NotImplementedException();
            }
                     static KFMOD ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Boolean didFmodInitializeSuccessfully;
                                    public static KFMOD.AudioDevice currentDevice;
                     public struct AudioDevice 
	         {
                            public  System.Int32 fmod_id;
                                    public  System.String name;
                                    public  System.Guid guid;
                                    public  System.Int32 systemRate;
                                    public  FMOD.SPEAKERMODE speakerMode;
                                    public  System.Int32 speakerModeChannels;
                                    public  System.Boolean selected;
                }
}

     public abstract class OneShotSoundParameterUpdater 
	         {
                public   virtual    void Update (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Play (OneShotSoundParameterUpdater.Sound sound)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public OneShotSoundParameterUpdater (HashedString parameter)  {
                throw new System.NotImplementedException();
            }
         public  HashedString parameter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public struct Sound 
	         {
                            public  FMOD.Studio.EventInstance ev;
                                    public  SoundDescription description;
                                    public  HashedString path;
                }
}

     public class KFMODDebugger 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public static      KFMODDebugger Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String s)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KFMODDebugger ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<KFMODDebugger.AudioDebugEntry> AudioDebugLog;
                                    public  System.Collections.Generic.Dictionary<KFMODDebugger.DebugSoundType, System.Boolean> allDebugSoundTypes;
                                    public  System.Boolean debugEnabled;
                                    public static KFMODDebugger instance;
                     public struct AudioDebugEntry 
	         {
                            public  System.String log;
                                    public  KFMODDebugger.DebugSoundType soundType;
                                    public  System.Single callTime;
                }
     public enum  DebugSoundType {
                UI,
                        Notifications,
                        Buildings,
                        DupeVoices,
                        DupeMovement,
                        DupeActions,
                        Creatures,
                        Plants,
                        Ambience,
                        Environment,
                        FX,
                        Music,
                        Uncategorized,
                }
    }

     public class PerlinNoise 
	         {
                public       System.Double Noise (System.Double x, System.Double y, System.Double z)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PerlinNoise (System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
        }

     public class SimplexNoise 
	         {
                public static      System.Single noise (System.Single x, System.Single y, System.Single z)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SimplexNoise ()  {
                throw new System.NotImplementedException();
            }
                     static SimplexNoise ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class PerlinSimplexNoise 
	         {
                public static      System.Single noise (System.Single xin, System.Single yin, System.Single zin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single noise (System.Single xin, System.Single yin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static PerlinSimplexNoise ()  {
                throw new System.NotImplementedException();
            }
        }

     public enum  Action {
                Invalid,
                        Escape,
                        Help,
                        MouseLeft,
                        ShiftMouseLeft,
                        MouseRight,
                        MouseMiddle,
                        ZoomIn,
                        ZoomOut,
                        SpeedUp,
                        SlowDown,
                        TogglePause,
                        CycleSpeed,
                        AlternateView,
                        DragStraight,
                        SetUserNav1,
                        SetUserNav2,
                        SetUserNav3,
                        SetUserNav4,
                        SetUserNav5,
                        SetUserNav6,
                        SetUserNav7,
                        SetUserNav8,
                        SetUserNav9,
                        SetUserNav10,
                        GotoUserNav1,
                        GotoUserNav2,
                        GotoUserNav3,
                        GotoUserNav4,
                        GotoUserNav5,
                        GotoUserNav6,
                        GotoUserNav7,
                        GotoUserNav8,
                        GotoUserNav9,
                        GotoUserNav10,
                        BUILD_MENU_START_INTERCEPT,
                        Plan1,
                        Plan2,
                        Plan3,
                        Plan4,
                        Plan5,
                        Plan6,
                        Plan7,
                        Plan8,
                        Plan9,
                        Plan10,
                        Plan11,
                        Plan12,
                        Plan13,
                        Plan14,
                        CopyBuilding,
                        BuildCategoryLadders,
                        BuildCategoryTiles,
                        BuildCategoryDoors,
                        BuildCategoryStorage,
                        BuildCategoryGenerators,
                        BuildCategoryWires,
                        BuildCategoryPowerControl,
                        BuildCategoryPlumbingStructures,
                        BuildCategoryPipes,
                        BuildCategoryVentilationStructures,
                        BuildCategoryTubes,
                        BuildCategoryTravelTubes,
                        BuildCategoryConveyance,
                        BuildCategoryLogicWiring,
                        BuildCategoryLogicGates,
                        BuildCategoryLogicSwitches,
                        BuildCategoryLogicConduits,
                        BuildCategoryCooking,
                        BuildCategoryFarming,
                        BuildCategoryRanching,
                        BuildCategoryResearch,
                        BuildCategoryHygiene,
                        BuildCategoryMedical,
                        BuildCategoryRecreation,
                        BuildCategoryFurniture,
                        BuildCategoryDecor,
                        BuildCategoryOxygen,
                        BuildCategoryUtilities,
                        BuildCategoryRefining,
                        BuildCategoryEquipment,
                        BuildCategoryRocketry,
                        BuildMenuKeyA,
                        BuildMenuKeyB,
                        BuildMenuKeyC,
                        BuildMenuKeyD,
                        BuildMenuKeyE,
                        BuildMenuKeyF,
                        BuildMenuKeyG,
                        BuildMenuKeyH,
                        BuildMenuKeyI,
                        BuildMenuKeyJ,
                        BuildMenuKeyK,
                        BuildMenuKeyL,
                        BuildMenuKeyM,
                        BuildMenuKeyN,
                        BuildMenuKeyO,
                        BuildMenuKeyP,
                        BuildMenuKeyQ,
                        BuildMenuKeyR,
                        BuildMenuKeyS,
                        BuildMenuKeyT,
                        BuildMenuKeyU,
                        BuildMenuKeyV,
                        BuildMenuKeyW,
                        BuildMenuKeyX,
                        BuildMenuKeyY,
                        BuildMenuKeyZ,
                        ManagePriorities,
                        ManageConsumables,
                        ManageVitals,
                        ManageResources,
                        ManageResearch,
                        ManageSchedule,
                        ManageReport,
                        ManageDatabase,
                        ManageSkills,
                        ManageStarmap,
                        Overlay1,
                        Overlay2,
                        Overlay3,
                        Overlay4,
                        Overlay5,
                        Overlay6,
                        Overlay7,
                        Overlay8,
                        Overlay9,
                        Overlay10,
                        Overlay11,
                        Overlay12,
                        Overlay13,
                        Overlay14,
                        Overlay15,
                        PanUp,
                        PanDown,
                        PanLeft,
                        PanRight,
                        CameraHome,
                        BuildingUtility1,
                        BuildingUtility2,
                        BuildingUtility3,
                        BuildingDeconstruct,
                        BuildingCancel,
                        Dig,
                        Attack,
                        Capture,
                        Harvest,
                        EmptyPipe,
                        AccessCleanUpCollection,
                        Mop,
                        Clear,
                        Disinfect,
                        AccessPrioritizeCollection,
                        Prioritize,
                        Deprioritize,
                        AccessRegionCollection,
                        SelectRegion,
                        EraseRegion,
                        CreateRoomRegion,
                        CreateToiletRegion,
                        CreateMedicalRegion,
                        CreateMessHallRegion,
                        CreateDisposalRegion,
                        CreateRecreationRegion,
                        CreateExosuitRegion,
                        ToggleEnabled,
                        ToggleOpen,
                        ToggleScreenshotMode,
                        SreenShot1x,
                        SreenShot2x,
                        SreenShot8x,
                        SreenShot32x,
                        DebugToggle,
                        DebugSpawnMinion,
                        DebugSpawnStressTest,
                        DebugSuperTestMode,
                        DebugUltraTestMode,
                        DebugSlowTestMode,
                        DebugInstantBuildMode,
                        DebugToggleFastWorkers,
                        DebugExplosion,
                        DebugDiscoverAllElements,
                        DebugTriggerException,
                        DebugTriggerError,
                        DebugTogglePersonalPriorityComparison,
                        DebugDig,
                        DebugToggleUI,
                        DebugCollectGarbage,
                        DebugInvincible,
                        DebugRefreshNavCell,
                        DebugToggleClusterFX,
                        DebugApplyHighAudioReverb,
                        DebugApplyLowAudioReverb,
                        DebugForceLightEverywhere,
                        DebugPlace,
                        DebugVisualTest,
                        DebugGameplayTest,
                        DebugElementTest,
                        DebugRiverTest,
                        DebugTileTest,
                        DebugGotoTarget,
                        DebugTeleport,
                        DebugSelectMaterial,
                        DebugToggleMusic,
                        DebugToggleSelectInEditor,
                        DebugPathFinding,
                        DebugSuperSpeed,
                        DebugGameStep,
                        DebugSimStep,
                        DebugNotification,
                        DebugNotificationMessage,
                        DebugReloadLevel,
                        DebugReloadMods,
                        ToggleProfiler,
                        ToggleChromeProfiler,
                        RotateBuilding,
                        DebugReportBug,
                        DebugFocus,
                        DebugCellInfo,
                        DebugDumpGCRoots,
                        DebugDumpGarbageReferences,
                        DebugDumpEventData,
                        DebugDumpSceneParitionerLeakData,
                        DebugCrashSim,
                        DebugNextCall,
                        DebugLockCursor,
                        DialogSubmit,
                        SandboxBrush,
                        SandboxSprinkle,
                        SandboxFlood,
                        SandboxMarquee,
                        SandboxSample,
                        SandboxHeatGun,
                        SandboxClearFloor,
                        SandboxDestroy,
                        SandboxSpawnEntity,
                        ToggleSandboxTools,
                        SandboxReveal,
                        SandboxRadsTool,
                        SandboxCritterTool,
                        SandboxCopyElement,
                        CinemaCamEnable,
                        CinemaPanLeft,
                        CinemaPanRight,
                        CinemaPanUp,
                        CinemaPanDown,
                        CinemaZoomIn,
                        CinemaZoomOut,
                        CinemaPanSpeedMinus,
                        CinemaPanSpeedPlus,
                        CinemaZoomSpeedMinus,
                        CinemaZoomSpeedPlus,
                        CinemaToggleLock,
                        CinemaToggleEasing,
                        CinemaUnpauseOnMove,
                        SwitchActiveWorld1,
                        SwitchActiveWorld2,
                        SwitchActiveWorld3,
                        SwitchActiveWorld4,
                        SwitchActiveWorld5,
                        SwitchActiveWorld6,
                        SwitchActiveWorld7,
                        SwitchActiveWorld8,
                        SwitchActiveWorld9,
                        SwitchActiveWorld10,
                        DebugSpawnMinionAtmoSuit,
                        NumActions,
                }
    
     public class GameInputMapping 
	         {
                    /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                        /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public static      void SetDefaultKeyBindings (BindingEntry[] default_keybindings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      BindingEntry[] GetBindingEntries ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      BindingEntry FindEntry (Action mAction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CompareActionKeyCodes (Action a, Action b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      BindingEntry[] FindEntriesByKeyCode (KKeyCode keycode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SaveBindings ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadBindings ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GameInputMapping ()  {
                throw new System.NotImplementedException();
            }
         public  BindingEntry[] DefaultBindings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String BindingsFilename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static BindingEntry[] KeyBindings;
                }

     public class GameInputManager 
	 			: KInputManager  
                    {
                public       KInputController AddKeyboardMouseController ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KInputController AddGamepadController (System.Int32 gamepad_index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RebindControls ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnApplicationFocus (System.Boolean focusStatus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GameInputManager (BindingEntry[] default_keybindings)  {
                throw new System.NotImplementedException();
            }
        }

     public class KInputBinding 
	         {
                     public KInputBinding (KKeyCode key_code, Modifier modifier, Action action)  {
                throw new System.NotImplementedException();
            }
                            public  KKeyCode mKeyCode;
                                    public  Action mAction;
                                    public  Modifier mModifier;
                }

     public class KInputController 
	 			: IInputHandler  
                    {
                public       void ClearBindings ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Bind (KKeyCode key_code, Modifier modifier, Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueueButtonEvent (KInputController.KeyDef key_def, System.Boolean is_down)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean GetKeyDown (KKeyCode key_code)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean GetKeyUp (KKeyCode key_code)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CheckModifier (KKeyCode[] key_codes, Modifier modifier)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToggleKeyboard (System.Boolean active)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToggleMouse (System.Boolean active)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispatch ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsActive (Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetAxis (Axis axis)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HandleCancelInput ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KKeyCode GetInputForAction (Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KInputController (System.Boolean is_gamepad)  {
                throw new System.NotImplementedException();
            }
                     static KInputController ()  {
                throw new System.NotImplementedException();
            }
         public  System.String handlerName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  KInputHandler inputHandler
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsGamepad
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public struct KeyDefEntry 
	         {
                     public KeyDefEntry (KKeyCode key_code, Modifier modifier)  {
                throw new System.NotImplementedException();
            }
        }
     public class KeyDef 
	         {
                     public KeyDef (KKeyCode key_code, Modifier modifier)  {
                throw new System.NotImplementedException();
            }
                            public  KKeyCode mKeyCode;
                                    public  Modifier mModifier;
                                    public  System.Boolean[] mActionFlags;
                                    public  System.Boolean mIsDown;
                }
}

     public enum  GamepadButton {
                A,
                        B,
                        X,
                        Y,
                        LS,
                        RS,
                        Back,
                        Start,
                        LJ,
                        RJ,
                        LT,
                        RT,
                        DigitalUp,
                        DigitalDown,
                        DigitalLeft,
                        DigitalRight,
                        NumButtons,
                }
    
     public enum  Modifier {
                None,
                        Alt,
                        Ctrl,
                        Shift,
                        CapsLock,
                        Backtick,
                }
    
     public enum  ExactModifier {
                Yes,
                        No,
                }
    
     public enum  Axis {
                LeftX,
                        LeftY,
                        RightX,
                        RightY,
                        NumAxis,
                }
    
     public struct BindingEntry 
	 			: System.IEquatable<BindingEntry>  
                    {
                public static      KKeyCode GetGamepadKeyCode (System.Int32 gamepad_number, GamepadButton button)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (BindingEntry other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsBindingEqual (BindingEntry other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object o)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BindingEntry (System.String group, GamepadButton button, KKeyCode key_code, Modifier modifier, Action action, System.Boolean rebindable, System.Boolean ignore_root_conflicts)  {
                throw new System.NotImplementedException();
            }
                            public  System.String mGroup;
                                    public  System.Boolean mRebindable;
                                    public  System.Boolean mIgnoreRootConflics;
                                    public  GamepadButton mButton;
                                    public  KKeyCode mKeyCode;
                                    public  Action mAction;
                                    public  Modifier mModifier;
                }

     public enum  InputEventType {
                KeyDown,
                        KeyUp,
                        NumInputEventTypes,
                }
    
     public class KInputEvent 
	         {
                     public KInputEvent (KInputController controller, InputEventType event_type)  {
                throw new System.NotImplementedException();
            }
         public  KInputController Controller
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  InputEventType Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean Consumed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KButtonEvent 
	 			: KInputEvent  
                    {
                public       System.Boolean TryConsume (Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsAction (Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Action GetAction ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KButtonEvent (KInputController controller, InputEventType event_type, System.Boolean[] is_action) : base(null, default(InputEventType)) {
                throw new System.NotImplementedException();
            }
        }

     public interface IInputHandler 
	         {
           System.String handlerName
                   
                 {
                                                get;
                                         }
                    KInputHandler inputHandler
                   
                 {
                                                get;
                                                    set;
                                         }
                 }

     public class KInputHandler 
	         {
                public       void AddInputHandler (KInputHandler handler, System.Int32 priority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveInputHandler (KInputHandler handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PushInputHandler (KInputHandler handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PopInputHandler ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HandleEvent (KInputEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HandleKeyDown (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HandleKeyUp (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KInputHandler GetInputHandler (IInputHandler handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Add (IInputHandler parent, UnityEngine.GameObject child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Add (IInputHandler parent, IInputHandler child, System.Int32 priority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Push (IInputHandler parent, IInputHandler child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Remove (IInputHandler parent, IInputHandler child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsActive (Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetAxis (Axis axis)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsGamepad ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KInputHandler (IInputHandler obj, KInputController controller)  {
                throw new System.NotImplementedException();
            }
                     public KInputHandler (IInputHandler obj)  {
                throw new System.NotImplementedException();
            }
            public delegate void KButtonEventHandler ();
        public delegate void KCancelInputHandler ();
    }

     public class KInputManager 
	         {
                public static      void SetUserActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddController (KInputController controller)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KInputController GetController (System.Int32 controller_index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetControllerCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KInputController GetDefaultController ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Dispatch ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnApplicationFocus (System.Boolean focus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 GetMousePos ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KInputManager ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isFocused
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int64 lastUserActionTicks
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected  System.Collections.Generic.List<KInputController> mControllers;
                                    public static System.Boolean isMousePosLocked;
                                    public static UnityEngine.Vector3 lockedMousePos;
                }

     public enum  KKeyCode {
                None,
                        Backspace,
                        Tab,
                        Clear,
                        Return,
                        Pause,
                        Escape,
                        Space,
                        Exclaim,
                        DoubleQuote,
                        Hash,
                        Dollar,
                        Ampersand,
                        Quote,
                        LeftParen,
                        RightParen,
                        Asterisk,
                        Plus,
                        Comma,
                        Minus,
                        Period,
                        Slash,
                        Alpha0,
                        Alpha1,
                        Alpha2,
                        Alpha3,
                        Alpha4,
                        Alpha5,
                        Alpha6,
                        Alpha7,
                        Alpha8,
                        Alpha9,
                        Colon,
                        Semicolon,
                        Less,
                        Equals,
                        Greater,
                        Question,
                        At,
                        LeftBracket,
                        Backslash,
                        RightBracket,
                        Caret,
                        Underscore,
                        BackQuote,
                        A,
                        B,
                        C,
                        D,
                        E,
                        F,
                        G,
                        H,
                        I,
                        J,
                        K,
                        L,
                        M,
                        N,
                        O,
                        P,
                        Q,
                        R,
                        S,
                        T,
                        U,
                        V,
                        W,
                        X,
                        Y,
                        Z,
                        Delete,
                        Keypad0,
                        Keypad1,
                        Keypad2,
                        Keypad3,
                        Keypad4,
                        Keypad5,
                        Keypad6,
                        Keypad7,
                        Keypad8,
                        Keypad9,
                        KeypadPeriod,
                        KeypadDivide,
                        KeypadMultiply,
                        KeypadMinus,
                        KeypadPlus,
                        KeypadEnter,
                        KeypadEquals,
                        UpArrow,
                        DownArrow,
                        RightArrow,
                        LeftArrow,
                        Insert,
                        Home,
                        End,
                        PageUp,
                        PageDown,
                        F1,
                        F2,
                        F3,
                        F4,
                        F5,
                        F6,
                        F7,
                        F8,
                        F9,
                        F10,
                        F11,
                        F12,
                        F13,
                        F14,
                        F15,
                        Numlock,
                        CapsLock,
                        ScrollLock,
                        RightShift,
                        LeftShift,
                        RightControl,
                        LeftControl,
                        RightAlt,
                        LeftAlt,
                        RightApple,
                        RightCommand,
                        LeftApple,
                        LeftCommand,
                        LeftWindows,
                        RightWindows,
                        AltGr,
                        Help,
                        Print,
                        SysReq,
                        Break,
                        Menu,
                        Mouse0,
                        Mouse1,
                        Mouse2,
                        Mouse3,
                        Mouse4,
                        Mouse5,
                        Mouse6,
                        JoystickButton0,
                        JoystickButton1,
                        JoystickButton2,
                        JoystickButton3,
                        JoystickButton4,
                        JoystickButton5,
                        JoystickButton6,
                        JoystickButton7,
                        JoystickButton8,
                        JoystickButton9,
                        JoystickButton10,
                        JoystickButton11,
                        JoystickButton12,
                        JoystickButton13,
                        JoystickButton14,
                        JoystickButton15,
                        JoystickButton16,
                        JoystickButton17,
                        JoystickButton18,
                        JoystickButton19,
                        Joystick1Button0,
                        Joystick1Button1,
                        Joystick1Button2,
                        Joystick1Button3,
                        Joystick1Button4,
                        Joystick1Button5,
                        Joystick1Button6,
                        Joystick1Button7,
                        Joystick1Button8,
                        Joystick1Button9,
                        Joystick1Button10,
                        Joystick1Button11,
                        Joystick1Button12,
                        Joystick1Button13,
                        Joystick1Button14,
                        Joystick1Button15,
                        Joystick1Button16,
                        Joystick1Button17,
                        Joystick1Button18,
                        Joystick1Button19,
                        Joystick2Button0,
                        Joystick2Button1,
                        Joystick2Button2,
                        Joystick2Button3,
                        Joystick2Button4,
                        Joystick2Button5,
                        Joystick2Button6,
                        Joystick2Button7,
                        Joystick2Button8,
                        Joystick2Button9,
                        Joystick2Button10,
                        Joystick2Button11,
                        Joystick2Button12,
                        Joystick2Button13,
                        Joystick2Button14,
                        Joystick2Button15,
                        Joystick2Button16,
                        Joystick2Button17,
                        Joystick2Button18,
                        Joystick2Button19,
                        Joystick3Button0,
                        Joystick3Button1,
                        Joystick3Button2,
                        Joystick3Button3,
                        Joystick3Button4,
                        Joystick3Button5,
                        Joystick3Button6,
                        Joystick3Button7,
                        Joystick3Button8,
                        Joystick3Button9,
                        Joystick3Button10,
                        Joystick3Button11,
                        Joystick3Button12,
                        Joystick3Button13,
                        Joystick3Button14,
                        Joystick3Button15,
                        Joystick3Button16,
                        Joystick3Button17,
                        Joystick3Button18,
                        Joystick3Button19,
                        Joystick4Button0,
                        Joystick4Button1,
                        Joystick4Button2,
                        Joystick4Button3,
                        Joystick4Button4,
                        Joystick4Button5,
                        Joystick4Button6,
                        Joystick4Button7,
                        Joystick4Button8,
                        Joystick4Button9,
                        Joystick4Button10,
                        Joystick4Button11,
                        Joystick4Button12,
                        Joystick4Button13,
                        Joystick4Button14,
                        Joystick4Button15,
                        Joystick4Button16,
                        Joystick4Button17,
                        Joystick4Button18,
                        Joystick4Button19,
                        KleiKeys,
                        MouseScrollDown,
                        MouseScrollUp,
                }
    
     public class KleiAccount 
	 			: ThreadedHttps<KleiAccount>  
                    {
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Net.WebResponse.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public       System.String PostRawData (System.Collections.Generic.Dictionary<System.String, System.Object> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AuthenticateUser (KleiAccount.GetUserIDdelegate cb)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnAuthTicketObtained (System.Byte[] ticket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Byte[] AuthTicket ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetAuthTicket (System.Byte[] ticket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearAuthTicket ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KleiAccount ()  {
                throw new System.NotImplementedException();
            }
                     static KleiAccount ()  {
                throw new System.NotImplementedException();
            }
                            public static System.String KleiUserID;
                                    public static System.String KleiAccountKey;
                    public delegate void GetUserIDdelegate ();
    }

     public class KleiMetrics 
	 			: ThreadedHttps<KleiMetrics>  
                    {
                public       void SetEnabled (System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.String PostMetricData (System.Collections.Generic.Dictionary<System.String, System.Object> data, System.String debug_source)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String PlatformUserID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String UserID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 SessionID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GameID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetGameID (System.Int32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetInstallTimeStamp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String CurrentLevel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      KleiMetrics.ExpansionsMetricsData[] Expansions ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetLastUserAction (System.Int64 lastUserActionTicks)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetStaticSessionVariable (System.String name, System.Object var)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveStaticSessionVariable (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddDefaultSessionVariables ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetCallBacks (System.Action setStaticSessionVariables, System.Action<System.Collections.Generic.Dictionary<System.String, System.Object>> setDynamicSessionVariables)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StartSession ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void EndSession (System.Boolean crashed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StartNewGame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void EndGame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SendEvent (System.Collections.Generic.Dictionary<System.String, System.Object> eventData, System.String debug_event_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SendProfileStats ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.Dictionary<System.String, System.Object> GetHardwareStats ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KleiMetrics ()  {
                throw new System.NotImplementedException();
            }
                     static KleiMetrics ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isMultiThreaded
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean enabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.String GameTimeFieldName;
                                    public static System.String BuildBranchName;
                                    public static System.String BuildFieldName;
                                    public static System.String SaveFolderWriteTest;
                                    public static System.String ExpansionsFieldName;
                     protected struct PostData 
	         {
                     public PostData (System.String key, System.Collections.Generic.Dictionary<System.String, System.Object> data)  {
                throw new System.NotImplementedException();
            }
                            public  System.String clientKey;
                                    public  System.Collections.Generic.Dictionary<System.String, System.Object> metricData;
                }
     protected struct ExpansionsMetricsData 
	         {
                            public  System.String Name;
                                    public  System.Boolean Activated;
                }
}

     public class ThreadedHttps<T> 
	         {
                public       System.Boolean RemoteCertificateValidationCallback (System.Object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Start ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void End ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Net.WebResponse.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    protected       System.String Send (System.Byte[] byteArray, System.Boolean isForce)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean ShouldQuit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void QuitOnError ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void Quit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Byte[] GetPacket ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void PutPacket (System.Byte[] packet, System.Boolean infront)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ForceSendData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void SendData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ThreadedHttps ()  {
                throw new System.NotImplementedException();
            }
         public  T Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.String serviceName;
                                    protected  System.String CLIENT_KEY;
                                    protected  System.String LIVE_ENDPOINT;
                                    protected  System.Threading.Thread updateThread;
                                    protected  System.Collections.Generic.List<System.Byte[]> packets;
                                    protected  System.Boolean shouldQuit;
                                    protected  System.Boolean quitOnError;
                                    protected  System.Boolean singleSend;
                }

     public class DistributionPlatform 
	 			: UnityEngine.MonoBehaviour  
                    {
                public static      void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestExit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TriggerDlcAuthenticationFailed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DistributionPlatform ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean Initialized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  DistributionPlatform.Implementation Inst
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  DistributionPlatform.Implementation Impl
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                      public interface Implementation 
	         {
                       System.Boolean IsDLCStatusReady ()  
                    ;
                           System.String ApplyWordFilter (System.String text)  
                    ;
                           void GetAuthTicket (DistributionPlatform.AuthTicketHandler callback)  
                    ;
                           System.Boolean IsDLCPurchased (System.String dlcID)  
                    ;
                           System.Boolean IsDLCSubscribed (System.String dlcID)  
                    ;
                           void ToggleDLCSubscription (System.String dlcID)  
                    ;
               System.Boolean Initialized
                   
                 {
                                                get;
                                         }
                    System.String Name
                   
                 {
                                                get;
                                         }
                    System.String Platform
                   
                 {
                                                get;
                                         }
                    System.String AccountLoginEndpoint
                   
                 {
                                                get;
                                         }
                    System.String MetricsClientKey
                   
                 {
                                                get;
                                         }
                    System.String MetricsUserIDField
                   
                 {
                                                get;
                                         }
                    DistributionPlatform.User LocalUser
                   
                 {
                                                get;
                                         }
                    System.Boolean IsArchiveBranch
                   
                 {
                                                get;
                                         }
                 }
    public delegate void AuthTicketHandler ();
         public abstract class UserId 
	         {
                public   virtual    System.UInt64 ToInt64 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected UserId ()  {
                throw new System.NotImplementedException();
            }
        }
     public abstract class User 
	         {
                     protected User ()  {
                throw new System.NotImplementedException();
            }
         public  DistributionPlatform.UserId Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }
}

     public abstract class RailAPI 
	         {
                public static      System.Boolean RestartAppIfNecessary (System.UInt64 gameId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 NotifyWindowAntiAddiction ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void FireEvents ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RegisterEventHandler (RailAPI.Event eventId, RailAPI.EventHandler handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void UnregisterEventHandler (RailAPI.Event eventId, RailAPI.EventHandler handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ApplyWordFilter (System.String strIn, System.Text.StringBuilder strOut, System.Int32 strOutLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetRailPlatformId (System.Int32 idOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetLocalUserName (System.Text.StringBuilder strOut, System.Int32 strOutLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetLocalUserId (System.UInt64 idOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestAuthTicket ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void QueryIsOwnedDlcsOnServer ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsOwnedDlc (System.UInt64 dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CheckAllDlcsStateReady (System.String user_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
             public enum  Platform {
                TGP,
                        QQGame,
                }
         public enum  Event {
                EventSystemChanged,
                        AuthTicketAcquired,
                        CheckAllDlcsStateReadyResult,
                        QueryIsOwnedDlcsResult,
                }
         public struct AuthTicketResponse 
	         {
                            public  System.String ticket;
                }
     public struct RailSystemStateChanged 
	         {
                            public  System.Boolean mRequestExit;
                }
     public struct QueryIsOwnedDlcsResult 
	         {
                            public  System.Int32 dlcGameId;
                                    public  System.Boolean isOwned;
                }
     public struct CheckAllDlcsStateReadyResult 
	         {
                            public  System.Boolean ready;
                }
    public delegate void EventHandler ();
    }

     public class SteamManager 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public SteamManager ()  {
                throw new System.NotImplementedException();
            }
         public  SteamManager Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean Initialized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static System.UInt32 STEAM_APPLICATION_ID;
                                    public static System.UInt32 STEAM_EXPANSION1_APPLICATION_ID;
                }

     public class RenderTextureDestroyer 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (UnityEngine.RenderTexture render_texture)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RenderTextureDestroyer ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<UnityEngine.RenderTexture> queued;
                                    public  System.Collections.Generic.List<UnityEngine.RenderTexture> finished;
                                    public static RenderTextureDestroyer Instance;
                }

     public abstract class RenderTextureDestroyerExtensions 
	         {
                public static      void DestroyRenderTexture (UnityEngine.RenderTexture render_texture)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class TextureAtlas 
	 			: UnityEngine.ScriptableObject  
                    {
                     public TextureAtlas ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<System.String> sourceReference;
                                    public  UnityEngine.Texture2D texture;
                                    public  System.Single scaleFactor;
                                    public  System.Int32 mipPaddingPixels;
                                    public  System.Int32 tileDimension;
                                    public  System.Boolean onlyRebuildSelfNamedFolder;
                                    public  TextureAtlas.Item[] items;
                     public struct Item 
	         {
                            public  System.String name;
                                    public  UnityEngine.Vector4 uvBox;
                                    public  UnityEngine.Vector3[] vertices;
                                    public  UnityEngine.Vector2[] uvs;
                                    public  System.Int32[] indices;
                }
     public class AtlasData 
	         {
                     public AtlasData ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<TextureAtlas.AtlasData.Frame> frames;
                                    public  TextureAtlas.AtlasData.Meta meta;
                     public class Frame 
	         {
                     public Frame ()  {
                throw new System.NotImplementedException();
            }
                            public  System.String filename;
                                    public  System.Collections.Generic.Dictionary<System.String, System.Int32> frame;
                                    public  System.Collections.Generic.List<System.Int32[]> vertices;
                                    public  System.Collections.Generic.List<System.Int32[]> verticesUV;
                                    public  System.Collections.Generic.List<System.Int32[]> triangles;
                }
     public struct Meta 
	         {
                            public  System.Collections.Generic.Dictionary<System.String, System.Int32> size;
                }
}
}

     public class TextureBuffer 
	         {
                public       TextureRegion Lock (System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unlock (TextureRegion region)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TextureBuffer (System.String name, System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, UnityEngine.FilterMode filter_mode, TexturePagePool pool)  {
                throw new System.NotImplementedException();
            }
                            public  System.String name;
                                    public  System.Int32 bytesPerPixel;
                                    public  TexturePagePool pool;
                                    public  UnityEngine.TextureFormat format;
                                    public  UnityEngine.RenderTexture texture;
                                    public  UnityEngine.Material material;
                }

     public class TexturePage 
	         {
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TexturePage (System.String name, System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 width;
                                    public  System.Int32 height;
                                    public  UnityEngine.TextureFormat format;
                                    public  TexturePagePool pool;
                                    public  UnityEngine.Texture2D texture;
                                    public  System.Byte[] bytes;
                }

     public class TexturePagePool 
	         {
                public       TexturePage Alloc (System.String name, System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release (TexturePage page)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TexturePagePool ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct TextureRegion 
	         {
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Byte b0)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Byte b0, System.Byte b1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Byte b0, System.Byte b1, System.Byte b2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Byte b0, System.Byte b1, System.Byte b2, System.Byte b3)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Single v0)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetBytes (System.Int32 x, System.Int32 y, System.Single v0, System.Single v1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unlock ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TextureRegion (System.Int32 x, System.Int32 y, TexturePage page, TextureBuffer buffer)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 x;
                                    public  System.Int32 y;
                                    public  System.Int32 bytesPerPixel;
                                    public  System.Byte[] bytes;
                                    public  System.Int32 width;
                                    public  TexturePage page;
                                    public  TextureBuffer buffer;
                                    public  TextureRegion.ByteToFloatConverter floatConverter;
                     public struct ByteToFloatConverter 
	         {
                            public  System.Byte[] bytes;
                                    public  System.Single[] floats;
                }
}

     public abstract class TextureUtil 
	         {
                public static      UnityEngine.Experimental.Rendering.GraphicsFormat TextureFormatToGraphicsFormat (UnityEngine.TextureFormat format)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetBytesPerPixel (UnityEngine.TextureFormat format)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.RenderTextureFormat GetRenderTextureFormat (UnityEngine.TextureFormat format)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class Bouncer 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void Bounce ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsBouncing ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Bouncer ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Single durationSecs;
                                    public  UnityEngine.Vector3 bounceTarget;
                                    public  System.Int32 numBounces;
                }

     public class ButtonLock 
	 			: UnityEngine.MonoBehaviour,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IDragHandler,UnityEngine.EventSystems.IBeginDragHandler,UnityEngine.EventSystems.IEndDragHandler  
                    {
                public   virtual    void OnPointerClick (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnBeginDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnEndDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ButtonLock ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.GameObject target;
                }

     public class ColorStyleSetting 
	 			: UnityEngine.ScriptableObject  
                    {
                public       void Init (UnityEngine.Color _color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ColorStyleSetting ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Color activeColor;
                                    public  UnityEngine.Color inactiveColor;
                                    public  UnityEngine.Color disabledColor;
                                    public  UnityEngine.Color disabledActiveColor;
                                    public  UnityEngine.Color hoverColor;
                                    public  UnityEngine.Color disabledhoverColor;
                }

     public class DetailScreenTabHeader 
	 			: KTabMenuHeader,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public      override void ActivateTabArtwork (System.Int32 tabIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DetailScreenTabHeader ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Single SelectedHeight;
                                    public  System.Single UnselectedHeight;
                }

     public class GameScreenManager 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Camera GetCamera (GameScreenManager.UIRenderTarget target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetCamera (GameScreenManager.UIRenderTarget target, UnityEngine.Camera camera)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.GameObject GetParent (GameScreenManager.UIRenderTarget target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.GameObject ActivateScreen (UnityEngine.GameObject screen, UnityEngine.GameObject parent, GameScreenManager.UIRenderTarget target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen InstantiateScreen (UnityEngine.GameObject screenPrefab, UnityEngine.GameObject parent, GameScreenManager.UIRenderTarget target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen StartScreen (UnityEngine.GameObject screenPrefab, UnityEngine.GameObject parent, GameScreenManager.UIRenderTarget target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GameScreenManager ()  {
                throw new System.NotImplementedException();
            }
         public  GameScreenManager Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Color[] UIColors
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  UnityEngine.GameObject ssHoverTextCanvas;
                                    public  UnityEngine.GameObject ssCameraCanvas;
                                    public  UnityEngine.GameObject ssOverlayCanvas;
                                    public  UnityEngine.GameObject worldSpaceCanvas;
                                    public  UnityEngine.GameObject screenshotModeCanvas;
                                    public  UnityEngine.UI.Image fadePlaneBack;
                                    public  UnityEngine.UI.Image fadePlaneFront;
                     public enum  UIRenderTarget {
                WorldSpace,
                        ScreenSpaceCamera,
                        ScreenSpaceOverlay,
                        HoverTextScreen,
                        ScreenshotModeCamera,
                }
    }

     public class HighlightOnHover 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HighlightOnHover ()  {
                throw new System.NotImplementedException();
            }
                            public  KImage image;
                }

     public class HoverCallback 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HoverCallback ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Action<System.Boolean> OnHover;
                }

     public class ImageToggleState 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public       void Awake ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RefreshColorStyle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSprites (UnityEngine.Sprite disabled, UnityEngine.Sprite inactive, UnityEngine.Sprite active, UnityEngine.Sprite disabledActive)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean GetIsActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetState (ImageToggleState.State newState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetActiveState (System.Boolean active)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetColorStyle (ColorStyleSetting style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ResetColor ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnHoverIn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnHoverOut ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetInactive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetDisabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetDisabledActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ImageToggleState ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsDisabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  UnityEngine.UI.Image TargetImage;
                                    public  UnityEngine.Sprite ActiveSprite;
                                    public  UnityEngine.Sprite InactiveSprite;
                                    public  UnityEngine.Sprite DisabledSprite;
                                    public  UnityEngine.Sprite DisabledActiveSprite;
                                    public  System.Boolean useSprites;
                                    public  UnityEngine.Color ActiveColour;
                                    public  UnityEngine.Color InactiveColour;
                                    public  UnityEngine.Color DisabledColour;
                                    public  UnityEngine.Color DisabledActiveColour;
                                    public  UnityEngine.Color HoverColour;
                                    public  UnityEngine.Color DisabledHoverColor;
                                    public  ColorStyleSetting colorStyleSetting;
                                    public  System.Boolean useStartingState;
                                    public  ImageToggleState.State startingState;
                     public enum  State {
                Disabled,
                        Inactive,
                        Active,
                        DisabledActive,
                }
    }

     public class ImageToggleStateThrobber 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public       void OnEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ImageToggleStateThrobber ()  {
                throw new System.NotImplementedException();
            }
                            public  ImageToggleState[] targetImageToggleStates;
                                    public  ImageToggleState.State state1;
                                    public  ImageToggleState.State state2;
                                    public  System.Single period;
                                    public  System.Boolean useScaledTime;
                }

     public class KAlign 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void SetTarget (UnityEngine.GameObject newtarget)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KAlign ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.GameObject target;
                                    public  KAlign.SourceLeftRight sourceHorizontal;
                                    public  KAlign.SourceTopBottom sourceVertical;
                                    public  KAlign.TargetLeftRight targetHorizontal;
                                    public  KAlign.TargetTopBottom targetVertical;
                                    public  UnityEngine.Vector2 offset;
                     public enum  TargetLeftRight {
                None,
                        Left,
                        Middle,
                        Right,
                }
         public enum  TargetTopBottom {
                None,
                        Top,
                        Middle,
                        Bottom,
                }
         public enum  SourceLeftRight {
                Left,
                        Middle,
                        Right,
                }
         public enum  SourceTopBottom {
                Top,
                        Middle,
                        Bottom,
                }
    }

     public class KBasicToggle 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                public   virtual    void OnPointerClick (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KBasicToggle ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isOn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KButton 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler  
                    {
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearOnClick ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearOnPointerEvents ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerUp (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerDown (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SignalClick (KKeyCode btn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SignalDoubleClick (KKeyCode btn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerClick (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlayPointerDownSound ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KButton ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isInteractable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean GetMouseOver
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  ButtonSoundPlayer soundPlayer;
                                    public  KImage bgImage;
                                    public  UnityEngine.UI.Image fgImage;
                                    public  KImage[] additionalKImages;
                }

     public class KButtonDrag 
	 			: KButton,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler,UnityEngine.EventSystems.IBeginDragHandler,UnityEngine.EventSystems.IDragHandler,UnityEngine.EventSystems.IEndDragHandler  
                    {
                public       void ClearOnDragEvents ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnBeginDrag (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnDrag (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnEndDrag (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KButtonDrag ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KChildFitter 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       UnityEngine.Vector2 GetPositionRelativeToTopLeftPivot (UnityEngine.RectTransform element)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void FitSize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KChildFitter ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Boolean fitWidth;
                                    public  System.Boolean fitHeight;
                                    public  System.Single HeightPadding;
                                    public  System.Single WidthPadding;
                                    public  System.Single WidthScale;
                                    public  System.Single HeightScale;
                                    public  UnityEngine.UI.LayoutElement overrideLayoutElement;
                                    public  System.Boolean findTotalBounds;
                                    public  System.Boolean includeLayoutGroupPadding;
                }

     public class KImage 
	 			: UnityEngine.UI.Image,UnityEngine.UI.ICanvasElement,UnityEngine.UI.IClippable,UnityEngine.UI.IMaskable,UnityEngine.UI.IMaterialModifier,UnityEngine.ISerializationCallbackReceiver,UnityEngine.UI.ILayoutElement,UnityEngine.ICanvasRaycastFilter  
                    {
                protected      override void Awake ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnDestroy ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ApplyColorStyleSetting ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KImage ()  {
                throw new System.NotImplementedException();
            }
         public  KImage.ColorSelector ColorState
                   
                 {
                                                set {  }
                                         }
                                     public  KImage.ColorSelector defaultState;
                                    public  ColorStyleSetting colorStyleSetting;
                                    public  System.Boolean clearMaskOnDisable;
                     public enum  ColorSelector {
                Active,
                        Inactive,
                        Disabled,
                        Hover,
                }
    }

     public class KImageButton 
	 			: KButton,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler  
                    {
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KImageButton ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Sprite Sprite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Sprite BackgroundSprite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  UnityEngine.UI.Text text;
                }

     public class KImageToggle 
	 			: KBasicToggle,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                     public KImageToggle ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KInputField 
	 			: KScreen,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void ProcessInput (System.String input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetDisplayValue (System.String input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KInputField ()  {
                throw new System.NotImplementedException();
            }
         public  TMPro.TMP_InputField field
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class KLayoutElement 
	 			: UnityEngine.UI.LayoutElement,UnityEngine.UI.ILayoutElement,UnityEngine.UI.ILayoutIgnorer  
                    {
                protected      override void OnEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KLayoutElement ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Boolean makeDirtyOnDisable;
                }

     public class KNumberInputField 
	 			: KInputField,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetAmount (System.Single newValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void ProcessInput (System.String input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KNumberInputField ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 decimalPlaces;
                                    public  System.Single currentValue;
                                    public  System.Single minValue;
                                    public  System.Single maxValue;
                }

     public class KPointerImage 
	 			: KImage,UnityEngine.UI.ICanvasElement,UnityEngine.UI.IClippable,UnityEngine.UI.IMaskable,UnityEngine.UI.IMaterialModifier,UnityEngine.ISerializationCallbackReceiver,UnityEngine.UI.ILayoutElement,UnityEngine.ICanvasRaycastFilter,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler  
                    {
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerDown (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerUp (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearPointerEvents ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KPointerImage ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KRectStretcher 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateStretching ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KRectStretcher ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Boolean StretchX;
                                    public  System.Boolean StretchY;
                                    public  System.Single XStretchFactor;
                                    public  System.Single YStretchFactor;
                                    public  KRectStretcher.ParentSizeReferenceValue SizeReferenceMethod;
                                    public  UnityEngine.Vector2 Padding;
                                    public  System.Boolean lerpToSize;
                                    public  System.Single lerpTime;
                                    public  UnityEngine.UI.LayoutElement OverrideLayoutElement;
                                    public  System.Boolean PreserveAspectRatio;
                                    public  System.Single aspectRatioToPreserve;
                                    public  KRectStretcher.aspectFitOption AspectFitOption;
                     public enum  ParentSizeReferenceValue {
                SizeDelta,
                        RectDimensions,
                }
         public enum  aspectFitOption {
                WidthDictatesHeight,
                        HeightDictatesWidth,
                        EnvelopeParent,
                }
    }

     public class KScreen 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                public       void SetIsEditing (System.Boolean state)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Single GetSortKey ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void SetHasFocus (System.Boolean has_focus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnKeyDown (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnKeyUp (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsModal ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void ScreenUpdate (System.Boolean topLevel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Activate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnActivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Deactivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnDeactivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String Name ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector3 WorldToScreen (UnityEngine.Vector3 pos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnShow (System.Boolean show)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Show (System.Boolean show)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetShouldFadeIn (System.Boolean bShouldFade)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KScreen ()  {
                throw new System.NotImplementedException();
            }
         public  System.String handlerName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  KInputHandler inputHandler
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean HasFocus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean isEditing
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Canvas canvas
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String screenName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean GetMouseOver
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean ConsumeMouseScroll
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Boolean activateOnSpawn;
                                    protected  System.Boolean mouseOver;
                                    public  WidgetTransition.TransitionType transitionType;
                                    public  System.Boolean fadeIn;
                                    public  System.String displayName;
                                    public  KScreen.PointerEnterActions pointerEnterActions;
                                    public  KScreen.PointerExitActions pointerExitActions;
                                    public static System.Single MODAL_SCREEN_SORT_KEY;
                                    public static System.Single EDITING_SCREEN_SORT_KEY;
                                    public static System.Single FULLSCREEN_SCREEN_SORT_KEY;
                    public delegate void PointerEnterActions ();
        public delegate void PointerExitActions ();
    }

     public class KScreenManager 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler  
                    {
                public       void DisableInput (System.Boolean disable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCmpDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.GameObject ActivateScreen (UnityEngine.GameObject screen, UnityEngine.GameObject parent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen InstantiateScreen (UnityEngine.GameObject screenPrefab, UnityEngine.GameObject parent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen StartScreen (UnityEngine.GameObject screenPrefab, UnityEngine.GameObject parent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PushScreen (KScreen screen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RefreshStack ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen PopScreen (KScreen screen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KScreen PopScreen ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String DebugScreenStack ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnKeyDown (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnKeyUp (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetEventSystemEnabled (System.Boolean state)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetNavigationEventsEnabled (System.Boolean state)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject AddExistingChild (UnityEngine.GameObject parent, UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject AddChild (UnityEngine.GameObject parent, UnityEngine.GameObject prefab)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KScreenManager ()  {
                throw new System.NotImplementedException();
            }
                     static KScreenManager ()  {
                throw new System.NotImplementedException();
            }
         public  KScreenManager Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String handlerName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  KInputHandler inputHandler
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KScrollRect 
	 			: UnityEngine.UI.ScrollRect,UnityEngine.EventSystems.IInitializePotentialDragHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IBeginDragHandler,UnityEngine.EventSystems.IEndDragHandler,UnityEngine.EventSystems.IDragHandler,UnityEngine.EventSystems.IScrollHandler,UnityEngine.UI.ICanvasElement,UnityEngine.UI.ILayoutElement,UnityEngine.UI.ILayoutGroup,UnityEngine.UI.ILayoutController  
                    {
                protected      override void Awake ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnScroll (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSmoothAutoScrollTarget (System.Single normalizedVerticalPos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSound (KScrollRect.SoundType soundType, System.String soundPath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnBeginDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnEndDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void LateUpdate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnRectTransformDimensionsChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnKeyDown (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnKeyUp (KButtonEvent e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KScrollRect ()  {
                throw new System.NotImplementedException();
            }
                     static KScrollRect ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isDragging
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Boolean forceContentMatchWidth;
                                    public  System.Boolean forceContentMatchHeight;
                                    public  System.Boolean allowHorizontalScrollWheel;
                                    public  System.Boolean allowVerticalScrollWheel;
                                    public  System.Boolean allowRightMouseScroll;
                                    public static System.Collections.Generic.Dictionary<KScrollRect.SoundType, System.String> DefaultSounds;
                     public enum  SoundType {
                OnMouseScroll,
                }
    }

     public class KSlider 
	 			: UnityEngine.UI.Slider,UnityEngine.EventSystems.IMoveHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.ISelectHandler,UnityEngine.EventSystems.IDeselectHandler,UnityEngine.EventSystems.IDragHandler,UnityEngine.EventSystems.IInitializePotentialDragHandler,UnityEngine.UI.ICanvasElement  
                    {
                public      override void OnPointerUp (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnPointerDown (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnDrag (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnMove (UnityEngine.EventSystems.AxisEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearReleaseHandleEvent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTooltipText (System.String tooltipText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlayStartSound ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlayMoveSound (KSlider.MoveSource moveSource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlayEndSound ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KSlider ()  {
                throw new System.NotImplementedException();
            }
                     static KSlider ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.AnimationCurve sliderWeightCurve;
                                    public  System.Boolean playedBoundaryBump;
                                    public static System.String[] DefaultSounds;
                     public enum  SoundType {
                Start,
                        Move,
                        End,
                        BoundaryLow,
                        BoundaryHigh,
                        Num,
                }
         public enum  MoveSource {
                Keyboard,
                        MouseDrag,
                        MouseClick,
                        Num,
                }
    }

     public class KSnap 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void SetTarget (UnityEngine.GameObject newtarget)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KSnap ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.GameObject target;
                                    public  KSnap.LeftRight horizontal;
                                    public  KSnap.TopBottom vertical;
                                    public  UnityEngine.Vector2 offset;
                     public enum  LeftRight {
                None,
                        Left,
                        Middle,
                        Right,
                }
         public enum  TopBottom {
                None,
                        Top,
                        Middle,
                        Bottom,
                }
    }

     public class KTabMenu 
	 			: KScreen,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                public       System.Int32 AddTab (System.String tabName, KScreen contents)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 AddTab (UnityEngine.Sprite icon, System.String tabName, KScreen contents, System.String tooltip)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void ActivateTab (System.Int32 tabIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnDeactivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTabEnabled (System.Int32 tabIdx, System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Int32 CountTabs ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KTabMenu ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 PreviousActiveTab
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  KTabMenuHeader header;
                                    protected  UnityEngine.RectTransform body;
                                    protected  System.Collections.Generic.List<KScreen> tabs;
                                    protected  System.Int32 previouslyActiveTab;
                    public delegate void TabActivated ();
    }

     public class KTabMenuHeader 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.String name, KTabMenuHeader.OnClick onClick, System.Int32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (UnityEngine.Sprite icon, System.String name, KTabMenuHeader.OnClick onClick, System.Int32 id, System.String tooltip)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Activate (System.Int32 itemIdx, System.Int32 previouslyActiveTabIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTabEnabled (System.Int32 tabIdx, System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void ActivateTabArtwork (System.Int32 tabIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KTabMenuHeader ()  {
                throw new System.NotImplementedException();
            }
                            public  TextStyleSetting TextStyle_Active;
                                    public  TextStyleSetting TextStyle_Inactive;
                    public delegate void OnClick ();
    }

     public class KToggle 
	 			: UnityEngine.UI.Toggle,UnityEngine.EventSystems.IMoveHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerDownHandler,UnityEngine.EventSystems.IPointerUpHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IPointerExitHandler,UnityEngine.EventSystems.ISelectHandler,UnityEngine.EventSystems.IDeselectHandler,UnityEngine.EventSystems.IPointerClickHandler,UnityEngine.EventSystems.ISubmitHandler,UnityEngine.UI.ICanvasElement  
                    {
                public       void ClearOnClick ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearPointerCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearAllCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Click ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ForceUpdateVisualState ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnPointerClick (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnDeselect (UnityEngine.EventSystems.BaseEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Deselect ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearAnimState ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnSelect (UnityEngine.EventSystems.BaseEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ActivateFlourish (System.Boolean state)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ActivateFlourish (System.Boolean state, ImageToggleState.State ImageState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnPointerEnter ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnPointerExit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnPointerEnter (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void OnPointerExit (UnityEngine.EventSystems.PointerEventData eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KToggle ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean GetMouseOver
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean isOn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  ToggleSoundPlayer soundPlayer;
                                    public  UnityEngine.UI.Image bgImage;
                                    public  UnityEngine.UI.Image fgImage;
                                    public  KToggleArtExtensions artExtension;
                                    protected  System.Boolean mouseOver;
                    public delegate void PointerEvent ();
    }

     public class KToggleArtExtensions 
	         {
                     public KToggleArtExtensions ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Animator animator;
                                    public  UnityEngine.UI.Image SelectedFlourish;
                                    public  UnityEngine.Sprite Shadow;
                                    public  UnityEngine.GameObject FGAnimationControllerObject;
                                    public  UnityEngine.UI.Image TopRightIcon;
                                    public  TMPro.TextMeshProUGUI LabelText;
                }

     public class KTreeControl 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void SetUserItemRoot (KTreeControl.UserItem rootItem)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KTreeControl ()  {
                throw new System.NotImplementedException();
            }
                            public  KTreeItem root;
                     public class UserItem 
	         {
                     public UserItem ()  {
                throw new System.NotImplementedException();
            }
                            public  System.String text;
                                    public  System.Object userData;
                                    public  System.Collections.Generic.IList<KTreeControl.UserItem> children;
                }
}

     public class KTreeItem 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void AddChild (KTreeItem child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveChild (KTreeItem child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToggleOpened ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToggleChecked ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KTreeItem ()  {
                throw new System.NotImplementedException();
            }
         public  System.String text
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean checkboxEnabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean checkboxChecked
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean opened
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IList<KTreeItem> children
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Object userData;
                                    public  KTreeItem parent;
                    public delegate void StateChanged ();
    }

     public class SetTextStyleSetting 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public static      void ApplyStyle (TMPro.TextMeshProUGUI sdfText, TextStyleSetting style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetStyle (TextStyleSetting newstyle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SetTextStyleSetting ()  {
                throw new System.NotImplementedException();
            }
             public enum  TextStyle {
                Standard,
                        Header,
                }
    }

     public class TabHeaderIcon 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public TabHeaderIcon ()  {
                throw new System.NotImplementedException();
            }
                            public  TMPro.TextMeshProUGUI TitleText;
                                    public  ToolTip toolTip;
                }

     public class TextStyleSetting 
	 			: UnityEngine.ScriptableObject  
                    {
                public       void Init (TMPro.TMP_FontAsset _sdfFont, System.Int32 _fontSize, UnityEngine.Color _color, System.Boolean _enableWordWrapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TextStyleSetting ()  {
                throw new System.NotImplementedException();
            }
                            public  TMPro.TMP_FontAsset sdfFont;
                                    public  System.Int32 fontSize;
                                    public  UnityEngine.Color textColor;
                                    public  TMPro.FontStyles style;
                                    public  System.Boolean enableWordWrapping;
                }

     public class ToolTip 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSimpleTooltip (System.String message)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddMultiStringTooltip (System.String newString, TextStyleSetting styleSetting)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearMultiStringTooltip ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetMultiString (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TextStyleSetting GetStyleSetting (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetFixedStringKey (System.String newKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RebuildDynamicTooltip ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerEnter (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnPointerExit (UnityEngine.EventSystems.PointerEventData data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCmpDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCmpEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateWhileHovered ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ToolTip ()  {
                throw new System.NotImplementedException();
            }
                     static ToolTip ()  {
                throw new System.NotImplementedException();
            }
         public  System.String toolTip
                   
                 {
                                                set {  }
                                         }
                  public  System.Int32 multiStringCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Func<System.String> OnToolTip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Boolean UseFixedStringKey;
                                    public  System.String FixedStringKey;
                                    public  System.Boolean worldSpace;
                                    public  System.Boolean forceRefresh;
                                    public  System.Boolean refreshWhileHovering;
                                    public  ToolTip.TooltipPosition toolTipPosition;
                                    public  UnityEngine.Vector2 tooltipPivot;
                                    public  UnityEngine.Vector2 tooltipPositionOffset;
                                    public  UnityEngine.Vector2 parentPositionAnchor;
                                    public  UnityEngine.RectTransform overrideParentObject;
                                    public  ToolTip.ToolTipSizeSetting SizingSetting;
                                    public  System.Single WrapWidth;
                                    public  ToolTip.ComplexTooltipDelegate OnComplexToolTip;
                     public enum  TooltipPosition {
                TopLeft,
                        TopCenter,
                        TopRight,
                        BottomLeft,
                        BottomCenter,
                        BottomRight,
                        Custom,
                }
         public enum  ToolTipSizeSetting {
                MaxWidthWrapContent,
                        DynamicWidthNoWrap,
                }
        public delegate void ComplexTooltipDelegate ();
    }

     public class ToolTipScreen 
	 			: KScreen,IStateMachineTarget,ISaveLoadable,IUniformGridObject,IInputHandler,UnityEngine.EventSystems.IPointerEnterHandler,UnityEngine.EventSystems.IEventSystemHandler,UnityEngine.EventSystems.IPointerExitHandler  
                    {
                protected      override void OnActivate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetToolTip (ToolTip tool_tip)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HotSwapTooltipString (System.String newString, System.Int32 lineIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearToolTip (ToolTip tt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void MarkTooltipDirty (ToolTip tt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void MakeDirtyTooltipClean (ToolTip tt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ToolTipScreen ()  {
                throw new System.NotImplementedException();
            }
         public  ToolTipScreen Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  UnityEngine.GameObject ToolTipPrefab;
                                    public  UnityEngine.RectTransform anchorRoot;
                                    public  UnityEngine.GameObject labelPrefab;
                                    public  TextStyleSetting defaultTooltipHeaderStyle;
                                    public  TextStyleSetting defaultTooltipBodyStyle;
                }

     public enum  UIHashes {
                OnClick,
                }
    
     public class WidgetSoundPlayer 
	         {
                public   virtual    System.String GetDefaultPath (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    WidgetSoundPlayer.WidgetSoundEvent[] widget_sound_events ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Play (System.Int32 sound_event_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WidgetSoundPlayer ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Boolean Enabled;
                                    public static System.Func<System.String, System.String> getSoundPath;
                     public struct WidgetSoundEvent 
	         {
                     public WidgetSoundEvent (System.Int32 idx, System.String Name, System.String OverrideAssetName, System.Boolean PlaySound)  {
                throw new System.NotImplementedException();
            }
                            public  System.String Name;
                                    public  System.String OverrideAssetName;
                                    public  System.Int32 idx;
                                    public  System.Boolean PlaySound;
                }
}

     public class ToggleSoundPlayer 
	 			: WidgetSoundPlayer  
                    {
                public      override System.String GetDefaultPath (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override WidgetSoundPlayer.WidgetSoundEvent[] widget_sound_events ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ToggleSoundPlayer ()  {
                throw new System.NotImplementedException();
            }
                     static ToggleSoundPlayer ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Func<System.Boolean> AcceptClickCondition;
                                    public  WidgetSoundPlayer.WidgetSoundEvent[] toggle_widget_sound_events;
                                    public static System.String[] default_values;
                     public enum  SoundEvents {
                OnClick_On,
                        OnClick_Off,
                        OnPointerEnter,
                        OnClick_Rejected,
                }
    }

     public class ButtonSoundPlayer 
	 			: WidgetSoundPlayer  
                    {
                public      override System.String GetDefaultPath (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override WidgetSoundPlayer.WidgetSoundEvent[] widget_sound_events ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ButtonSoundPlayer ()  {
                throw new System.NotImplementedException();
            }
                     static ButtonSoundPlayer ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Func<System.Boolean> AcceptClickCondition;
                                    public  WidgetSoundPlayer.WidgetSoundEvent[] button_widget_sound_events;
                                    public static System.String[] default_values;
                     public enum  SoundEvents {
                OnClick,
                        OnPointerEnter,
                        OnClick_Rejected,
                }
    }

     public class WidgetTransition 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void SetTransitionType (WidgetTransition.TransitionType transitionType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StartTransition ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StopTransition ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WidgetTransition ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.CanvasGroup CanvasGroup
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                      public enum  TransitionType {
                SlideFromRight,
                        SlideFromLeft,
                        FadeOnly,
                        SlideFromTop,
                }
    }

     public struct AABB3 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Expand (System.Single amount)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ExpandToFit (UnityEngine.Vector3 pt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ExpandToFit (AABB3 aabb)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (UnityEngine.Vector3 pt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (AABB3 aabb)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Intersects (AABB3 aabb)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Transform (UnityEngine.Matrix4x4 t)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AABB3 (UnityEngine.Vector3 pt)  {
                throw new System.NotImplementedException();
            }
                     public AABB3 (UnityEngine.Vector3 min, UnityEngine.Vector3 max)  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector3 Center
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector3 Range
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single Width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single Height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single Depth
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  UnityEngine.Vector3 min;
                                    public  UnityEngine.Vector3 max;
                }

     public class App 
	 			: UnityEngine.MonoBehaviour  
                    {
                public static      System.String GetCurrentSceneName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Restart ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Quit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadScene (System.String scene_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LateUpdate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Type> GetCurrentDomainTypes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static App ()  {
                throw new System.NotImplementedException();
            }
                     public App ()  {
                throw new System.NotImplementedException();
            }
                            public static App instance;
                                    public static System.Boolean IsExiting;
                                    public static System.Action OnPreLoadScene;
                                    public static System.Action OnPostLoadScene;
                                    public static System.Boolean isLoading;
                                    public static System.Boolean hasFocus;
                                    public static System.String loadingSceneName;
                }

     public struct ArrayRef<T> 
	         {
                public       System.Int32 Add (T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean RemoveFirst (System.Predicate<T> match)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean RemoveFirstSwap (System.Predicate<T> match)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveAt (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveAtSwap (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveAll (System.Predicate<T> match)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveAllSwap (System.Predicate<T> match)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 FindIndex (System.Predicate<T> match)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ShrinkToFit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ArrayRef (System.Int32 initialCapacity)  {
                throw new System.NotImplementedException();
            }
                     public ArrayRef (T[] elements, System.Int32 size)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 size
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 capacity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public abstract class AsyncCsvLoader<LoaderType, CsvEntryType> 
	 			: GlobalAsyncLoader<LoaderType>,IGlobalAsyncLoader where CsvEntryType : Resource
 
                    {
                public      override void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AsyncCsvLoader (UnityEngine.TextAsset asset)  {
                throw new System.NotImplementedException();
            }
                            public  CsvEntryType[] entries;
                }

     public interface IGlobalAsyncLoader 
	         {
        }

     public abstract class GlobalAsyncLoader<LoaderType> 
	 			: AsyncLoadManager<IGlobalAsyncLoader>.AsyncLoader<LoaderType>,IGlobalAsyncLoader  
                    {
                     protected GlobalAsyncLoader ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class AsyncLoader 
	         {
                public   virtual    System.Type[] GatherDependencies ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CollectLoaders (System.Collections.Generic.List<AsyncLoader> loaders)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected AsyncLoader ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class AsyncLoadManager<AsyncLoaderType> 
	         {
                public static      void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      AsyncLoader GetLoader (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static AsyncLoadManager ()  {
                throw new System.NotImplementedException();
            }
             public abstract class AsyncLoader<LoaderType> 
	 			: AsyncLoader  
                    {
                public static      LoaderType Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected AsyncLoader ()  {
                throw new System.NotImplementedException();
            }
        }
}

     public struct AxialI 
	 			: System.IEquatable<AxialI>  
                    {
                public       Vector3I ToCube ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector3 ToWorld ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 ToWorld2D ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (AxialI v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AxialI (System.Int32 a, System.Int32 b)  {
                throw new System.NotImplementedException();
            }
                     static AxialI ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 R
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Q
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Int32 r;
                                    public  System.Int32 q;
                                    public static AxialI ZERO;
                                    public static AxialI NORTHWEST;
                                    public static AxialI NORTHEAST;
                                    public static AxialI EAST;
                                    public static AxialI SOUTHEAST;
                                    public static AxialI SOUTHWEST;
                                    public static AxialI WEST;
                                    public static System.Collections.Generic.List<AxialI> DIRECTIONS;
                                    public static System.Collections.Generic.List<AxialI> CLOCKWISE;
                }

     public abstract class AxialUtil 
	         {
                public static      System.Collections.Generic.List<AxialI> GetRing (AxialI center, System.Int32 radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<AxialI> GetRings (AxialI center, System.Int32 minRadius, System.Int32 maxRadius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<AxialI> GetAllPointsWithinRadius (AxialI center, System.Int32 radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDistance (AxialI a, AxialI b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsAdjacent (AxialI a, AxialI b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsWithinRadius (AxialI a, AxialI center, System.Int32 radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 AxialToWorld (System.Single r, System.Single q)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IEnumerable<AxialI> SpiralOut (AxialI startLocation, System.Int32 maximumRings)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class BinaryHeap<T> 
	 			: System.Collections.Generic.IEnumerable<T>,System.Collections.IEnumerable  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void TrimExcess ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Insert (T newItem)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Peek ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T RemoveRoot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.IEnumerator GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BinaryHeap ()  {
                throw new System.NotImplementedException();
            }
                     public BinaryHeap (System.Collections.Generic.IComparer<T> comp)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public interface ICPULoad 
	         {
                       System.Single GetEstimatedFrameTime ()  
                    ;
                           System.Boolean AdjustLoad (System.Single currentFrameTime, System.Single frameTimeDelta)  
                    ;
            }

     public abstract class CPUBudget 
	         {
                public static      System.Single ComputeDuration (System.Int64 start)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRoot (ICPULoad root)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddChild (ICPULoad parent, ICPULoad child, System.Single loadBalanceThreshold)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddChild (ICPULoad parent, ICPULoad child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void FinalizeChildren (ICPULoad parent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Start (ICPULoad cpuLoad)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void End (ICPULoad cpuLoad)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Balance (ICPULoad cpuLoad, System.Single frameTimeDelta)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static CPUBudget ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 coreCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static System.Diagnostics.Stopwatch stopwatch;
                }

     public abstract class CSVUtil 
	         {
                public static      System.Boolean IsValidColumn (System.String[] grid, System.Int32 col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ParseData<T> (System.Object def, System.String[] grid, System.Int32 row)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnumTryParse (System.Type type, System.String input, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetValue<T> (T src, T dest) where T : System.IComparable<T>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetValue<T> (T[] src, T[] dest) where T : System.IComparable<T>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                     static CSVUtil ()  {
                throw new System.NotImplementedException();
            }
        }

     public enum  CellAlignment {
                Center,
                        Bottom,
                        Top,
                        Left,
                        Right,
                        RandomInternal,
                }
    
     public class CellChangeMonitor 
	 			: Singleton<CellChangeMonitor>  
                    {
                public       void MarkDirty (UnityEngine.Transform transform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsMoving (UnityEngine.Transform transform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RegisterMovementStateChanged (UnityEngine.Transform transform, System.Action<UnityEngine.Transform, System.Boolean> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterMovementStateChanged (System.Int32 instance_id, System.Action<UnityEngine.Transform, System.Boolean> callback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterMovementStateChanged (UnityEngine.Transform transform, System.Action<UnityEngine.Transform, System.Boolean> callback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 RegisterCellChangedHandler (UnityEngine.Transform transform, System.Action callback, System.String debug_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterCellChangedHandler (System.Int32 instance_id, System.Action callback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterCellChangedHandler (UnityEngine.Transform transform, System.Action callback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 PosToCell (UnityEngine.Vector3 pos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetGridSize (System.Int32 grid_width, System.Int32 grid_height)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RenderEveryTick ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CellChangeMonitor ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct CellOffset 
	 			: System.IEquatable<CellOffset>  
                    {
                public       Vector2I ToVector2I ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector3 ToVector3 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       CellOffset Offset (CellOffset offset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetOffsetDistance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (CellOffset offset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CellOffset (System.Int32 x, System.Int32 y)  {
                throw new System.NotImplementedException();
            }
                     public CellOffset (UnityEngine.Vector2 offset)  {
                throw new System.NotImplementedException();
            }
         public  CellOffset none
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32 x;
                                    public  System.Int32 y;
                }

     public abstract class ListPool<ObjectType, PoolIdentifier> 
	         {
                public static      ListPool<ObjectType, PoolIdentifier>.PooledList Allocate (System.Collections.Generic.List<ObjectType> objects)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ListPool<ObjectType, PoolIdentifier>.PooledList Allocate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ContainerPool GetPool ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static ListPool ()  {
                throw new System.NotImplementedException();
            }
             public class PooledList 
	 			: System.Collections.Generic.List<ObjectType>,System.Collections.Generic.IList<ObjectType>,System.Collections.Generic.ICollection<ObjectType>,System.Collections.Generic.IEnumerable<ObjectType>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<ObjectType>,System.Collections.Generic.IReadOnlyCollection<ObjectType>  
                    {
                public       void Recycle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PooledList ()  {
                throw new System.NotImplementedException();
            }
        }
}

     public abstract class HashSetPool<ObjectType, PoolIdentifier> 
	         {
                    /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public static      ContainerPool GetPool ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static HashSetPool ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class DictionaryPool<KeyType, ObjectType, PoolIdentifier> 
	         {
                public static      DictionaryPool<KeyType, ObjectType, PoolIdentifier>.PooledDictionary Allocate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ContainerPool GetPool ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static DictionaryPool ()  {
                throw new System.NotImplementedException();
            }
             public class PooledDictionary 
	 			: System.Collections.Generic.Dictionary<KeyType, ObjectType>,System.Collections.Generic.IDictionary<KeyType, ObjectType>,System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<KeyType, ObjectType>>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<KeyType, ObjectType>>,System.Collections.IEnumerable,System.Collections.IDictionary,System.Collections.ICollection,System.Collections.Generic.IReadOnlyDictionary<KeyType, ObjectType>,System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<KeyType, ObjectType>>,System.Runtime.Serialization.ISerializable,System.Runtime.Serialization.IDeserializationCallback  
                    {
                public       void Recycle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PooledDictionary ()  {
                throw new System.NotImplementedException();
            }
        }
}

     public abstract class QueuePool<ObjectType, PoolIdentifier> 
	         {
                public static      QueuePool<ObjectType, PoolIdentifier>.PooledQueue Allocate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ContainerPool GetPool ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static QueuePool ()  {
                throw new System.NotImplementedException();
            }
             public class PooledQueue 
	 			: System.Collections.Generic.Queue<ObjectType>,System.Collections.Generic.IEnumerable<ObjectType>,System.Collections.IEnumerable,System.Collections.ICollection,System.Collections.Generic.IReadOnlyCollection<ObjectType>  
                    {
                public       void Recycle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PooledQueue ()  {
                throw new System.NotImplementedException();
            }
        }
}

     public abstract class ContainerPool 
	         {
                public   virtual    System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected ContainerPool ()  {
                throw new System.NotImplementedException();
            }
        }

     public class ContainerPool<ContainerType, PoolIdentifier> 
	 			: ContainerPool  
                    {
                public       ContainerType Allocate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Free (ContainerType container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ContainerPool ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class Constants 
	         {
                     static Constants ()  {
                throw new System.NotImplementedException();
            }
                            public static UnityEngine.Color POSITIVE_COLOR;
                                    public static System.String POSITIVE_COLOR_STR;
                                    public static UnityEngine.Color NEGATIVE_COLOR;
                                    public static System.String NEGATIVE_COLOR_STR;
                                    public static UnityEngine.Color NEUTRAL_COLOR;
                                    public static System.String NEUTRAL_COLOR_STR;
                                    public static UnityEngine.Color WARNING_COLOR;
                                    public static System.String WARNING_COLOR_STR;
                                    public static System.String WHITE_COLOR_STR;
                                    public static System.Single GlobalTimeScale;
                                    public static System.Single MINUTES;
                                    public static System.Single SECONDS_PER_CYCLE;
                                    public static System.Int32 ScheduleBlocksPerCycle;
                                    public static System.Int32 NIGHT_BLOCKS;
                                    public static System.Int32 DAY_BLOCKS;
                                    public static System.Single SecondsPerScheduleBlock;
                                    public static System.Single NightimeDurationInSeconds;
                                    public static System.Single DaytimeDurationInSeconds;
                                    public static System.Single NightimeDurationInPercentage;
                                    public static System.Single DaytimeDurationInPercentage;
                                    public static System.Single StartTimeInSeconds;
                                    public static System.Single CircuitOverloadTime;
                                    public static System.Int32 AutoSaveDayInterval;
                                    public static System.Single ICE_DIG_TIME;
                                    public static System.String BULLETSTRING;
                                    public static System.String TABSTRING;
                                    public static System.String TABBULLETSTRING;
                                    public static System.Single W2KW;
                                    public static System.Single KW2W;
                                    public static System.Single J2DTU;
                                    public static System.Single W2DTU_S;
                                    public static System.Single KW2DTU_S;
                                    public static System.Single G2KG;
                                    public static System.Single KG2G;
                                    public static System.Single CELSIUS2KELVIN;
                                    public static System.Single CAL2KCAL;
                                    public static System.Single KCAL2CAL;
                                    public static System.Single HEATOFVAPORIZATION_WATER;
                                    public static System.Single DefaultEntityThickness;
                                    public static System.Single DefaultSurfaceArea;
                                    public static System.Single DefaultGroundTransferScale;
                                    public static System.Single SPACE_DISTANCE_TO_KILOMETERS;
                                    public static System.Int32 LOGIC_SOUND_INTERVAL_COUNTER;
                                    public static System.Single LOGIC_SOUND_VOLUME_COOLDOWN;
                                    public static System.Single DEFAULT_SOUND_EVENT_VOLUME;
                                    public static System.Single AUDIO_HIGHLIGHT_POSITION_INTENSITY;
                }

     public abstract class DebugHashes 
	         {
                public static      void Add (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetName (System.Int32 hash)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static DebugHashes ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class DebugUtil 
	         {
                public static      void Assert (System.Boolean test)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean test, System.String message)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean test, System.String message0, System.String message1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean test, System.String message0, System.String message1, System.String message2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String BuildString (System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevAssert (System.Boolean test, System.String msg, UnityEngine.Object context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevAssertArgs (System.Boolean test, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevAssertArgsWithStack (System.Boolean test, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevLogError (UnityEngine.Object context, System.String msg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevLogError (System.String msg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevLogErrorFormat (UnityEngine.Object context, System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DevLogErrorFormat (System.String format, System.Object[] args)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogArgs (System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogArgs (UnityEngine.Object context, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarningArgs (System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogWarningArgs (UnityEngine.Object context, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogErrorArgs (System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogErrorArgs (UnityEngine.Object context, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogException (UnityEngine.Object context, System.String errorMessage, System.Exception e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Exception RetrieveLastExceptionLogged ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String FullName (UnityEngine.GameObject obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String FullName (UnityEngine.Component cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogIfSelected (UnityEngine.GameObject obj, System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ProfileBegin (System.String str)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ProfileBegin (System.String str, UnityEngine.Object target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ProfileEnd ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static DebugUtil ()  {
                throw new System.NotImplementedException();
            }
        }

     public class DeepProfiler 
	         {
                public       void BeginSample (System.String message)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void EndSample ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DeepProfiler (System.Boolean enable_profiling)  {
                throw new System.NotImplementedException();
            }
        }

     public struct Descriptor 
	         {
                public       void SetupDescriptor (System.String txt, System.String tooltip, Descriptor.DescriptorType descriptorType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Descriptor IncreaseIndent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Descriptor DecreaseIndent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String IndentedText ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Descriptor (System.String txt, System.String tooltip, Descriptor.DescriptorType descriptorType, System.Boolean only_for_simple_info_screen)  {
                throw new System.NotImplementedException();
            }
                            public  System.String text;
                                    public  System.String tooltipText;
                                    public  System.Int32 indent;
                                    public  Descriptor.DescriptorType type;
                                    public  System.Boolean onlyForSimpleInfoScreen;
                     public enum  DescriptorType {
                Requirement,
                        Effect,
                        Lifecycle,
                        Information,
                        DiseaseSource,
                        Detail,
                        Symptom,
                        SymptomAidable,
                }
    }

     public class DlcManager 
	         {
                public static      System.Boolean IsVanillaId (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsVanillaId (System.String[] dlcIds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsValidForVanilla (System.String[] dlcIds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsExpansion1Id (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetContentBundleName (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetContentDirectoryName (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetDlcIdFromContentDirectory (System.String contentDirectory)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ToggleDLC (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsContentActive (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsDlcListValidForCurrentContent (System.String[] dlcIds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetHighestActiveDlcId ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetOwnedDLCIds ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetActiveDLCIds ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetContentLetter (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetActiveContentLetters ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsPureVanilla ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsExpansion1Installed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsExpansion1Active ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FeatureRadiationEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FeaturePlantMutationsEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FeatureClusterSpaceEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DlcManager ()  {
                throw new System.NotImplementedException();
            }
                     static DlcManager ()  {
                throw new System.NotImplementedException();
            }
                            public static System.String[] AVAILABLE_VANILLA_ONLY;
                                    public static System.String[] AVAILABLE_EXPANSION1_ONLY;
                                    public static System.String[] AVAILABLE_ALL_VERSIONS;
                                    public static System.Collections.Generic.List<System.String> RELEASE_ORDER;
                                    public static System.Boolean IsMainThread;
                                    public static System.String VANILLA_ID;
                                    public static System.String EXPANSION1_ID;
                                    public static System.String VANILLA_DIRECTORY;
                                    public static System.String EXPANSION1_DIRECTORY;
                }

     public abstract class DrawUtil 
	         {
                public static      void MultiColourGnomon (UnityEngine.Vector2 pos, System.Single size, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Gnomon (UnityEngine.Vector3 pos, System.Single size)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Gnomon (UnityEngine.Vector3 pos, System.Single size, UnityEngine.Color color, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Arrow (UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single size, UnityEngine.Color color, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Circle (UnityEngine.Vector3 pos, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Circle (UnityEngine.Vector3 pos, System.Single radius, UnityEngine.Color color, System.Nullable<UnityEngine.Vector3> normal, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Sphere (UnityEngine.Vector3 pos, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Box (UnityEngine.Vector3 pos, UnityEngine.Color color, System.Single size, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Sphere (UnityEngine.Vector3 pos, System.Single radius, UnityEngine.Color color, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Cell (System.Int32 gridWidth, System.Int32 cell, UnityEngine.Color color, System.Single inset, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CellXY (System.Int32 x, System.Int32 y, UnityEngine.Color color, System.Single inset, System.Single time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static DrawUtil ()  {
                throw new System.NotImplementedException();
            }
        }

     public class EnumFlagsAttribute 
	 			: UnityEngine.PropertyAttribute,System.Runtime.InteropServices._Attribute  
                    {
                     public EnumFlagsAttribute ()  {
                throw new System.NotImplementedException();
            }
        }

     public class EventSystem 
	         {
                public       void Trigger (UnityEngine.GameObject go, System.Int32 hash, System.Object data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterEvent (UnityEngine.GameObject target, System.Int32 eventName, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RegisterEvent (UnityEngine.GameObject target, System.Int32 eventName, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Subscribe (System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (System.Int32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Subscribe (UnityEngine.GameObject target, System.Int32 eventName, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Subscribe<ComponentType> (System.Int32 eventName, EventSystem.IntraObjectHandler<ComponentType> handler) where ComponentType : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (UnityEngine.GameObject target, System.Int32 eventName, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (System.Int32 eventName, System.Int32 subscribeHandle, System.Boolean suppressWarnings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe<ComponentType> (System.Int32 eventName, EventSystem.IntraObjectHandler<ComponentType> handler, System.Boolean suppressWarnings) where ComponentType : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (System.String[] eventNames, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EventSystem ()  {
                throw new System.NotImplementedException();
            }
                     static EventSystem ()  {
                throw new System.NotImplementedException();
            }
             public abstract class IntraObjectHandlerBase 
	         {
                public   virtual    void Trigger (UnityEngine.GameObject gameObject, System.Object eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected IntraObjectHandlerBase ()  {
                throw new System.NotImplementedException();
            }
        }
     public class IntraObjectHandler<ComponentType> 
	 			: EventSystem.IntraObjectHandlerBase where ComponentType : UnityEngine.Component
 
                    {
                public static      System.Boolean IsStatic (System.Delegate del)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Trigger (UnityEngine.GameObject gameObject, System.Object eventData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public IntraObjectHandler (System.Action<ComponentType, System.Object> handler)  {
                throw new System.NotImplementedException();
            }
        }
}

     public abstract class EventExtensions 
	         {
                public static      System.Int32 Subscribe<ComponentType> (UnityEngine.GameObject go, System.Int32 hash, EventSystem.IntraObjectHandler<ComponentType> handler) where ComponentType : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Trigger (UnityEngine.GameObject go, System.Int32 hash, System.Object data)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public interface IReader 
	         {
                       System.Byte ReadByte ()  
                    ;
                           System.SByte ReadSByte ()  
                    ;
                           System.Int16 ReadInt16 ()  
                    ;
                           System.UInt16 ReadUInt16 ()  
                    ;
                           System.Int32 ReadInt32 ()  
                    ;
                           System.UInt32 ReadUInt32 ()  
                    ;
                           System.Int64 ReadInt64 ()  
                    ;
                           System.UInt64 ReadUInt64 ()  
                    ;
                           System.Single ReadSingle ()  
                    ;
                           System.Double ReadDouble ()  
                    ;
                           System.Char[] ReadChars (System.Int32 length)  
                    ;
                           System.Byte[] ReadBytes (System.Int32 length)  
                    ;
                           void SkipBytes (System.Int32 length)  
                    ;
                           System.String ReadKleiString ()  
                    ;
                           System.Byte[] RawBytes ()  
                    ;
               System.Int32 Position
                   
                 {
                                                get;
                                         }
                    System.Boolean IsFinished
                   
                 {
                                                get;
                                         }
                 }

     public class FastReader 
	 			: IReader  
                    {
                public   virtual    System.Byte ReadByte ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.SByte ReadSByte ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.UInt16 ReadUInt16 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int16 ReadInt16 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.UInt32 ReadUInt32 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 ReadInt32 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.UInt64 ReadUInt64 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int64 ReadInt64 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Single ReadSingle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Double ReadDouble ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Char[] ReadChars (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] ReadBytes (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String ReadKleiString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void SkipBytes (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] RawBytes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FastReader (System.Byte[] bytes)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsFinished
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KBinaryReader 
	 			: System.IO.BinaryReader,System.IDisposable,IReader  
                    {
                public   virtual    void SkipBytes (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String ReadKleiString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] RawBytes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KBinaryReader (System.IO.Stream stream) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsFinished
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class FileLog 
	         {
                public static      void Initialize (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Log (System.Object[] objs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     FileLog (System.String filename)  {
                throw new System.NotImplementedException();
            }
                     static FileLog ()  {
                throw new System.NotImplementedException();
            }
        }

     public class FrameDelayedHandleVector<T> 
	 			: HandleVector<T>  
                    {
                public      override void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override T Release (HandleVector<T>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void NextFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FrameDelayedHandleVector (System.Int32 initial_size) : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
        }

     public class GarbageCollectionProfiler 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public GarbageCollectionProfiler ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 _ObjectCount;
                }

     public struct ValueArrayHandle 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ValueArrayHandle (System.Int32 handle)  {
                throw new System.NotImplementedException();
            }
                     static ValueArrayHandle ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 handle;
                                    public static ValueArrayHandle Invalid;
                }

     public class HandleValueArrayBase 
	         {
                     public HandleValueArrayBase ()  {
                throw new System.NotImplementedException();
            }
        }

     public class HandleValueArray<T> 
	 			: HandleValueArrayBase  
                    {
                public       ValueArrayHandle Add (T value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetIndex (ValueArrayHandle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (ValueArrayHandle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HandleValueArray (System.Int32 reserve_size)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 Count;
                                    public  HandleValueArray<T>.Entry[] Entries;
                     public struct Entry 
	         {
                            public  T Value;
                                    public  System.Int32 Handle;
                }
}

     public class HandleVector<T> 
	         {
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    HandleVector<T>.Handle Add (T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    T Release (HandleVector<T>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetItem (HandleVector<T>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnpackHandle (HandleVector<T>.Handle handle, out System.Byte version, out System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnpackHandleUnchecked (HandleVector<T>.Handle handle, out System.Byte version, out System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValid (HandleVector<T>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsVersionValid (HandleVector<T>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HandleVector (System.Int32 initial_size)  {
                throw new System.NotImplementedException();
            }
                     static HandleVector ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<T> Items
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.Stack<HandleVector<T>.Handle> Handles
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.Collections.Generic.Stack<HandleVector<T>.Handle> freeHandles;
                                    protected  System.Collections.Generic.List<T> items;
                                    protected  System.Collections.Generic.List<System.Byte> versions;
                                    public static HandleVector<T>.Handle InvalidHandle;
                     public struct Handle 
	 			: System.IComparable<HandleVector<T>.Handle>,System.IEquatable<HandleVector<T>.Handle>  
                    {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (HandleVector<T>.Handle obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (HandleVector<T>.Handle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Handle ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static HandleVector<T>.Handle InvalidHandle;
                }
}

     public abstract class Hash 
	         {
                public static      System.Int32 SDBMLower (System.String s)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32[] SDBMLower (System.Collections.Generic.IList<System.String> strings)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class HashCache 
	         {
                public static      HashCache Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String Get (System.Int32 hash)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String Get (HashedString hash)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String Get (KAnimHashedString hash)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HashedString Add (System.String text)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.Int32 hash, System.String text)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HashCache ()  {
                throw new System.NotImplementedException();
            }
        }

     public class HashedEnumAttribute 
	 			: UnityEngine.PropertyAttribute,System.Runtime.InteropServices._Attribute  
                    {
                     public HashedEnumAttribute ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct HashedString 
	 			: System.IComparable<HashedString>,System.IEquatable<HashedString>,UnityEngine.ISerializationCallbackReceiver  
                    {
                public static      System.Int32 Hash (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (HashedString obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (HashedString other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnAfterDeserialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnBeforeSerialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HashedString (System.String name)  {
                throw new System.NotImplementedException();
            }
                     public HashedString (System.Int32 initial_hash)  {
                throw new System.NotImplementedException();
            }
                     static HashedString ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsValid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 HashValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static HashedString Invalid;
                }

     public interface IWorkItem<SharedDataType> 
	         {
                       void Run (SharedDataType shared_data)  
                    ;
            }

     public interface IWorkItemCollection 
	         {
                       void InternalDoWorkItem (System.Int32 work_item_idx)  
                    ;
               System.Int32 Count
                   
                 {
                                                get;
                                         }
                 }

     public class WorkItemCollection<WorkItemType, SharedDataType> 
	 			: IWorkItemCollection where WorkItemType : IWorkItem<SharedDataType>
 
                    {
                public       WorkItemType GetWorkItem (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (WorkItemType work_item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void InternalDoWorkItem (System.Int32 work_item_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset (SharedDataType shared_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WorkItemCollection ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public abstract class GlobalJobManager 
	         {
                public static      void Run (IWorkItemCollection work_items)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Cleanup ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static GlobalJobManager ()  {
                throw new System.NotImplementedException();
            }
        }

     public class JobManager 
	         {
                public       System.Boolean DoNextWorkItem ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Cleanup ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run (IWorkItemCollection work_items)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DecrementActiveWorkerThreadCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public JobManager ()  {
                throw new System.NotImplementedException();
            }
                     static JobManager ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isShuttingDown
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Boolean errorOccured;
                }

     public abstract class KCompactedVectorBase 
	         {
                protected       HandleVector<System.Int32>.Handle Allocate (System.Int32 item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean Free (HandleVector<System.Int32>.Handle handle, System.Int32 last_idx, out System.Int32 free_component_idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValid (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsVersionValid (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Int32 ComputeIndex (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected KCompactedVectorBase (System.Int32 initial_count)  {
                throw new System.NotImplementedException();
            }
                            protected  System.Collections.Generic.List<System.Int32> dataHandleIndices;
                                    protected  HandleVector<System.Int32> handles;
                }

     public class KCompactedVector<T> 
	 			: KCompactedVectorBase,System.Collections.ICollection,System.Collections.IEnumerable  
                    {
                public       HandleVector<System.Int32>.Handle Allocate (T initial_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle Free (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetData (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetData (HandleVector<System.Int32>.Handle handle, T new_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<T> GetDataList ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CopyTo (System.Array array, System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.IEnumerator GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KCompactedVector (System.Int32 initial_count) : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsSynchronized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Object SyncRoot
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.Collections.Generic.List<T> data;
                }

     public class KSplitCompactedVector<Header, Payload> 
	 			: KCompactedVectorBase,System.Collections.ICollection,System.Collections.IEnumerable  
                    {
                public       HandleVector<System.Int32>.Handle Allocate (Header header, Payload payload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle Free (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetData (HandleVector<System.Int32>.Handle handle, out Header header, out Payload payload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Header GetHeader (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Payload GetPayload (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetData (HandleVector<System.Int32>.Handle handle, Header new_data0, Payload new_data1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetHeader (HandleVector<System.Int32>.Handle handle, Header new_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPayload (HandleVector<System.Int32>.Handle handle, Payload new_data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetDataLists (out System.Collections.Generic.List<Header> headers, out System.Collections.Generic.List<Payload> payloads)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CopyTo (System.Array array, System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.IEnumerator GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KSplitCompactedVector (System.Int32 initial_count) : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsSynchronized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Object SyncRoot
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.Collections.Generic.List<Header> headers;
                                    protected  System.Collections.Generic.List<Payload> payloads;
                }

     public class KComponentCleanUp 
	 			: UnityEngine.MonoBehaviour  
                    {
                public static      void SetInCleanUpPhase (System.Boolean in_cleanup_phase)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KComponentCleanUp ()  {
                throw new System.NotImplementedException();
            }
                     static KComponentCleanUp ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean InCleanUpPhase
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static KComponentCleanUp instance;
                }

     public abstract class KComponentManager<T> 
	 			: KCompactedVector<T>,System.Collections.ICollection,System.Collections.IEnumerable,IComponentManager  
                    {
                public   virtual    System.Boolean Has (System.Object go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       HandleVector<System.Int32>.Handle InternalAddComponent (System.Object instance, T cmp_values)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void InternalRemoveComponent (KComponentManager<T>.CleanupInfo info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (System.Object instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Spawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void RenderEveryTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void FixedUpdate (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Sim200ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void RemoveFromCleanupList (System.Object instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnPrefabInit (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnSpawn (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnCleanUp (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KComponentManager () : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected  System.Collections.Generic.Dictionary<System.Object, HandleVector<System.Int32>.Handle> instanceHandleMap;
                                    protected  System.Collections.Generic.List<KComponentManager<T>.CleanupInfo> cleanupList;
                     protected struct CleanupInfo 
	         {
                     public CleanupInfo (System.Object instance, HandleVector<System.Int32>.Handle handle)  {
                throw new System.NotImplementedException();
            }
                            public  System.Object instance;
                                    public  HandleVector<System.Int32>.Handle handle;
                }
}

     public abstract class KSplitComponentManager<Header, Payload> 
	 			: KSplitCompactedVector<Header, Payload>,System.Collections.ICollection,System.Collections.IEnumerable,IComponentManager  
                    {
                public   virtual    System.Boolean Has (System.Object go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       HandleVector<System.Int32>.Handle InternalAddComponent (System.Object instance, Header header, Payload payload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void InternalRemoveComponent (KSplitComponentManager<Header, Payload>.CleanupInfo info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (System.Object instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Spawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void RenderEveryTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void FixedUpdate (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Sim200ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void RemoveFromCleanupList (System.Object instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnPrefabInit (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnSpawn (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnCleanUp (HandleVector<System.Int32>.Handle h)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KSplitComponentManager () : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected  System.Collections.Generic.Dictionary<System.Object, HandleVector<System.Int32>.Handle> instanceHandleMap;
                                    protected  System.Collections.Generic.List<KSplitComponentManager<Header, Payload>.CleanupInfo> cleanupList;
                     protected struct CleanupInfo 
	         {
                     public CleanupInfo (System.Object instance, HandleVector<System.Int32>.Handle handle)  {
                throw new System.NotImplementedException();
            }
                            public  System.Object instance;
                                    public  HandleVector<System.Int32>.Handle handle;
                }
}

     public class KComponentSpawn 
	 			: UnityEngine.MonoBehaviour,ISim200ms,ISim33ms  
                    {
                public   virtual    void Sim33ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Sim200ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KComponentSpawn ()  {
                throw new System.NotImplementedException();
            }
                            public  KComponents comps;
                                    public static KComponentSpawn instance;
                }

     public interface IComponentManager 
	         {
                       void Spawn ()  
                    ;
                           void RenderEveryTick (System.Single dt)  
                    ;
                           void FixedUpdate (System.Single dt)  
                    ;
                           void Sim200ms (System.Single dt)  
                    ;
                           void CleanUp ()  
                    ;
                           void Clear ()  
                    ;
                           System.Boolean Has (System.Object go)  
                    ;
               System.Int32 Count
                   
                 {
                                                get;
                                         }
                    System.String Name
                   
                 {
                                                get;
                                         }
                 }

     public interface ISerializableComponentManager 
	 			: IComponentManager  
                    {
                       void Serialize (UnityEngine.GameObject go, System.IO.BinaryWriter writer)  
                    ;
                           void Deserialize (UnityEngine.GameObject go, IReader reader)  
                    ;
            }

     public class KComponents 
	         {
                public   virtual    void Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       T Add<T> (T manager) where T : IComponentManager
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Spawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Sim33ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RenderEveryTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Sim200ms (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KComponents ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class KGameObjectComponentManager<T> 
	 			: KComponentManager<T>,System.Collections.ICollection,System.Collections.IEnumerable,IComponentManager  
                    {
                public       HandleVector<System.Int32>.Handle Add (UnityEngine.GameObject go, T cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Remove (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (UnityEngine.GameObject obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (UnityEngine.MonoBehaviour obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected KGameObjectComponentManager ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class KGameObjectSplitComponentManager<Header, Payload> 
	 			: KSplitComponentManager<Header, Payload>,System.Collections.ICollection,System.Collections.IEnumerable,IComponentManager  
                    {
                public       HandleVector<System.Int32>.Handle Add (UnityEngine.GameObject go, Header header, Payload payload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Remove (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (UnityEngine.GameObject obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       HandleVector<System.Int32>.Handle GetHandle (UnityEngine.MonoBehaviour obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected KGameObjectSplitComponentManager ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class KGameObjectComponentManagerUtil 
	         {
                public static      void Serialize<MgrType, DataType> (MgrType mgr, UnityEngine.GameObject go, System.IO.BinaryWriter writer) where MgrType : KGameObjectComponentManager<DataType>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Deserialize<MgrType, DataType> (MgrType mgr, UnityEngine.GameObject go, IReader reader) where MgrType : KGameObjectComponentManager<DataType>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Serialize<MgrType, Header, Payload> (MgrType mgr, UnityEngine.GameObject go, System.IO.BinaryWriter writer) where MgrType : KGameObjectSplitComponentManager<Header, Payload>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Deserialize<MgrType, Header, Payload> (MgrType mgr, UnityEngine.GameObject go, IReader reader) where MgrType : KGameObjectSplitComponentManager<Header, Payload>
 
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class KMonoBehaviour 
	 			: UnityEngine.MonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public       void Awake ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void InitializeComponent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsInitialized ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnDestroy ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Start ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Spawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnCmpEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnCmpDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnForcedCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnLoadLevel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CreateDef ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T FindOrAdd<T> () where T : KMonoBehaviour
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void FindOrAdd<T> (T c) where T : KMonoBehaviour
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Require<T> () where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 Subscribe (System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Subscribe (UnityEngine.GameObject target, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Subscribe<ComponentType> (System.Int32 hash, EventSystem.IntraObjectHandler<ComponentType> handler) where ComponentType : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Unsubscribe (System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Unsubscribe (System.Int32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe (UnityEngine.GameObject target, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unsubscribe<ComponentType> (System.Int32 hash, EventSystem.IntraObjectHandler<ComponentType> handler, System.Boolean suppressWarnings) where ComponentType : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Trigger (System.Int32 hash, System.Object data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlaySound (System.String sound)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlaySound3DAtLocation (System.String sound, UnityEngine.Vector3 location)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlaySound3D (System.String asset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    UnityEngine.Vector2 PosMin ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    UnityEngine.Vector2 PosMax ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       ComponentType IStateMachineTarget.GetComponent<ComponentType> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KMonoBehaviour ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean isSpawned
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Transform transform
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean isNull
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.Boolean autoRegisterSimRender;
                                    protected  System.Boolean simRenderLoadBalance;
                                    public static UnityEngine.GameObject lastGameObject;
                                    public static KObject lastObj;
                                    public static System.Boolean isPoolPreInit;
                                    public static System.Boolean isLoadingScene;
                }

     public struct DefHandle 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       DefType Get<DefType> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Set<DefType> (DefType value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static DefHandle ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class KMonoBehaviourExtensions 
	         {
                public static      System.Int32 Subscribe (UnityEngine.GameObject go, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Subscribe (UnityEngine.GameObject go, UnityEngine.GameObject target, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Unsubscribe (UnityEngine.GameObject go, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Unsubscribe (UnityEngine.GameObject go, System.Int32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Unsubscribe (UnityEngine.GameObject go, UnityEngine.GameObject target, System.Int32 hash, System.Action<System.Object> handler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetComponentInChildrenOnly<T> (UnityEngine.GameObject go) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T[] GetComponentsInChildrenOnly<T> (UnityEngine.GameObject go) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetAlpha (UnityEngine.UI.Image img, System.Single alpha)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetAlpha (UnityEngine.UI.Text txt, System.Single alpha)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class KObject 
	         {
                public       void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       EventSystem GetEventSystem ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KObject (UnityEngine.GameObject go)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean hasEventSystem
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class KObjectManager 
	 			: UnityEngine.MonoBehaviour  
                    {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Cleanup ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KObject GetOrCreateObject (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KObject Get (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueueDestroy (KObject obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DumpEventData ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KObjectManager ()  {
                throw new System.NotImplementedException();
            }
         public  KObjectManager Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class KPlayerPrefs 
	         {
                public static      System.Boolean HasCorruptedFlag ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ResetCorruptedFlag ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeleteAll ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Save ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeleteKey (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetFloat (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetFloat (System.String key, System.Single defaultValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetInt (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetInt (System.String key, System.Int32 defaultValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetString (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetString (System.String key, System.String defaultValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean HasKey (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetFloat (System.String key, System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetInt (System.String key, System.Int32 value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetString (System.String key, System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KPlayerPrefs ()  {
                throw new System.NotImplementedException();
            }
                     static KPlayerPrefs ()  {
                throw new System.NotImplementedException();
            }
         public  KPlayerPrefs instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.String> strings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Int32> ints
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Single> floats
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.String FILENAME;
                                    public static System.String KPLAYER_PREFS_DATA_COLLECTION_KEY;
                }

     public interface IStateMachineControllerHack 
	         {
                       void CreateSMIS ()  
                    ;
                           void StartSMIS ()  
                    ;
            }

     public struct TagChangedEventData 
	         {
                     public TagChangedEventData (Tag tag, System.Boolean added)  {
                throw new System.NotImplementedException();
            }
                            public  Tag tag;
                                    public  System.Boolean added;
                }

     public class KPrefabID 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public       void CopyTags (KPrefabID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CopyInitFunctions (KPrefabID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RunInstantiateFn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void InitializeTags (System.Boolean force_initialize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateSaveLoadTag ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Tag GetSaveLoadTag ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateTagBits ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AndTagBits (TagBits rhs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnSpawn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCmpEnable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddTag (Tag tag, System.Boolean serialize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTag (Tag tag, System.Boolean set)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAnyTags (System.Collections.Generic.List<Tag> search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAnyTags (Tag[] search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAnyTags (TagBits search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAllTags (System.Collections.Generic.List<Tag> search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAllTags (Tag[] search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAllTags (TagBits search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAnyTags_AssumeLaundered (TagBits search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAllTags_AssumeLaundered (TagBits search_tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object o)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetUniqueID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetDebugName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KPrefabID ()  {
                throw new System.NotImplementedException();
            }
                     static KPrefabID ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NextUniqueID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean pendingDestruction
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean conflicted
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                                         public  Tag SaveLoadTag;
                                    public  Tag PrefabTag;
                                    public  System.Int32 InstanceID;
                                    public  System.Int32 defaultLayer;
                                    public  System.Collections.Generic.List<Descriptor> AdditionalRequirements;
                                    public  System.Collections.Generic.List<Descriptor> AdditionalEffects;
                                    public static System.Int32 InvalidInstanceID;
                    public delegate void PrefabFn ();
    }

     public class KPrefabIDTracker 
	         {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KPrefabIDTracker Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Register (KPrefabID instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unregister (KPrefabID instance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       KPrefabID GetInstance (System.Int32 instance_id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KPrefabIDTracker ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KPrivacyPrefs 
	         {
                public static      System.String GetPath ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetDirectory ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Save ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Load ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KPrivacyPrefs ()  {
                throw new System.NotImplementedException();
            }
                     static KPrivacyPrefs ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean disableDataCollection
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  KPrivacyPrefs instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static System.String FILENAME;
                }

     public class KProfilerEndpoint 
	         {
                public   virtual    void Begin (System.String name, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void End (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void BeginFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Ping (System.String display, System.String group, System.Double value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void BeginAsync (System.String display, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void EndAsync (System.String display)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void EndFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KProfilerEndpoint ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KProfilerPluginEndpoint 
	 			: KProfilerEndpoint  
                    {
                public      override void Begin (System.String name, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void End (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Ping (System.String display, System.String group, System.Double value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void BeginAsync (System.String display, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void EndAsync (System.String display)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void BeginFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void EndFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KProfilerPluginEndpoint ()  {
                throw new System.NotImplementedException();
            }
        }

     public class KProfile 
	 			: System.IDisposable  
                    {
                public   virtual    void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public KProfile (System.String name, System.String group)  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class KProfiler 
	         {
                public static      System.Boolean IsEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Enable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Disable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginThread (System.String name, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 BeginSampleI (System.String region_name, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 EndSampleI (System.String region_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String SanitizeName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Ping (System.String display, System.String group, System.Double value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginAsync (System.String display, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndAsync (System.String display)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginSample (System.String region_name, System.String group)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndSample (System.String region_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndSample (System.String region_name, System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginSample (System.String region_name, System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginSample (System.String region_name, System.String group, System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 BeginSampleI (System.String region_name, UnityEngine.Object profiler_obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginSample (System.String region_name, UnityEngine.Object profiler_obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddEvent (System.String event_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddCounter (System.String event_name, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.Int32>> series_name_counts)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddCounter (System.String event_name, System.String series_name, System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddCounter (System.String event_name, System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginThreadProfiling (System.String threadGroupName, System.String threadName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndThreadProfiling ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static KProfiler ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 counter;
                                    public static System.Threading.Thread main_thread;
                                    public static KProfilerEndpoint AppEndpoint;
                                    public static KProfilerEndpoint UnityEndpoint;
                                    public static KProfilerEndpoint ChromeEndpoint;
                     public struct Region 
	 			: System.IDisposable  
                    {
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Region (System.String region_name, UnityEngine.Object profiler_obj)  {
                throw new System.NotImplementedException();
            }
        }
}

     public class ProfilerBase 
	         {
                public static      void StartLine (System.Text.StringBuilder sb, System.String category, System.String region_name, System.Int32 tid, System.Diagnostics.Stopwatch sw, System.String ph)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void WriteLine (System.Text.StringBuilder sb, System.String category, System.String region_name, System.Int32 tid, System.Diagnostics.Stopwatch sw, System.String ph, System.String suffix)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean IsRecording ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Finalise ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToggleRecording (System.String category)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void StartRecording ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void StopRecording ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void BeginThreadProfiling (System.String threadGroupName, System.String threadName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void EndThreadProfiling ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       ProfilerBase.ThreadInfo ManifestThreadInfo (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void Push (System.String region_name, System.String file, System.UInt32 line)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void Pop ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ProfilerBase (System.String file_prefix)  {
                throw new System.NotImplementedException();
            }
                            protected  System.IO.StreamWriter proFile;
                                    protected  System.Collections.Generic.Dictionary<System.Int32, ProfilerBase.ThreadInfo> threadInfos;
                                    public  System.Diagnostics.Stopwatch sw;
                     protected struct ThreadInfo 
	         {
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void WriteLine (System.String category, System.String region_name, System.Diagnostics.Stopwatch sw, System.String ph, System.String suffix)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StartLine (System.String category, System.String region_name, System.Diagnostics.Stopwatch sw, System.String ph)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ThreadInfo (System.Int32 id)  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.Stack<System.String> regionStack;
                                    public  System.Text.StringBuilder sb;
                                    public  System.Int32 id;
                                    public  System.String name;
                }
}

     public class LoadProfiler 
	 			: ProfilerBase  
                    {
                public static      void AddEvent (System.String event_name, System.String file, System.UInt32 line)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginSample (System.String region_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndSample ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     LoadProfiler (System.String file_prefix) : base(null) {
                throw new System.NotImplementedException();
            }
                     static LoadProfiler ()  {
                throw new System.NotImplementedException();
            }
         public  LoadProfiler Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class LinearDictionary<Key, Val> 
	         {
                     public LinearDictionary ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class Logger 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void DebugDisplayLog ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Logger (System.String name)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean enableConsoleLogging
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean breakOnLog
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     protected  System.String name;
                                    public static System.UInt32 NextIdx;
                }

     public class Logger<EntryType> 
	 			: Logger  
                    {
                public       System.Collections.Generic.IEnumerator<EntryType> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetMaxEntries (System.Int32 new_max)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (EntryType entry)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Logger (System.String name, System.Int32 new_max) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Action<EntryType> OnLog;
                }

     public struct LoggerFSSF 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt, System.String param, System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFSSF (System.String name)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerSSF 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt, System.String param, System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerSSF (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFIO 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.Int32 evt, System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFIO (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFS 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFS (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFSFSF 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String name1, System.Single val1, System.String name2, System.Single val2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFSFSF (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFSS 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt, System.String param)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFSS (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFSSS 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt, System.String param0, System.String param1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFSSS (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerFSSSS 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt, System.String param0, System.String param1, System.String param2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerFSSSS (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public struct LoggerTimeString 
	         {
                public       System.String GetName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Log (System.String evt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoggerTimeString (System.String name, System.Int32 max_entries)  {
                throw new System.NotImplementedException();
            }
        }

     public class MarkovNameGenerator 
	         {
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MarkovNameGenerator (System.Collections.Generic.IEnumerable<System.String> sampleNames, System.Int32 order, System.Int32 minLength)  {
                throw new System.NotImplementedException();
            }
         public  System.String NextName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public abstract class MathUtil 
	         {
                public static      System.Single Clamp (System.Single min, System.Single max, System.Single val)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 Clamp (System.Int32 min, System.Int32 max, System.Int32 val)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single ReRange (System.Single val, System.Single in_a, System.Single in_b, System.Single out_a, System.Single out_b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single Wrap (System.Single min, System.Single max, System.Single val)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single ApproachConstant (System.Single target, System.Single current, System.Single speed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 ApproachConstant (UnityEngine.Vector3 target, UnityEngine.Vector3 current, System.Single speed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 Round (UnityEngine.Vector3 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 Min (UnityEngine.Vector3 a, UnityEngine.Vector3 b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 Max (UnityEngine.Vector3 a, UnityEngine.Vector3 b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3[] RaySphereIntersection (UnityEngine.Ray ray, UnityEngine.Vector3 sphereCenter, System.Single sphereRadius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single AngleSigned (UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 n)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetClosestPointBetweenPointAndLineSegment (MathUtil.Pair<UnityEngine.Vector2, UnityEngine.Vector2> segment, UnityEngine.Vector2 point, System.Single closest_point)  
        
            {
              throw new System.NotImplementedException();
            }
            
             public struct MinMax 
	         {
                public       System.Single Get (SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single Lerp (System.Single t)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MinMax (System.Single min, System.Single max)  {
                throw new System.NotImplementedException();
            }
         public  System.Single min
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single max
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class Pair<T, U> 
	         {
                     public Pair ()  {
                throw new System.NotImplementedException();
            }
                     public Pair (T first, U second)  {
                throw new System.NotImplementedException();
            }
         public  T First
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  U Second
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

     public struct Matrix2x3 
	         {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector3 MultiplyPoint (UnityEngine.Vector3 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector3 MultiplyVector (UnityEngine.Vector3 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 Scale (UnityEngine.Vector2 scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 Translate (UnityEngine.Vector2 translation)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 Rotate (System.Single angle_in_radians)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 Rotate (UnityEngine.Quaternion quaternion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 TRS (UnityEngine.Vector2 translation, UnityEngine.Quaternion quaternion, UnityEngine.Vector2 scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Matrix2x3 TRS (UnityEngine.Vector2 translation, System.Single angle_in_radians, UnityEngine.Vector2 scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Matrix2x3 (System.Single e00, System.Single e01, System.Single e02, System.Single e10, System.Single e11, System.Single e12)  {
                throw new System.NotImplementedException();
            }
                     static Matrix2x3 ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Single m00;
                                    public  System.Single m01;
                                    public  System.Single m02;
                                    public  System.Single m10;
                                    public  System.Single m11;
                                    public  System.Single m12;
                                    public static Matrix2x3 identity;
                }

     public abstract class MyAttributeManager<T> 
	 			: IAttributeManager  
                    {
                public   virtual    void OnAwake (System.Object obj, KMonoBehaviour cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnStart (System.Object obj, KMonoBehaviour cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MyAttributeManager (System.Collections.Generic.Dictionary<System.Type, System.Reflection.MethodInfo> attributeMap, System.Action<T> spawnFunc)  {
                throw new System.NotImplementedException();
            }
        }

     public interface IAttributeManager 
	         {
                       void OnAwake (System.Object obj, KMonoBehaviour cmp)  
                    ;
                           void OnStart (System.Object obj, KMonoBehaviour cmp)  
                    ;
            }

     public abstract class MyAttributes 
	         {
                public static      void Register (IAttributeManager mgr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OnAwake (System.Object obj, KMonoBehaviour cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OnAwake (KMonoBehaviour c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OnStart (System.Object obj, KMonoBehaviour cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OnStart (KMonoBehaviour c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static MyAttributes ()  {
                throw new System.NotImplementedException();
            }
        }

     public sealed class MyCmpReq 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public MyCmpReq ()  {
                throw new System.NotImplementedException();
            }
        }

     public sealed class MyCmpAdd 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public MyCmpAdd ()  {
                throw new System.NotImplementedException();
            }
        }

     public sealed class MyCmpGet 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public MyCmpGet ()  {
                throw new System.NotImplementedException();
            }
        }

     public class MyCmp 
	 			: MyAttributeManager<UnityEngine.Component>,IAttributeManager  
                    {
                public static      void Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component FindComponent<T> (KMonoBehaviour c, System.Boolean isStart) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component RequireComponent<T> (KMonoBehaviour c, System.Boolean isStart) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component FindOrAddComponent<T> (KMonoBehaviour c, System.Boolean isStart) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MyCmp (System.Collections.Generic.Dictionary<System.Type, System.Reflection.MethodInfo> attributeMap, System.Action<UnityEngine.Component> spawnFunc) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

     public struct Pair<T, U> 
	 			: System.IEquatable<Pair<T, U>>  
                    {
                public       System.Boolean Equals (Pair<T, U> other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Pair (T a, U b)  {
                throw new System.NotImplementedException();
            }
                            public  T first;
                                    public  U second;
                }

     public class PerformanceMonitor 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PerformanceMonitor ()  {
                throw new System.NotImplementedException();
            }
                     static PerformanceMonitor ()  {
                throw new System.NotImplementedException();
            }
         public  System.UInt64 NumFramesAbove30
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt64 NumFramesBelow30
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single FPS
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class PluginAssets 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public PluginAssets ()  {
                throw new System.NotImplementedException();
            }
                            public  TextStyleSetting defaultTextStyleSetting;
                                    public static PluginAssets Instance;
                }

     public class ReadOnlyAttribute 
	 			: UnityEngine.PropertyAttribute,System.Runtime.InteropServices._Attribute  
                    {
                     public ReadOnlyAttribute ()  {
                throw new System.NotImplementedException();
            }
        }

     public class Ref<ReferenceType> 
	 			: ISaveLoadable where ReferenceType : KMonoBehaviour
 
                    {
                public       void OnSerializing ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetId ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ComponentType Get<ComponentType> () where ComponentType : UnityEngine.MonoBehaviour
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ReferenceType Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Set (ReferenceType obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Ref (ReferenceType obj)  {
                throw new System.NotImplementedException();
            }
                     public Ref ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class RenderUtil 
	         {
                public static      void EnableRenderer (UnityEngine.Transform node, System.Boolean is_enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class Resource 
	         {
                public   virtual    void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Resource ()  {
                throw new System.NotImplementedException();
            }
                     public Resource (System.String id, ResourceSet parent, System.String name)  {
                throw new System.NotImplementedException();
            }
                     public Resource (System.String id, System.String name)  {
                throw new System.NotImplementedException();
            }
         public  ResourceGuid Guid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String Name;
                                    public  System.String Id;
                                    public  HashedString IdHash;
                                    public  System.Boolean Disabled;
                }

     public class ResourceGuid 
	 			: System.IEquatable<ResourceGuid>,ISaveLoadable  
                    {
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Equals (ResourceGuid other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceGuid (System.String id, Resource parent)  {
                throw new System.NotImplementedException();
            }
                            public  System.String Guid;
                }

     public class ResourceLoader<T> 
	         {
                public       System.Collections.Generic.IEnumerator<T> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.String text, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Load (UnityEngine.TextAsset file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceLoader ()  {
                throw new System.NotImplementedException();
            }
                     public ResourceLoader (UnityEngine.TextAsset file)  {
                throw new System.NotImplementedException();
            }
                     public ResourceLoader (System.String text, System.String name)  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<T> resources;
                }

     public abstract class ResourceSet 
	 			: Resource  
                    {
                public   virtual    Resource Add (Resource resource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Remove (Resource resource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Resource GetResource (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceSet ()  {
                throw new System.NotImplementedException();
            }
                     public ResourceSet (System.String id, ResourceSet parent)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class ResourceSet<T> 
	 			: ResourceSet where T : Resource
 
                    {
                public      override Resource GetResource (System.Int32 idx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Exists (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T TryGet (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T TryGet (HashedString id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Get (HashedString id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Get (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Remove (Resource resource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override Resource Add (Resource resource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Add (T resource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ResolveReferences ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceSet ()  {
                throw new System.NotImplementedException();
            }
                     public ResourceSet (System.String id, ResourceSet parent)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Collections.Generic.List<T> resources;
                }

     public class ResourceTreeLoader<T> 
	 			: ResourceLoader<T> where T : ResourceTreeNode
 
                    {
                public      override void Load (UnityEngine.TextAsset file)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceTreeLoader (UnityEngine.TextAsset file)  {
                throw new System.NotImplementedException();
            }
        }

     public class ResourceTreeNode 
	 			: Resource  
                    {
                     public ResourceTreeNode ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector2 center
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Single nodeX;
                                    public  System.Single nodeY;
                                    public  System.Single width;
                                    public  System.Single height;
                                    public  System.Collections.Generic.List<ResourceTreeNode> references;
                                    public  System.Collections.Generic.List<ResourceTreeNode.Edge> edges;
                     public class Edge 
	         {
                public       void AddToPath (Vector2f point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Render (UnityEngine.Rect rect, System.Single width, UnityEngine.Color colour)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Edge (ResourceTreeNode source, ResourceTreeNode target, ResourceTreeNode.Edge.EdgeType edgeType)  {
                throw new System.NotImplementedException();
            }
         public  ResourceTreeNode.Edge.EdgeType edgeType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ResourceTreeNode source
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ResourceTreeNode target
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Vector2> SrcTarget
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Vector2> path
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Vector2f sourceOffset;
                                    public  Vector2f targetOffset;
                     public enum  EdgeType {
                PolyLineEdge,
                        QuadCurveEdge,
                        ArcEdge,
                        SplineEdge,
                        BezierEdge,
                        GenericEdge,
                }
    }
}

     public interface ISaveLoadable 
	         {
        }

     public interface ISaveLoadableDetails 
	         {
                       void Serialize (System.IO.BinaryWriter writer)  
                    ;
                           void Deserialize (IReader reader)  
                    ;
            }

     public interface IRenderEveryTick 
	         {
                       void RenderEveryTick (System.Single dt)  
                    ;
            }

     public interface IRender200ms 
	         {
                       void Render200ms (System.Single dt)  
                    ;
            }

     public interface IRender1000ms 
	         {
                       void Render1000ms (System.Single dt)  
                    ;
            }

     public interface ISimEveryTick 
	         {
                       void SimEveryTick (System.Single dt)  
                    ;
            }

     public interface ISim33ms 
	         {
                       void Sim33ms (System.Single dt)  
                    ;
            }

     public interface ISim200ms 
	         {
                       void Sim200ms (System.Single dt)  
                    ;
            }

     public interface ISim1000ms 
	         {
                       void Sim1000ms (System.Single dt)  
                    ;
            }

     public interface ISim4000ms 
	         {
                       void Sim4000ms (System.Single dt)  
                    ;
            }

     public enum  UpdateRate {
                RENDER_EVERY_TICK,
                        RENDER_200ms,
                        RENDER_1000ms,
                        SIM_EVERY_TICK,
                        SIM_33ms,
                        SIM_200ms,
                        SIM_1000ms,
                        SIM_4000ms,
                }
    
     public class SimAndRenderScheduler 
	         {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Type GetUpdateInterface (UpdateRate update_rate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UpdateRate GetUpdateRate (System.Type updater)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UpdateRate GetUpdateRate<T> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.Object obj, System.Boolean load_balance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       SimAndRenderScheduler.Handle Schedule<SimUpdateType> (System.String name, UpdateBucketWithUpdater<SimUpdateType>.IUpdater bucket_updater, UpdateRate update_rate, SimUpdateType updater, System.Boolean load_balance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RegisterBatchUpdate<UpdateInterface, T> (UpdateBucketWithUpdater<UpdateInterface>.BatchUpdateDelegate batch_update)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     SimAndRenderScheduler ()  {
                throw new System.NotImplementedException();
            }
         public  SimAndRenderScheduler instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  SimAndRenderScheduler.RenderEveryTickUpdater renderEveryTick;
                                    public  SimAndRenderScheduler.Render200ms render200ms;
                                    public  SimAndRenderScheduler.Render1000msUpdater render1000ms;
                                    public  SimAndRenderScheduler.SimEveryTickUpdater simEveryTick;
                                    public  SimAndRenderScheduler.Sim33msUpdater sim33ms;
                                    public  SimAndRenderScheduler.Sim200msUpdater sim200ms;
                                    public  SimAndRenderScheduler.Sim1000msUpdater sim1000ms;
                                    public  SimAndRenderScheduler.Sim4000msUpdater sim4000ms;
                     public struct Handle 
	         {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  HandleVector<System.Int32>.Handle handle;
                                    public  StateMachineUpdater.BaseUpdateBucket bucket;
                }
     public class BaseUpdaterManager 
	         {
                     protected BaseUpdaterManager (UpdateRate update_rate)  {
                throw new System.NotImplementedException();
            }
         public  UpdateRate updateRate
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class UpdaterManager<UpdaterType> 
	 			: SimAndRenderScheduler.BaseUpdaterManager  
                    {
                public       void Add (UpdaterType updater, System.Boolean load_balance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (UpdaterType updater)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (UpdaterType updater)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UpdaterManager (UpdateRate update_rate) : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class RenderEveryTickUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<IRenderEveryTick>,UpdateBucketWithUpdater<IRenderEveryTick>.IUpdater  
                    {
                public   virtual    void Update (IRenderEveryTick updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RenderEveryTickUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Render200ms 
	 			: SimAndRenderScheduler.UpdaterManager<IRender200ms>,UpdateBucketWithUpdater<IRender200ms>.IUpdater  
                    {
                public   virtual    void Update (IRender200ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Render200ms () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Render1000msUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<IRender1000ms>,UpdateBucketWithUpdater<IRender1000ms>.IUpdater  
                    {
                public   virtual    void Update (IRender1000ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Render1000msUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class SimEveryTickUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<ISimEveryTick>,UpdateBucketWithUpdater<ISimEveryTick>.IUpdater  
                    {
                public   virtual    void Update (ISimEveryTick updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SimEveryTickUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Sim33msUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<ISim33ms>,UpdateBucketWithUpdater<ISim33ms>.IUpdater  
                    {
                public   virtual    void Update (ISim33ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Sim33msUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Sim200msUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<ISim200ms>,UpdateBucketWithUpdater<ISim200ms>.IUpdater  
                    {
                public   virtual    void Update (ISim200ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Sim200msUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Sim1000msUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<ISim1000ms>,UpdateBucketWithUpdater<ISim1000ms>.IUpdater  
                    {
                public   virtual    void Update (ISim1000ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Sim1000msUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
     public class Sim4000msUpdater 
	 			: SimAndRenderScheduler.UpdaterManager<ISim4000ms>,UpdateBucketWithUpdater<ISim4000ms>.IUpdater  
                    {
                public   virtual    void Update (ISim4000ms updater, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Sim4000msUpdater () : base(default(UpdateRate)) {
                throw new System.NotImplementedException();
            }
        }
}

     public abstract class Singleton<T> 
	         {
                public static      void CreateInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected Singleton ()  {
                throw new System.NotImplementedException();
            }
                     static Singleton ()  {
                throw new System.NotImplementedException();
            }
         public  T Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class ResourceFile 
	 			: UnityEngine.ScriptableObject  
                    {
                public   virtual    void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ResourceFile ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class SingletonResource<T> 
	         {
                public static      T Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class SoundListenerController 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void SetLoopingVolume (System.Single volume)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SoundListenerController ()  {
                throw new System.NotImplementedException();
            }
         public  SoundListenerController Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public interface IStateMachineTarget 
	         {
                       System.Int32 Subscribe (System.Int32 hash, System.Action<System.Object> handler)  
                    ;
                           void Unsubscribe (System.Int32 hash, System.Action<System.Object> handler)  
                    ;
                           void Unsubscribe (System.Int32 id)  
                    ;
                           void Trigger (System.Int32 hash, System.Object data)  
                    ;
                           ComponentType GetComponent<ComponentType> ()  
                    ;
               UnityEngine.GameObject gameObject
                   
                 {
                                                get;
                                         }
                    UnityEngine.Transform transform
                   
                 {
                                                get;
                                         }
                    System.String name
                   
                 {
                                                get;
                                         }
                    System.Boolean isNull
                   
                 {
                                                get;
                                         }
                 }

     public class UpdateBucketWithUpdater<DataType> 
	 			: StateMachineUpdater.BaseUpdateBucket  
                    {
                public       HandleVector<System.Int32>.Handle Add (DataType data, System.Single last_update_time, UpdateBucketWithUpdater<DataType>.IUpdater updater)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Remove (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Update (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UpdateBucketWithUpdater (System.String name) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  UpdateBucketWithUpdater<DataType>.BatchUpdateDelegate batch_update_delegate;
                     public struct Entry 
	         {
                            public  DataType data;
                                    public  System.Single lastUpdateTime;
                                    public  UpdateBucketWithUpdater<DataType>.IUpdater updater;
                }
     public interface IUpdater 
	         {
                       void Update (DataType smi, System.Single dt)  
                    ;
            }
    public delegate void BatchUpdateDelegate ();
    }

     public class BucketUpdater<DataType> 
	 			: UpdateBucketWithUpdater<DataType>.IUpdater  
                    {
                public   virtual    void Update (DataType data, System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BucketUpdater (System.Action<DataType, System.Single> callback)  {
                throw new System.NotImplementedException();
            }
        }

     public class StateMachineUpdater 
	 			: Singleton<StateMachineUpdater>  
                    {
                public       void AdvanceOneSimSubTick ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Render (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RenderEveryTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetFrameCount (UpdateRate update_rate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddBucket (UpdateRate update_rate, StateMachineUpdater.BaseUpdateBucket bucket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetFrameTime (UpdateRate update_rate, System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StateMachineUpdater ()  {
                throw new System.NotImplementedException();
            }
             public class BucketGroup 
	         {
                public       void AdvanceOneSubTick (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Advance (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddBucket (StateMachineUpdater.BaseUpdateBucket bucket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetFrameTime (System.Int32 frame)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BucketGroup (System.Int32 frame_count, System.Single seconds_per_sub_tick, UpdateRate update_rate)  {
                throw new System.NotImplementedException();
            }
         public  System.Single secondsPerSubTick
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UpdateRate updateRate
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 subTickCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Single accumulatedTime;
                }
     public abstract class BaseUpdateBucket 
	         {
                public   virtual    void Update (System.Single dt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Remove (HandleVector<System.Int32>.Handle handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BaseUpdateBucket (System.String name)  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32 frame;
                }
}

     public abstract class StringFormatter 
	         {
                public static      System.String Replace (System.String format, System.String token, System.String replacement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String Combine (System.String a, System.String b, System.String c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String Combine (System.String a, System.String b, System.String c, System.String d)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String Combine (System.String a, System.String b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ToUpper (System.String a)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static StringFormatter ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct StringKey 
	         {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StringKey (System.String str)  {
                throw new System.NotImplementedException();
            }
                            public  System.String String;
                                    public  System.Int32 Hash;
                }

     public class StringEntry 
	         {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StringEntry (System.String str)  {
                throw new System.NotImplementedException();
            }
                            public  System.String String;
                }

     public class StringTable 
	         {
                public       StringEntry Get (StringKey key0)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.Int32 idx, System.String[] value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Print (System.String parent_path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StringTable ()  {
                throw new System.NotImplementedException();
            }
        }

     public abstract class Strings 
	         {
                public static      StringEntry Get (StringKey key0)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      StringEntry Get (System.String key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TryGet (StringKey key, out StringEntry result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TryGet (System.String key, out StringEntry result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Add (System.String[] value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PrintTable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Strings ()  {
                throw new System.NotImplementedException();
            }
        }

     public struct Tag 
	 			: UnityEngine.ISerializationCallbackReceiver,System.IEquatable<Tag>,System.IComparable<Tag>  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetHash ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Tag other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnBeforeSerialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnAfterDeserialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Tag other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ArrayToString (Tag[] tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Tag (System.Int32 hash)  {
                throw new System.NotImplementedException();
            }
                     public Tag (Tag orig)  {
                throw new System.NotImplementedException();
            }
                     public Tag (System.String name)  {
                throw new System.NotImplementedException();
            }
                     static Tag ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsValid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static Tag Invalid;
                }

     public abstract class TagExtensions 
	         {
                public static      Tag ToTag (System.String str)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Tag[] ToTagArray (System.String[] strArray)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Tag> ToTagList (System.String[] strArray)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Tag> ToTagList (System.Collections.Generic.List<System.String> strList)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class TagDescriptions 
	         {
                public static      System.String GetDescription (System.String tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetDescription (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ReplaceTags (System.String text)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagDescriptions (System.String csv_data)  {
                throw new System.NotImplementedException();
            }
        }

     public struct TagBits 
	         {
                public       System.Collections.Generic.List<Tag> GetTagsVerySlow ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearAll ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAll (TagBits tag_bits)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasAny (TagBits tag_bits)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean AreEqual (TagBits tag_bits)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void And (TagBits rhs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Or (TagBits rhs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Xor (TagBits rhs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Complement ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      TagBits MakeComplement (TagBits rhs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagBits (TagBits other)  {
                throw new System.NotImplementedException();
            }
                     public TagBits (Tag tag)  {
                throw new System.NotImplementedException();
            }
                     public TagBits (Tag[] tags)  {
                throw new System.NotImplementedException();
            }
                     static TagBits ()  {
                throw new System.NotImplementedException();
            }
                            public static TagBits None;
                }

     public class TagManager 
	         {
                public static      Tag Create (System.String tag_string)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Tag Create (System.String tag_string, System.String proper_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Tag[] Create (System.Collections.Generic.IList<System.String> strings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void FillMissingProperNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetProperName (Tag tag, System.Boolean stripLink)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String StripLinkFormatting (System.String text)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagManager ()  {
                throw new System.NotImplementedException();
            }
                     static TagManager ()  {
                throw new System.NotImplementedException();
            }
                            public static Tag Invalid;
                }

     public class TagSet 
	 			: System.Collections.Generic.ICollection<Tag>,System.Collections.Generic.IEnumerable<Tag>,System.Collections.IEnumerable,System.Collections.ICollection  
                    {
                public   virtual    void Add (Tag item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Union (TagSet others)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Contains (Tag item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ContainsAll (TagSet others)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ContainsOne (TagSet others)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CopyTo (Tag[] array, System.Int32 arrayIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Remove (Tag item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (TagSet other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerator<Tag> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetTagDescription ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CopyTo (System.Array array, System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagSet ()  {
                throw new System.NotImplementedException();
            }
                     public TagSet (TagSet other)  {
                throw new System.NotImplementedException();
            }
                     public TagSet (Tag[] other)  {
                throw new System.NotImplementedException();
            }
                     public TagSet (System.Collections.Generic.IEnumerable<System.String> others)  {
                throw new System.NotImplementedException();
            }
                     public TagSet (TagSet[] others)  {
                throw new System.NotImplementedException();
            }
                     public TagSet (System.String[] others)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsReadOnly
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsSynchronized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Object SyncRoot
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

     public class Timer 
	         {
                public       void Start ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Stop ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetElapsed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean TryStop (System.Single elapsed_time)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Timer ()  {
                throw new System.NotImplementedException();
            }
        }

     public class Traces 
	 			: KMonoBehaviour,IStateMachineTarget,ISaveLoadable,IUniformGridObject  
                    {
                public static      void DestroyInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnPrefabInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void OnCleanUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void TraceDestroy (UnityEngine.GameObject go, System.Diagnostics.StackTrace stack_trace)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Traces ()  {
                throw new System.NotImplementedException();
            }
         public  Traces Instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Collections.Generic.List<Traces.Entry> DestroyTraces;
                     public class Entry 
	         {
                     public Entry ()  {
                throw new System.NotImplementedException();
            }
                            public  System.String Name;
                                    public  System.Diagnostics.StackTrace StackTrace;
                                    public  System.Boolean Foldout;
                }
}

     public abstract class TracesExtesions 
	         {
                public static      void DeleteObject (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeleteObject (UnityEngine.Component cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public abstract class TransformExtensions 
	         {
                public static      UnityEngine.Vector3 GetPosition (UnityEngine.Transform transform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 SetPosition (UnityEngine.Transform transform, UnityEngine.Vector3 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 GetLocalPosition (UnityEngine.Transform transform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 SetLocalPosition (UnityEngine.Transform transform, UnityEngine.Vector3 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class TuningData<TuningType> 
	         {
                public static      TuningType Get ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TuningData ()  {
                throw new System.NotImplementedException();
            }
                            public static TuningType _TuningData;
                }

     public class TuningSystem 
	         {
                public static      void Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.Dictionary<System.Type, System.Object> GetAllTuningValues ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static TuningSystem ()  {
                throw new System.NotImplementedException();
            }
                     public TuningSystem ()  {
                throw new System.NotImplementedException();
            }
        }

     public class Tuple<T, U> 
	 			: System.IEquatable<Tuple<T, U>>  
                    {
                public   virtual    System.Boolean Equals (Tuple<T, U> other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Tuple (T a, U b)  {
                throw new System.NotImplementedException();
            }
                            public  T first;
                                    public  U second;
                }

     public class Tuple<T, U, V> 
	 			: System.IEquatable<Tuple<T, U, V>>  
                    {
                public   virtual    System.Boolean Equals (Tuple<T, U, V> other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Tuple (T a, U b, V c)  {
                throw new System.NotImplementedException();
            }
                            public  T first;
                                    public  U second;
                                    public  V third;
                }

     public abstract class UIUtil 
	         {
                public static      System.Single worldHeight (UnityEngine.RectTransform rt)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static UIUtil ()  {
                throw new System.NotImplementedException();
            }
                            public static UnityEngine.Vector3[] corners;
                }

     public interface IUniformGridObject 
	         {
                       UnityEngine.Vector2 PosMin ()  
                    ;
                           UnityEngine.Vector2 PosMax ()  
                    ;
            }

     public class UniformGrid<T> 
	         {
                public       void Reset (System.Int32 width, System.Int32 height, System.Int32 cellWidth, System.Int32 cellHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.IEnumerable GetAllIntersecting (IUniformGridObject item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.IEnumerable GetAllIntersecting (UnityEngine.Vector2 pos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.IEnumerable GetAllIntersecting (UnityEngine.Vector2 min, UnityEngine.Vector2 max)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetAllIntersecting (UnityEngine.Vector2 min, UnityEngine.Vector2 max, System.Collections.Generic.ICollection<T> results)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.ICollection<T> GetAllItems ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UniformGrid ()  {
                throw new System.NotImplementedException();
            }
                     public UniformGrid (System.Int32 width, System.Int32 height, System.Int32 cellWidth, System.Int32 cellHeight)  {
                throw new System.NotImplementedException();
            }
        }

     public enum  Units {
                Flat,
                        PerDay,
                        PerSecond,
                        Kelvin,
                }
    
     public abstract class UnitsUtil 
	         {
                public static      System.Boolean IsTimeUnit (Units unit)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetUnitSuffix (Units unit)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class UpdateManager 
	         {
                     public UpdateManager ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Single MaxDt;
                                    public static System.Int32 SimTicksPerSecond;
                                    public static System.Single SecondsPerSimTick;
                                    public static System.Int32 SubTicksPerSimTick;
                                    public static System.Single SecondsPerSubTick;
                }

     public abstract class Util 
	         {
                public static      void Swap<T> (T a, T b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void InitializeComponent (UnityEngine.Component cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SpawnComponent (UnityEngine.Component cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component FindComponent (UnityEngine.Component cmp, System.String targetName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component FindComponent (UnityEngine.GameObject go, System.String targetName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindComponent<T> (UnityEngine.Component c) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindComponent<T> (UnityEngine.GameObject go) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindOrAddUnityComponent<T> (UnityEngine.Component cmp) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindOrAddUnityComponent<T> (UnityEngine.GameObject go) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component RequireComponent (UnityEngine.Component cmp, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Component RequireComponent (UnityEngine.GameObject go, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T RequireComponent<T> (UnityEngine.Component cmp) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T RequireComponent<T> (UnityEngine.GameObject gameObject) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLayerRecursively (UnityEngine.GameObject go, System.Int32 layer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLayer (UnityEngine.Transform t, System.Int32 layer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void KDestroyGameObject (UnityEngine.Component original)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void KDestroyGameObject (UnityEngine.GameObject original)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindOrAddComponent<T> (UnityEngine.Component cmp) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T FindOrAddComponent<T> (UnityEngine.GameObject go) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PreInit (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject KInstantiate (UnityEngine.GameObject original, UnityEngine.Vector3 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject KInstantiate (UnityEngine.Component original, UnityEngine.GameObject parent, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject KInstantiate (UnityEngine.GameObject original, UnityEngine.GameObject parent, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject KInstantiate (UnityEngine.GameObject original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.GameObject parent, System.String name, System.Boolean initialize_id, System.Int32 gameLayer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T KInstantiateUI<T> (UnityEngine.GameObject original, UnityEngine.GameObject parent, System.Boolean force_active) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject KInstantiateUI (UnityEngine.GameObject original, UnityEngine.GameObject parent, System.Boolean force_active)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.GameObject NewGameObject (UnityEngine.GameObject parent, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T UpdateComponentRequirement<T> (UnityEngine.GameObject go, System.Boolean required) where T : UnityEngine.Component
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String FormatTwoDecimalPlace (System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String FormatOneDecimalPlace (System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String FormatWholeNumber (System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsInputCharacterValid (System.Char _char, System.Boolean isPath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ScrubInputField (TMPro.TMP_InputField inputField, System.Boolean isPath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String StripTextFormatting (System.String original)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Reset (UnityEngine.Transform transform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GaussianRandom (System.Single mu, System.Single sigma)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Shuffle<T> (System.Collections.Generic.IList<T> list)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Bounds GetBounds (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsOnLeftSideOfScreen (UnityEngine.Vector3 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Write (System.IO.BinaryWriter writer, UnityEngine.Vector2 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Write (System.IO.BinaryWriter writer, UnityEngine.Vector3 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 ReadVector2 (System.IO.BinaryReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 ReadVector3 (System.IO.BinaryReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Write (System.IO.BinaryWriter writer, UnityEngine.Quaternion q)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Quaternion ReadQuaternion (System.IO.BinaryReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Color ColorFromHex (System.String hex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ToHexString (UnityEngine.Color c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Signal (System.Action action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Signal<T> (System.Action<T> action, T parameter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.RectTransform rectTransform (UnityEngine.GameObject go)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.RectTransform rectTransform (UnityEngine.Component cmp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T[] Append<T> (T[] array, T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetKleiRootPath ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetTitleFolderName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetRetiredColoniesFolderName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String RootFolder ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String LogFilePath ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String LogsFolder ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String CacheFolder ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Transform FindTransformRecursive (UnityEngine.Transform node, System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 ReadVector3 (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Quaternion ReadQuaternion (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetRandom<T> (T[] tArray)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetRandom<T> (System.Collections.Generic.List<T> tList)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single RandomVariance (System.Single center, System.Single plusminus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsNullOrWhiteSpace (System.String str)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ApplyInvariantCultureToThread (System.Threading.Thread thread)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsNullOrDestroyed (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Util ()  {
                throw new System.NotImplementedException();
            }
        }

     public enum  UtilHashes {
                QueueDestroyObject,
                        ObjectDestroyed,
                        TargetLost,
                        EffectAdded,
                        TagsChanged,
                        EffectRemoved,
                }
    
     public class ValueArray<T> 
	         {
                public       void Add (T value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Resize (System.Int32 new_size)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEqual (ValueArray<T> array)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CopyFrom (ValueArray<T> array)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ValueArray (System.Int32 reserve_size)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 Count;
                                    public  T[] Values;
                }

     public struct Vector2I 
	 			: System.IComparable<Vector2I>,System.IEquatable<Vector2I>  
                    {
                public static      Vector2I Min (Vector2I v, Vector2I w)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Vector2I Max (Vector2I v, Vector2I w)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Vector2I v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Vector2I other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Vector2I (System.Int32 a, System.Int32 b)  {
                throw new System.NotImplementedException();
            }
                     static Vector2I ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 X
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 magnitudeSqr
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Int32 x;
                                    public  System.Int32 y;
                                    public static Vector2I zero;
                                    public static Vector2I one;
                                    public static Vector2I minusone;
                }

     public struct Vector2f 
	         {
                public       System.Boolean Equals (UnityEngine.Vector2 v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Vector2f (System.Int32 a, System.Int32 b)  {
                throw new System.NotImplementedException();
            }
                     public Vector2f (System.Single a, System.Single b)  {
                throw new System.NotImplementedException();
            }
                     public Vector2f (UnityEngine.Vector2 src)  {
                throw new System.NotImplementedException();
            }
         public  System.Single X
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single Y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Single x;
                                    public  System.Single y;
                }

     public struct Vector3I 
	         {
                public      override System.Boolean Equals (System.Object o)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Vector3I (System.Int32 a, System.Int32 b, System.Int32 c)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 x;
                                    public  System.Int32 y;
                                    public  System.Int32 z;
                }

     public struct Vector3F 
	         {
                public      override System.Boolean Equals (System.Object o)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single Dot (Vector3F v1, Vector3F v2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Vector3F (System.Single _x, System.Single _y, System.Single _z)  {
                throw new System.NotImplementedException();
            }
                            public  System.Single x;
                                    public  System.Single y;
                                    public  System.Single z;
                }

     public abstract class VectorUtil 
	         {
                public static      System.Boolean Less (UnityEngine.Vector2 v, UnityEngine.Vector2 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LessEqual (UnityEngine.Vector2 v, UnityEngine.Vector2 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Less (UnityEngine.Vector3 v, UnityEngine.Vector3 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LessEqual (UnityEngine.Vector3 v, UnityEngine.Vector3 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class Chunk 
	         {
                     public Chunk ()  {
                throw new System.NotImplementedException();
            }
                     public Chunk (System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)  {
                throw new System.NotImplementedException();
            }
                            public  Chunk.State state;
                                    public  Vector2I offset;
                                    public  Vector2I size;
                                    public  System.Single[] data;
                                    public  System.Single[] overrides;
                                    public  System.Single[] density;
                                    public  System.Single[] heatOffset;
                                    public  System.Single[] defaultTemp;
                     public enum  State {
                Unprocessed,
                        GeneratedNoise,
                        Processed,
                        Loaded,
                }
    }

     public class ChunkList 
	 			: System.Collections.Generic.List<Chunk>,System.Collections.Generic.IList<Chunk>,System.Collections.Generic.ICollection<Chunk>,System.Collections.Generic.IEnumerable<Chunk>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<Chunk>,System.Collections.Generic.IReadOnlyCollection<Chunk>  
                    {
                     public ChunkList (System.Int32 size)  {
                throw new System.NotImplementedException();
            }
        }

     public class ChunkIndexList 
	 			: System.Collections.Generic.List<System.Int32>,System.Collections.Generic.IList<System.Int32>,System.Collections.Generic.ICollection<System.Int32>,System.Collections.Generic.IEnumerable<System.Int32>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<System.Int32>,System.Collections.Generic.IReadOnlyCollection<System.Int32>  
                    {
                     public ChunkIndexList ()  {
                throw new System.NotImplementedException();
            }
        }

     public class Gradient<T> 
	         {
                     public Gradient (T content, System.Single bandSize)  {
                throw new System.NotImplementedException();
            }
         public  T content
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single bandSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single maxValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class ElementGradient 
	 			: Gradient<System.String>  
                    {
                public       void Mod (ProcGen.WorldTrait.ElementBandModifier mod)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ElementGradient () : base(null, default(System.Single)) {
                throw new System.NotImplementedException();
            }
                     public ElementGradient (System.String content, System.Single bandSize, ProcGen.SampleDescriber.Override overrides) : base(null, default(System.Single)) {
                throw new System.NotImplementedException();
            }
         public  ProcGen.SampleDescriber.Override overrides
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class ElementBandConfiguration 
	 			: System.Collections.Generic.List<ElementGradient>,System.Collections.Generic.IList<ElementGradient>,System.Collections.Generic.ICollection<ElementGradient>,System.Collections.Generic.IEnumerable<ElementGradient>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<ElementGradient>,System.Collections.Generic.IReadOnlyCollection<ElementGradient>  
                    {
                public       System.Collections.Generic.List<System.Single> ConvertBandSizeToMaxSize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ElementBandConfiguration ()  {
                throw new System.NotImplementedException();
            }
                     public ElementBandConfiguration (System.Int32 size)  {
                throw new System.NotImplementedException();
            }
                     public ElementBandConfiguration (System.Collections.Generic.IEnumerable<ElementGradient> collection)  {
                throw new System.NotImplementedException();
            }
        }

     public class LayerGradient 
	 			: Gradient<System.Collections.Generic.List<System.String>>  
                    {
                     public LayerGradient () : base(null, default(System.Single)) {
                throw new System.NotImplementedException();
            }
                     public LayerGradient (System.Collections.Generic.List<System.String> content, System.Single bandSize) : base(null, default(System.Single)) {
                throw new System.NotImplementedException();
            }
        }

     public class LevelLayer 
	 			: System.Collections.Generic.List<LayerGradient>,System.Collections.Generic.IList<LayerGradient>,System.Collections.Generic.ICollection<LayerGradient>,System.Collections.Generic.IEnumerable<LayerGradient>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<LayerGradient>,System.Collections.Generic.IReadOnlyCollection<LayerGradient>,IMerge<LevelLayer>  
                    {
                public       void ConvertBandSizeToMaxSize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    LevelLayer Merge (LevelLayer other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LevelLayer ()  {
                throw new System.NotImplementedException();
            }
                     public LevelLayer (System.Int32 size)  {
                throw new System.NotImplementedException();
            }
                     public LevelLayer (System.Collections.Generic.IEnumerable<LayerGradient> collection)  {
                throw new System.NotImplementedException();
            }
        }

     public class BaseLocation 
	         {
                     public BaseLocation ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 left
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 right
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 top
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 bottom
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public abstract class PointGenerator 
	         {
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetRandomPoints (Delaunay.Geo.Polygon boundingArea, System.Single density, System.Single avoidRadius, System.Collections.Generic.List<UnityEngine.Vector2> avoidPoints, PointGenerator.SampleBehaviour behaviour, System.Boolean testInsideBounds, SeededRandom rnd, System.Boolean doShuffle, System.Boolean testAvoidPoints)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetArchimedesSpiralPoints (System.Int32 pointCount, UnityEngine.Vector2 startPoint, System.Double tetha, System.Double alpha)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetFilliedRectangle (UnityEngine.Rect boundingArea, System.Single density)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetSpaceFillingRandom (UnityEngine.Rect boundingArea, System.Single density, SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetSpaceFillingSpiral (UnityEngine.Rect boundingArea, System.Single density)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetSpaceFillingSpiral (Delaunay.Geo.Polygon boundingArea, System.Single density)  
        
            {
              throw new System.NotImplementedException();
            }
            
             public enum  SampleBehaviour {
                UniformSquare,
                        UniformHex,
                        UniformScaledHex,
                        UniformSpiral,
                        UniformCircle,
                        PoissonDisk,
                        StdRand,
                }
    }

     public class SeededRandom 
	         {
                public       System.Random RandomSource ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single RandomValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Double NextDouble ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single RandomRange (System.Single rangeLow, System.Single rangeHigh)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 RandomRange (System.Int32 rangeLow, System.Int32 rangeHigh)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SeededRandom (System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 seed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

     public class UniformPoissonDiskSampler 
	         {
                public       System.Collections.Generic.List<UnityEngine.Vector2> SampleCircle (UnityEngine.Vector2 center, System.Single radius, System.Single minimumDistance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> SampleCircle (UnityEngine.Vector2 center, System.Single radius, System.Single minimumDistance, System.Int32 pointsPerIteration)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> SampleRectangle (UnityEngine.Vector2 topLeft, UnityEngine.Vector2 lowerRight, System.Single minimumDistance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> SampleRectangle (UnityEngine.Vector2 topLeft, UnityEngine.Vector2 lowerRight, System.Single minimumDistance, System.Int32 pointsPerIteration)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UniformPoissonDiskSampler (SeededRandom seed)  {
                throw new System.NotImplementedException();
            }
                     static UniformPoissonDiskSampler ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 DefaultPointsPerIteration;
                }

     public abstract class MathHelper 
	         {
                            public static System.Single Pi;
                                    public static System.Single HalfPi;
                                    public static System.Single TwoPi;
                }

     public interface IMerge<T> 
	         {
                       T Merge (T other)  
                    ;
            }

     public abstract class WorldGenUtil 
	         {
                public static      void ShuffleSeeded<T> (System.Collections.Generic.IList<T> list, System.Random rng)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

     public class NodeCanvasSceneSave 
	 			: UnityEngine.MonoBehaviour  
                    {
                     public NodeCanvasSceneSave ()  {
                throw new System.NotImplementedException();
            }
                            public  NodeEditorFramework.NodeCanvas savedNodeCanvas;
                }

     public class FPSCounter 
	         {
                public static      void Create ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FPSCounter ()  {
                throw new System.NotImplementedException();
            }
                     static FPSCounter ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Single FPSMeasurePeriod;
                                    public static System.Int32 currentFPS;
                }

     public class FloatHOTQueue<TValue> 
	         {
                public       System.Collections.Generic.KeyValuePair<System.Single, TValue> Dequeue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Enqueue (System.Single priority, TValue value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.KeyValuePair<System.Single, TValue> Peek ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FloatHOTQueue ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

         namespace  UnityStandardAssets.ImageEffects {
              public class ColorCorrectionLookup 
	 			: UnityStandardAssets.ImageEffects.PostEffectsBase  
                    {
                public      override System.Boolean CheckResources ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIdentityLut ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIdentityLut2 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ValidDimensions (UnityEngine.Texture2D tex2d)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Convert (UnityEngine.Texture2D temp2DTex, System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Convert2 (UnityEngine.Texture2D temp2DTex, System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ColorCorrectionLookup ()  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Shader shader;
                                    public  UnityEngine.Texture3D converted3DLut;
                                    public  UnityEngine.Texture3D converted3DLut2;
                                    public  System.String basedOnTempTex;
                }

            }
                 namespace  UnityStandardAssets.ImageEffects {
              public class PostEffectsBase 
	 			: UnityEngine.MonoBehaviour  
                    {
                protected       UnityEngine.Material CheckShaderAndCreateMaterial (UnityEngine.Shader s, UnityEngine.Material m2Create)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       UnityEngine.Material CreateMaterial (UnityEngine.Shader s, UnityEngine.Material m2Create)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean CheckSupport ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean CheckResources ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void Start ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean CheckSupport (System.Boolean needDepth)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean CheckSupport (System.Boolean needDepth, System.Boolean needHdr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Dx11Support ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void ReportAutoDisable ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void NotSupported ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void DrawBorder (UnityEngine.RenderTexture dest, UnityEngine.Material material)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PostEffectsBase ()  {
                throw new System.NotImplementedException();
            }
                            protected  System.Boolean supportHDRTextures;
                                    protected  System.Boolean supportDX11;
                                    protected  System.Boolean isSupported;
                }

            }
                 namespace  Delaunay {
              public class Node 
	         {
                     public Node ()  {
                throw new System.NotImplementedException();
            }
                     static Node ()  {
                throw new System.NotImplementedException();
            }
                            public  Delaunay.Node parent;
                                    public  System.Int32 treeSize;
                                    public static System.Collections.Generic.Stack<Delaunay.Node> pool;
                }

            }
                 namespace  Delaunay {
              public enum  KruskalType {
                MINIMUM,
                        MAXIMUM,
                }
    
            }
                 namespace  Delaunay {
              public abstract class DelaunayHelpers 
	         {
                public static      System.Collections.Generic.List<Delaunay.Geo.LineSegment> VisibleLineSegments (System.Collections.Generic.List<Delaunay.Edge> edges)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Delaunay.DelaunayHelpers.LineSegmentWithSites> VisibleLineSegmentsWithSite (System.Collections.Generic.List<Delaunay.Edge> edges)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Delaunay.Edge> SelectEdgesForSitePoint (UnityEngine.Vector2 coord, System.Collections.Generic.List<Delaunay.Edge> edgesToTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Delaunay.Edge> SelectNonIntersectingEdges (System.Collections.Generic.List<Delaunay.Edge> edgesToTest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Delaunay.Geo.LineSegment> DelaunayLinesForEdges (System.Collections.Generic.List<Delaunay.Edge> edges)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Delaunay.Geo.LineSegment> Kruskal (System.Collections.Generic.List<Delaunay.Geo.LineSegment> lineSegments, Delaunay.KruskalType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
             public class LineSegmentWithSites 
	 			: Delaunay.Geo.LineSegment  
                    {
                     public LineSegmentWithSites (System.Nullable<UnityEngine.Vector2> p0, System.Nullable<UnityEngine.Vector2> p1, System.UInt32 id0, System.UInt32 id1) : base(default(System.Nullable<UnityEngine.Vector2>), default(System.Nullable<UnityEngine.Vector2>)) {
                throw new System.NotImplementedException();
            }
         public  System.UInt32 id0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 id1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  Delaunay {
              public sealed class Edge 
	         {
                public static      Delaunay.Edge CreateBisectingEdge (Delaunay.Site site0, Delaunay.Site site1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.LineSegment DelaunayLine ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.LineSegment VoronoiEdge ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Vertex Vertex (Delaunay.LR.Side leftRight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetVertex (Delaunay.LR.Side leftRight, Delaunay.Vertex v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsPartOfConvexHull ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single SitesDistance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 CompareSitesDistances_MAX (Delaunay.Edge edge0, Delaunay.Edge edge1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 CompareSitesDistances (Delaunay.Edge edge0, Delaunay.Edge edge1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Site Site (Delaunay.LR.Side leftRight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClipVertices (UnityEngine.Rect bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClipVertices (Delaunay.Geo.Polygon bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     Edge ()  {
                throw new System.NotImplementedException();
            }
                     static Edge ()  {
                throw new System.NotImplementedException();
            }
         public  Delaunay.Vertex leftVertex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Delaunay.Vertex rightVertex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.Dictionary<Delaunay.LR.Side, System.Nullable<UnityEngine.Vector2>> clippedEnds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean visible
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Delaunay.Site leftSite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Delaunay.Site rightSite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Single a;
                                    public  System.Single b;
                                    public  System.Single c;
                                    public static Delaunay.Edge DELETED;
                }

            }
                 namespace  Delaunay {
              public enum  VertexOrSite {
                VERTEX,
                        SITE,
                }
    
            }
                 namespace  Delaunay {
              public sealed class Halfedge 
	 			: Delaunay.Utils.IDisposable  
                    {
                public static      Delaunay.Halfedge Create (Delaunay.Edge edge, System.Nullable<Delaunay.LR.Side> lr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Delaunay.Halfedge CreateDummy ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ReallyDispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Halfedge (Delaunay.Edge edge, System.Nullable<Delaunay.LR.Side> lr)  {
                throw new System.NotImplementedException();
            }
                     static Halfedge ()  {
                throw new System.NotImplementedException();
            }
                            public  Delaunay.Halfedge edgeListLeftNeighbor;
                                    public  Delaunay.Halfedge edgeListRightNeighbor;
                                    public  Delaunay.Halfedge nextInPriorityQueue;
                                    public  Delaunay.Edge edge;
                                    public  System.Nullable<Delaunay.LR.Side> leftRight;
                                    public  Delaunay.Vertex vertex;
                                    public  System.Single ystar;
                }

            }
                 namespace  Delaunay {
              public interface ICoord 
	         {
           UnityEngine.Vector2 Coord
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Delaunay {
              public sealed class Site 
	 			: Delaunay.ICoord,System.IComparable  
                    {
                public       System.Single Dist (Delaunay.ICoord p)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Delaunay.Site Create (UnityEngine.Vector2 p, System.UInt32 index, System.Single weight, System.UInt32 color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddEdge (Delaunay.Edge edge)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 GetClosestPt (UnityEngine.Vector2 p)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Edge NearestEdge ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Site> NeighborSites ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     Site (UnityEngine.Vector2 p, System.UInt32 index, System.Single weight, System.UInt32 color)  {
                throw new System.NotImplementedException();
            }
                     static Site ()  {
                throw new System.NotImplementedException();
            }
         public  System.UInt32 color
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single x
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector2 Coord
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Single scaled_weight;
                }

            }
                 namespace  Delaunay {
              public sealed class SiteList 
	 			: Delaunay.Utils.IDisposable  
                    {
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Add (Delaunay.Site site)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Site Next ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.UInt32> SiteColors ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> SiteCoords ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ScaleWeight (System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.Circle> Circles ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Vector2>> Regions (UnityEngine.Rect plotBounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Vector2>> Regions (Delaunay.Geo.Polygon plotBounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SiteList ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Delaunay {
              public sealed class Triangle 
	 			: Delaunay.Utils.IDisposable  
                    {
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Triangle (Delaunay.Site a, Delaunay.Site b, Delaunay.Site c)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<Delaunay.Site> sites
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Delaunay {
              public sealed class Vertex 
	 			: Delaunay.ICoord  
                    {
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIndex ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Delaunay.Vertex Intersect (Delaunay.Halfedge halfedge0, Delaunay.Halfedge halfedge1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Vertex (System.Single x, System.Single y)  {
                throw new System.NotImplementedException();
            }
                     static Vertex ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 Coord
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 vertexIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single x
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static Delaunay.Vertex VERTEX_AT_INFINITY;
                }

            }
                 namespace  Delaunay {
              public sealed class Voronoi 
	 			: Delaunay.Utils.IDisposable  
                    {
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Site GetSiteByLocation (UnityEngine.Vector2 p)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Edge> Edges ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> Region (UnityEngine.Vector2 p)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> NeighborSitesForSite (UnityEngine.Vector2 coord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public       System.Collections.Generic.List<System.UInt32> ListNeighborSitesIDsForSite (UnityEngine.Vector2 coord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.Circle> Circles ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> VoronoiBoundaryForSite (UnityEngine.Vector2 coord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> DelaunayLinesForSite (UnityEngine.Vector2 coord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> VoronoiDiagram ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> DelaunayTriangulation ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> Hull ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> HullPointsInOrder ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<Delaunay.Geo.LineSegment> SpanningTree (Delaunay.KruskalType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Vector2>> Regions ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.UInt32> SiteColors ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> SiteCoords ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 CompareByYThenX (Delaunay.Site s1, Delaunay.Site s2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 CompareByYThenX (Delaunay.Site s1, UnityEngine.Vector2 s2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Voronoi (System.Collections.Generic.List<UnityEngine.Vector2> points, System.Collections.Generic.List<System.UInt32> colors, System.Collections.Generic.List<System.Single> weights, UnityEngine.Rect plotBounds)  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Rect plotBounds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Delaunay.Utils {
              public interface IDisposable 
	         {
                       void Dispose ()  
                    ;
            }

            }
                 namespace  Delaunay.Geo {
              public sealed class Circle 
	         {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Circle (System.Single centerX, System.Single centerY, System.Single radius)  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Vector2 center;
                                    public  System.Single radius;
                }

            }
                 namespace  Delaunay.Geo {
              public class LineSegment 
	         {
                public static      System.Int32 CompareLengths_MAX (Delaunay.Geo.LineSegment segment0, Delaunay.Geo.LineSegment segment1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 CompareLengths (Delaunay.Geo.LineSegment edge0, Delaunay.Geo.LineSegment edge1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Nullable<UnityEngine.Vector2> Center ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 Direction ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean DoesIntersect (Delaunay.Geo.LineSegment other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DoesIntersect (Delaunay.Geo.LineSegment a, Delaunay.Geo.LineSegment b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Delaunay.Geo.LineSegment Intersection (Delaunay.Geo.LineSegment a, Delaunay.Geo.LineSegment b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2[] Intersection (UnityEngine.Vector2 a1, UnityEngine.Vector2 a2, UnityEngine.Vector2 b1, UnityEngine.Vector2 b2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LineSegment (System.Nullable<UnityEngine.Vector2> p0, System.Nullable<UnityEngine.Vector2> p1)  {
                throw new System.NotImplementedException();
            }
                            public  System.Nullable<UnityEngine.Vector2> p0;
                                    public  System.Nullable<UnityEngine.Vector2> p1;
                }

            }
                 namespace  Delaunay.Geo {
              public sealed class Polygon 
	         {
                public       void Add (UnityEngine.Vector2 newVert)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RefreshBounds ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single Area ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.Winding Winding ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ForceWinding (Delaunay.Geo.Winding wind)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 Centroid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean PointInPolygon (Vector2I point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (UnityEngine.Vector2 point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean PointInPolygon (UnityEngine.Vector2 point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.LineSegment GetEdge (System.Int32 edgeIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.Polygon.Commonality SharesEdgeClosest (Delaunay.Geo.Polygon other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DebugLog (System.String message)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.Polygon.Commonality SharesEdge (Delaunay.Geo.Polygon other, System.Int32 edgeIdx, out Delaunay.Geo.LineSegment overlapSegment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single DistanceToClosestEdge (System.Nullable<UnityEngine.Vector2> point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       MathUtil.Pair<UnityEngine.Vector2, UnityEngine.Vector2> GetClosestEdge (UnityEngine.Vector2 point, System.Single timeOnEdge)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<MathUtil.Pair<System.Single, System.Single>, MathUtil.Pair<UnityEngine.Vector2, UnityEngine.Vector2>>> GetEdgesWithinDistance (UnityEngine.Vector2 point, System.Single distance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsConvex ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Delaunay.Geo.Polygon Clip (Delaunay.Geo.Polygon clippingPoly, ClipperLib.ClipType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ClipSegment (Delaunay.Geo.LineSegment segment, Delaunay.Geo.LineSegment intersectingSegment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ClipSegment (Delaunay.Geo.LineSegment segment, Delaunay.Geo.LineSegment intersectingSegment, UnityEngine.Vector2 normNear, UnityEngine.Vector2 normFar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ClipSegmentSAT (Delaunay.Geo.LineSegment segment, Delaunay.Geo.LineSegment intersectingSegment, UnityEngine.Vector2 normNear, UnityEngine.Vector2 normFar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DebugDraw (UnityEngine.Color colour, UnityEngine.Vector2 offset, System.Boolean drawCentroid, System.Single duration, System.Single inset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Polygon ()  {
                throw new System.NotImplementedException();
            }
                     public Polygon (System.Collections.Generic.List<UnityEngine.Vector2> verts)  {
                throw new System.NotImplementedException();
            }
                     public Polygon (UnityEngine.Rect bounds)  {
                throw new System.NotImplementedException();
            }
                     static Polygon ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Rect bounds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Vector2> Vertices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single MinX
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single MinY
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single MaxX
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single MaxY
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static System.Boolean DoDebugSpew;
                     public enum  Commonality {
                None,
                        Point,
                        Edge,
                }
    }

            }
                 namespace  Delaunay.Geo {
              public enum  Winding {
                NONE,
                        CLOCKWISE,
                        COUNTERCLOCKWISE,
                }
    
            }
                 namespace  Delaunay.LR {
              public enum  Side {
                LEFT,
                        RIGHT,
                }
    
            }
                 namespace  Delaunay.LR {
              public class SideHelper 
	         {
                public static      Delaunay.LR.Side Other (Delaunay.LR.Side leftRight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SideHelper ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  ClipperLib {
              public struct DoublePoint 
	         {
                     public DoublePoint (System.Double x, System.Double y)  {
                throw new System.NotImplementedException();
            }
                     public DoublePoint (ClipperLib.DoublePoint dp)  {
                throw new System.NotImplementedException();
            }
                     public DoublePoint (ClipperLib.IntPoint ip)  {
                throw new System.NotImplementedException();
            }
                            public  System.Double X;
                                    public  System.Double Y;
                }

            }
                 namespace  ClipperLib {
              public class PolyTree 
	 			: ClipperLib.PolyNode  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ClipperLib.PolyNode GetFirst ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PolyTree ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Total
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  ClipperLib {
              public class PolyNode 
	         {
                public       ClipperLib.PolyNode GetNext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PolyNode ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ChildCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<ClipperLib.IntPoint> Contour
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<ClipperLib.PolyNode> Childs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  ClipperLib.PolyNode Parent
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsHole
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsOpen
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ClipperLib {
              public struct IntPoint 
	         {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public IntPoint (System.Int64 X, System.Int64 Y)  {
                throw new System.NotImplementedException();
            }
                     public IntPoint (System.Double x, System.Double y)  {
                throw new System.NotImplementedException();
            }
                     public IntPoint (ClipperLib.IntPoint pt)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int64 X;
                                    public  System.Int64 Y;
                }

            }
                 namespace  ClipperLib {
              public struct IntRect 
	         {
                     public IntRect (System.Int64 l, System.Int64 t, System.Int64 r, System.Int64 b)  {
                throw new System.NotImplementedException();
            }
                     public IntRect (ClipperLib.IntRect ir)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int64 left;
                                    public  System.Int64 top;
                                    public  System.Int64 right;
                                    public  System.Int64 bottom;
                }

            }
                 namespace  ClipperLib {
              public enum  ClipType {
                ctIntersection,
                        ctUnion,
                        ctDifference,
                        ctXor,
                }
    
            }
                 namespace  ClipperLib {
              public enum  PolyType {
                ptSubject,
                        ptClip,
                }
    
            }
                 namespace  ClipperLib {
              public enum  PolyFillType {
                pftEvenOdd,
                        pftNonZero,
                        pftPositive,
                        pftNegative,
                }
    
            }
                 namespace  ClipperLib {
              public enum  JoinType {
                jtSquare,
                        jtRound,
                        jtMiter,
                }
    
            }
                 namespace  ClipperLib {
              public enum  EndType {
                etClosedPolygon,
                        etClosedLine,
                        etOpenButt,
                        etOpenSquare,
                        etOpenRound,
                }
    
            }
                 namespace  ClipperLib {
              public class IntersectNode 
	         {
                     public IntersectNode ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  ClipperLib {
              public class MyIntersectNodeSort 
	 			: System.Collections.Generic.IComparer<ClipperLib.IntersectNode>  
                    {
                public   virtual    System.Int32 Compare (ClipperLib.IntersectNode node1, ClipperLib.IntersectNode node2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MyIntersectNodeSort ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  ClipperLib {
              public class ClipperBase 
	         {
                public       void Swap (System.Int64 val1, System.Int64 val2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Boolean SlopesEqual (ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2, ClipperLib.IntPoint pt3, System.Boolean UseFullRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Boolean SlopesEqual (ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2, ClipperLib.IntPoint pt3, ClipperLib.IntPoint pt4, System.Boolean UseFullRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean AddPath (System.Collections.Generic.List<ClipperLib.IntPoint> pg, ClipperLib.PolyType polyType, System.Boolean Closed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean AddPaths (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> ppg, ClipperLib.PolyType polyType, System.Boolean closed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void PopLocalMinima ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ClipperLib.IntRect GetBounds (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> paths)  
        
            {
              throw new System.NotImplementedException();
            }
            
         public  System.Boolean PreserveCollinear
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected static System.Double horizontal;
                                    protected static System.Int32 Skip;
                                    protected static System.Int32 Unassigned;
                                    protected static System.Double tolerance;
                                    public static System.Int64 loRange;
                                    public static System.Int64 hiRange;
                }

            }
                 namespace  ClipperLib {
              public class Clipper 
	 			: ClipperLib.ClipperBase  
                    {
                public static      System.Double Area (System.Collections.Generic.List<ClipperLib.IntPoint> poly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> SimplifyPolygon (System.Collections.Generic.List<ClipperLib.IntPoint> poly, ClipperLib.PolyFillType fillType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> SimplifyPolygons (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> polys, ClipperLib.PolyFillType fillType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<ClipperLib.IntPoint> CleanPolygon (System.Collections.Generic.List<ClipperLib.IntPoint> path, System.Double distance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> CleanPolygons (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> polys, System.Double distance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> MinkowskiSum (System.Collections.Generic.List<ClipperLib.IntPoint> pattern, System.Collections.Generic.List<ClipperLib.IntPoint> path, System.Boolean pathIsClosed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> MinkowskiSum (System.Collections.Generic.List<ClipperLib.IntPoint> pattern, System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> paths, System.Boolean pathIsClosed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> MinkowskiDiff (System.Collections.Generic.List<ClipperLib.IntPoint> poly1, System.Collections.Generic.List<ClipperLib.IntPoint> poly2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> PolyTreeToPaths (ClipperLib.PolyTree polytree)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> OpenPathsFromPolyTree (ClipperLib.PolyTree polytree)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> ClosedPathsFromPolyTree (ClipperLib.PolyTree polytree)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Execute (ClipperLib.ClipType clipType, System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> solution, ClipperLib.PolyFillType subjFillType, ClipperLib.PolyFillType clipFillType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Execute (ClipperLib.ClipType clipType, ClipperLib.PolyTree polytree, ClipperLib.PolyFillType subjFillType, ClipperLib.PolyFillType clipFillType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Execute (ClipperLib.ClipType clipType, System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> solution)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Execute (ClipperLib.ClipType clipType, ClipperLib.PolyTree polytree)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReversePaths (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> polys)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Orientation (System.Collections.Generic.List<ClipperLib.IntPoint> poly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 PointInPolygon (ClipperLib.IntPoint pt, System.Collections.Generic.List<ClipperLib.IntPoint> path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Clipper (System.Int32 InitOptions)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean ReverseSolution
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean StrictlySimple
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 ioReverseSolution;
                                    public static System.Int32 ioStrictlySimple;
                                    public static System.Int32 ioPreserveCollinear;
                }

            }
                 namespace  ClipperLib {
              public class ClipperOffset 
	         {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddPath (System.Collections.Generic.List<ClipperLib.IntPoint> path, ClipperLib.JoinType joinType, ClipperLib.EndType endType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddPaths (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> paths, ClipperLib.JoinType joinType, ClipperLib.EndType endType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Execute (System.Collections.Generic.List<System.Collections.Generic.List<ClipperLib.IntPoint>> solution, System.Double delta)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Execute (ClipperLib.PolyTree solution, System.Double delta)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ClipperOffset (System.Double miterLimit, System.Double arcTolerance)  {
                throw new System.NotImplementedException();
            }
         public  System.Double ArcTolerance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double MiterLimit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public abstract class BuilderSkeleton<TBuilder> 
	         {
                public       TBuilder WithNamingConvention (YamlDotNet.Serialization.INamingConvention namingConvention)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeResolver (YamlDotNet.Serialization.ITypeResolver typeResolver)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Method 'System.Linq.Expressions.Expression.ToString()' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public       TBuilder WithAttributeOverride (System.Type type, System.String member, System.Attribute attribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeConverter (YamlDotNet.Serialization.IYamlTypeConverter typeConverter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeConverter (YamlDotNet.Serialization.IYamlTypeConverter typeConverter, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IYamlTypeConverter>> where)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeConverter<TYamlTypeConverter> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.IYamlTypeConverter, YamlDotNet.Serialization.IYamlTypeConverter> typeConverterFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IYamlTypeConverter>> where) where TYamlTypeConverter : YamlDotNet.Serialization.IYamlTypeConverter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithoutTypeConverter<TYamlTypeConverter> () where TYamlTypeConverter : YamlDotNet.Serialization.IYamlTypeConverter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithoutTypeConverter (System.Type converterType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeInspector<TTypeInspector> (System.Func<YamlDotNet.Serialization.ITypeInspector, TTypeInspector> typeInspectorFactory) where TTypeInspector : YamlDotNet.Serialization.ITypeInspector
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeInspector<TTypeInspector> (System.Func<YamlDotNet.Serialization.ITypeInspector, TTypeInspector> typeInspectorFactory, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.ITypeInspector>> where) where TTypeInspector : YamlDotNet.Serialization.ITypeInspector
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithTypeInspector<TTypeInspector> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.ITypeInspector, YamlDotNet.Serialization.ITypeInspector, TTypeInspector> typeInspectorFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.ITypeInspector>> where) where TTypeInspector : YamlDotNet.Serialization.ITypeInspector
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithoutTypeInspector<TTypeInspector> () where TTypeInspector : YamlDotNet.Serialization.ITypeInspector
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TBuilder WithoutTypeInspector (System.Type inspectorType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> BuildTypeConverters ()  
        
            {
              throw new System.NotImplementedException();
            }
            
         public  TBuilder Self
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
             public delegate void WrapperFactory<TComponentBase, TComponent> ();
    
            }
                 namespace  YamlDotNet.Serialization {
             public delegate void WrapperFactory<TArgument, TComponentBase, TComponent> ();
    
            }
                 namespace  YamlDotNet.Serialization {
              public sealed class Deserializer 
	         {
                public       void RegisterTagMapping (System.String tag, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RegisterTypeConverter (YamlDotNet.Serialization.IYamlTypeConverter typeConverter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      YamlDotNet.Serialization.Deserializer FromValueDeserializer (YamlDotNet.Serialization.IValueDeserializer valueDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Deserialize<T> (System.String input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Deserialize<T> (System.IO.TextReader input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object Deserialize (System.IO.TextReader input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object Deserialize (System.String input, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object Deserialize (System.IO.TextReader input, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Deserialize<T> (YamlDotNet.Core.IParser parser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object Deserialize (YamlDotNet.Core.IParser parser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object Deserialize (YamlDotNet.Core.IParser parser, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Deserializer (YamlDotNet.Serialization.IObjectFactory objectFactory, YamlDotNet.Serialization.INamingConvention namingConvention, System.Boolean ignoreUnmatched, YamlDotNet.Serialization.YamlAttributeOverrides overrides)  {
                throw new System.NotImplementedException();
            }
                     public Deserializer ()  {
                throw new System.NotImplementedException();
            }
                     Deserializer (YamlDotNet.Serialization.IValueDeserializer valueDeserializer)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IList<YamlDotNet.Serialization.INodeDeserializer> NodeDeserializers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.IList<YamlDotNet.Serialization.INodeTypeResolver> TypeResolvers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class DeserializerBuilder 
	 			: YamlDotNet.Serialization.BuilderSkeleton<YamlDotNet.Serialization.DeserializerBuilder>  
                    {
                public       YamlDotNet.Serialization.DeserializerBuilder WithObjectFactory (YamlDotNet.Serialization.IObjectFactory objectFactory)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithObjectFactory (System.Func<System.Type, System.Object> objectFactory)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeDeserializer (YamlDotNet.Serialization.INodeDeserializer nodeDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeDeserializer (YamlDotNet.Serialization.INodeDeserializer nodeDeserializer, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.INodeDeserializer>> where)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeDeserializer<TNodeDeserializer> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.INodeDeserializer, TNodeDeserializer> nodeDeserializerFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.INodeDeserializer>> where) where TNodeDeserializer : YamlDotNet.Serialization.INodeDeserializer
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithoutNodeDeserializer<TNodeDeserializer> () where TNodeDeserializer : YamlDotNet.Serialization.INodeDeserializer
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithoutNodeDeserializer (System.Type nodeDeserializerType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeTypeResolver (YamlDotNet.Serialization.INodeTypeResolver nodeTypeResolver)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeTypeResolver (YamlDotNet.Serialization.INodeTypeResolver nodeTypeResolver, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.INodeTypeResolver>> where)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithNodeTypeResolver<TNodeTypeResolver> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.INodeTypeResolver, TNodeTypeResolver> nodeTypeResolverFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.INodeTypeResolver>> where) where TNodeTypeResolver : YamlDotNet.Serialization.INodeTypeResolver
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithoutNodeTypeResolver<TNodeTypeResolver> () where TNodeTypeResolver : YamlDotNet.Serialization.INodeTypeResolver
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithoutNodeTypeResolver (System.Type nodeTypeResolverType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithTagMapping (System.String tag, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder WithoutTagMapping (System.String tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.DeserializerBuilder IgnoreUnmatchedProperties (System.Action<System.String> unmatchedLogFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.Deserializer Build ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.IValueDeserializer BuildValueDeserializer ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DeserializerBuilder ()  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Serialization.DeserializerBuilder Self
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class EmissionPhaseObjectGraphVisitorArgs 
	         {
                public       T GetPreProcessingPhaseObjectGraphVisitor<T> () where T : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EmissionPhaseObjectGraphVisitorArgs (YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> innerVisitor, YamlDotNet.Serialization.IEventEmitter eventEmitter, System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>> preProcessingPhaseVisitors, System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> typeConverters, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> InnerVisitor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Serialization.IEventEmitter EventEmitter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Serialization.ObjectSerializer NestedObjectSerializer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> TypeConverters
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public abstract class EventInfo 
	         {
                     protected EventInfo (YamlDotNet.Serialization.IObjectDescriptor source)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Serialization.IObjectDescriptor Source
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public class AliasEventInfo 
	 			: YamlDotNet.Serialization.EventInfo  
                    {
                     public AliasEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.String Alias
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public class ObjectEventInfo 
	 			: YamlDotNet.Serialization.EventInfo  
                    {
                     protected ObjectEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.String Anchor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Tag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class ScalarEventInfo 
	 			: YamlDotNet.Serialization.ObjectEventInfo  
                    {
                     public ScalarEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.String RenderedValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsPlainImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsQuotedImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class MappingStartEventInfo 
	 			: YamlDotNet.Serialization.ObjectEventInfo  
                    {
                     public MappingStartEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Events.MappingStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class MappingEndEventInfo 
	 			: YamlDotNet.Serialization.EventInfo  
                    {
                     public MappingEndEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class SequenceStartEventInfo 
	 			: YamlDotNet.Serialization.ObjectEventInfo  
                    {
                     public SequenceStartEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Events.SequenceStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class SequenceEndEventInfo 
	 			: YamlDotNet.Serialization.EventInfo  
                    {
                     public SequenceEndEventInfo (YamlDotNet.Serialization.IObjectDescriptor source) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IAliasProvider 
	         {
                       System.String GetAlias (System.Object target)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IEventEmitter 
	         {
                       void Emit (YamlDotNet.Serialization.AliasEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
                           void Emit (YamlDotNet.Serialization.ScalarEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
                           void Emit (YamlDotNet.Serialization.MappingStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
                           void Emit (YamlDotNet.Serialization.MappingEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
                           void Emit (YamlDotNet.Serialization.SequenceStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
                           void Emit (YamlDotNet.Serialization.SequenceEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface INamingConvention 
	         {
                       System.String Apply (System.String value)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface INodeDeserializer 
	         {
                       System.Boolean Deserialize (YamlDotNet.Core.IParser reader, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface INodeTypeResolver 
	         {
                       System.Boolean Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IObjectDescriptor 
	         {
           System.Object Value
                   
                 {
                                                get;
                                         }
                    System.Type Type
                   
                 {
                                                get;
                                         }
                    System.Type StaticType
                   
                 {
                                                get;
                                         }
                    YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IObjectFactory 
	         {
                       System.Object Create (System.Type type)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IObjectGraphTraversalStrategy 
	         {
                       void Traverse<TContext> (YamlDotNet.Serialization.IObjectDescriptor graph, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, TContext context)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IObjectGraphVisitor<TContext> 
	         {
                       System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value, TContext context)  
                    ;
                           System.Boolean EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, TContext context)  
                    ;
                           System.Boolean EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, TContext context)  
                    ;
                           void VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar, TContext context)  
                    ;
                           void VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType, TContext context)  
                    ;
                           void VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping, TContext context)  
                    ;
                           void VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType, TContext context)  
                    ;
                           void VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence, TContext context)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IPropertyDescriptor 
	         {
                       T GetCustomAttribute<T> () where T : System.Attribute
 
                    ;
                           YamlDotNet.Serialization.IObjectDescriptor Read (System.Object target)  
                    ;
                           void Write (System.Object target, System.Object value)  
                    ;
               System.String Name
                   
                 {
                                                get;
                                         }
                    System.Boolean CanWrite
                   
                 {
                                                get;
                                         }
                    System.Type Type
                   
                 {
                                                get;
                                         }
                    System.Type TypeOverride
                   
                 {
                                                get;
                                                    set;
                                         }
                    System.Int32 Order
                   
                 {
                                                get;
                                                    set;
                                         }
                    YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get;
                                                    set;
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IRegistrationLocationSelectionSyntax<TBaseRegistrationType> 
	         {
                       void InsteadOf<TRegistrationType> () where TRegistrationType : TBaseRegistrationType
 
                    ;
                           void Before<TRegistrationType> () where TRegistrationType : TBaseRegistrationType
 
                    ;
                           void After<TRegistrationType> () where TRegistrationType : TBaseRegistrationType
 
                    ;
                           void OnTop ()  
                    ;
                           void OnBottom ()  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface ITrackingRegistrationLocationSelectionSyntax<TBaseRegistrationType> 
	         {
                       void InsteadOf<TRegistrationType> () where TRegistrationType : TBaseRegistrationType
 
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface ITypeInspector 
	         {
                       System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
                    ;
                           YamlDotNet.Serialization.IPropertyDescriptor GetProperty (System.Type type, System.Object container, System.String name, System.Boolean ignoreUnmatched)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface ITypeResolver 
	         {
                       System.Type Resolve (System.Type staticType, System.Object actualValue)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IValueDeserializer 
	         {
                       System.Object DeserializeValue (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.Utilities.SerializerState state, YamlDotNet.Serialization.IValueDeserializer nestedObjectDeserializer)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IValuePromise 
	         {
        }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IValueSerializer 
	         {
                       void SerializeValue (YamlDotNet.Core.IEmitter emitter, System.Object value, System.Type type)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IYamlConvertible 
	         {
                       void Read (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.ObjectDeserializer nestedObjectDeserializer)  
                    ;
                           void Write (YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
             public delegate void ObjectDeserializer ();
    
            }
                 namespace  YamlDotNet.Serialization {
             public delegate void ObjectSerializer ();
    
            }
                 namespace  YamlDotNet.Serialization {
              public interface IYamlSerializable 
	         {
                       void ReadYaml (YamlDotNet.Core.IParser parser)  
                    ;
                           void WriteYaml (YamlDotNet.Core.IEmitter emitter)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public interface IYamlTypeConverter 
	         {
                       System.Boolean Accepts (System.Type type)  
                    ;
                           System.Object ReadYaml (YamlDotNet.Core.IParser parser, System.Type type)  
                    ;
                           void WriteYaml (YamlDotNet.Core.IEmitter emitter, System.Object value, System.Type type)  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class Nothing 
	         {
                     Nothing ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class ObjectDescriptor 
	 			: YamlDotNet.Serialization.IObjectDescriptor  
                    {
                     public ObjectDescriptor (System.Object value, System.Type type, System.Type staticType)  {
                throw new System.NotImplementedException();
            }
                     public ObjectDescriptor (System.Object value, System.Type type, System.Type staticType, YamlDotNet.Core.ScalarStyle scalarStyle)  {
                throw new System.NotImplementedException();
            }
         public  System.Object Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Type Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Type StaticType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class PropertyDescriptor 
	 			: YamlDotNet.Serialization.IPropertyDescriptor  
                    {
                public       void Write (System.Object target, System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetCustomAttribute<T> () where T : System.Attribute
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.IObjectDescriptor Read (System.Object target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PropertyDescriptor (YamlDotNet.Serialization.IPropertyDescriptor baseDescriptor)  {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Type Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Type TypeOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Order
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean CanWrite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public enum  SerializationOptions {
                None,
                        Roundtrip,
                        DisableAliases,
                        EmitDefaults,
                        JsonCompatible,
                        DefaultToStaticType,
                }
    
            }
                 namespace  YamlDotNet.Serialization {
              public sealed class Serializer 
	         {
                public       void RegisterTypeConverter (YamlDotNet.Serialization.IYamlTypeConverter converter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      YamlDotNet.Serialization.Serializer FromValueSerializer (YamlDotNet.Serialization.IValueSerializer valueSerializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Serialize (System.IO.TextWriter writer, System.Object graph)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String Serialize (System.Object graph)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Serialize (System.IO.TextWriter writer, System.Object graph, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Serialize (YamlDotNet.Core.IEmitter emitter, System.Object graph)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Serialize (YamlDotNet.Core.IEmitter emitter, System.Object graph, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Serializer (YamlDotNet.Serialization.SerializationOptions options, YamlDotNet.Serialization.INamingConvention namingConvention, YamlDotNet.Serialization.YamlAttributeOverrides overrides)  {
                throw new System.NotImplementedException();
            }
                     public Serializer ()  {
                throw new System.NotImplementedException();
            }
                     Serializer (YamlDotNet.Serialization.IValueSerializer valueSerializer)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class SerializerBuilder 
	 			: YamlDotNet.Serialization.BuilderSkeleton<YamlDotNet.Serialization.SerializerBuilder>  
                    {
                public       YamlDotNet.Serialization.SerializerBuilder WithEventEmitter<TEventEmitter> (System.Func<YamlDotNet.Serialization.IEventEmitter, TEventEmitter> eventEmitterFactory) where TEventEmitter : YamlDotNet.Serialization.IEventEmitter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithEventEmitter<TEventEmitter> (System.Func<YamlDotNet.Serialization.IEventEmitter, TEventEmitter> eventEmitterFactory, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IEventEmitter>> where) where TEventEmitter : YamlDotNet.Serialization.IEventEmitter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithEventEmitter<TEventEmitter> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.IEventEmitter, YamlDotNet.Serialization.IEventEmitter, TEventEmitter> eventEmitterFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IEventEmitter>> where) where TEventEmitter : YamlDotNet.Serialization.IEventEmitter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutEventEmitter<TEventEmitter> () where TEventEmitter : YamlDotNet.Serialization.IEventEmitter
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutEventEmitter (System.Type eventEmitterType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithTagMapping (System.String tag, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutTagMapping (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder EnsureRoundtrip ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder DisableAliases ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder EmitDefaults ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder JsonCompatible ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor> (TObjectGraphVisitor objectGraphVisitor) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor> (TObjectGraphVisitor objectGraphVisitor, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>>> where) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>, TObjectGraphVisitor> objectGraphVisitorFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>>> where) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor> () where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutPreProcessingPhaseObjectGraphVisitor (System.Type objectGraphVisitorType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor> (System.Func<YamlDotNet.Serialization.EmissionPhaseObjectGraphVisitorArgs, TObjectGraphVisitor> objectGraphVisitorFactory) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor> (System.Func<YamlDotNet.Serialization.EmissionPhaseObjectGraphVisitorArgs, TObjectGraphVisitor> objectGraphVisitorFactory, System.Action<YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>>> where) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor> (YamlDotNet.Serialization.WrapperFactory<YamlDotNet.Serialization.EmissionPhaseObjectGraphVisitorArgs, YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>, TObjectGraphVisitor> objectGraphVisitorFactory, System.Action<YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>>> where) where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor> () where TObjectGraphVisitor : YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.SerializerBuilder WithoutEmissionPhaseObjectGraphVisitor (System.Type objectGraphVisitorType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.Serializer Build ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.IValueSerializer BuildValueSerializer ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SerializerBuilder ()  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Serialization.SerializerBuilder Self
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class StreamFragment 
	 			: YamlDotNet.Serialization.IYamlConvertible  
                    {
                       void YamlDotNet.Serialization.IYamlConvertible.Read (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.ObjectDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Write (YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StreamFragment ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IList<YamlDotNet.Core.Events.ParsingEvent> Events
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class TagMappings 
	         {
                public       void Add (System.String tag, System.Type mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagMappings ()  {
                throw new System.NotImplementedException();
            }
                     public TagMappings (System.Collections.Generic.IDictionary<System.String, System.Type> mappings)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class YamlAttributeOverrides 
	         {
                public       T GetAttribute<T> (System.Type type, System.String member) where T : System.Attribute
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.Type type, System.String member, System.Attribute attribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Method 'System.Linq.Expressions.Expression.ToString()' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public       YamlDotNet.Serialization.YamlAttributeOverrides Clone ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlAttributeOverrides ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class YamlAttributeOverridesInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlAttributeOverridesInspector (YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor, YamlDotNet.Serialization.YamlAttributeOverrides overrides)  {
                throw new System.NotImplementedException();
            }
             public sealed class OverridePropertyDescriptor 
	 			: YamlDotNet.Serialization.IPropertyDescriptor  
                    {
                public       void Write (System.Object target, System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetCustomAttribute<T> () where T : System.Attribute
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       YamlDotNet.Serialization.IObjectDescriptor Read (System.Object target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public OverridePropertyDescriptor (YamlDotNet.Serialization.IPropertyDescriptor baseDescriptor, YamlDotNet.Serialization.YamlAttributeOverrides overrides, System.Type classType)  {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean CanWrite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Type Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Type TypeOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Order
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class YamlAttributesTypeInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlAttributesTypeInspector (YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class YamlIgnoreAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public YamlIgnoreAttribute ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization {
              public sealed class YamlMemberAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public YamlMemberAttribute ()  {
                throw new System.NotImplementedException();
            }
                     public YamlMemberAttribute (System.Type serializeAs)  {
                throw new System.NotImplementedException();
            }
         public  System.Type SerializeAs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Order
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Alias
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean ApplyNamingConventions
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle ScalarStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Serialization.ValueDeserializers {
              public sealed class AliasValueDeserializer 
	 			: YamlDotNet.Serialization.IValueDeserializer  
                    {
                public       System.Object DeserializeValue (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.Utilities.SerializerState state, YamlDotNet.Serialization.IValueDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AliasValueDeserializer (YamlDotNet.Serialization.IValueDeserializer innerDeserializer)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ValueDeserializers {
              public sealed class NodeValueDeserializer 
	 			: YamlDotNet.Serialization.IValueDeserializer  
                    {
                public       System.Object DeserializeValue (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.Utilities.SerializerState state, YamlDotNet.Serialization.IValueDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeValueDeserializer (System.Collections.Generic.IList<YamlDotNet.Serialization.INodeDeserializer> deserializers, System.Collections.Generic.IList<YamlDotNet.Serialization.INodeTypeResolver> typeResolvers)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.Utilities {
              public interface IPostDeserializationCallback 
	         {
                       void OnDeserialization ()  
                    ;
            }

            }
                 namespace  YamlDotNet.Serialization.Utilities {
              public sealed class SerializerState 
	 			: System.IDisposable  
                    {
                public       T Get<T> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnDeserialization ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SerializerState ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.Utilities {
              public abstract class TypeConverter 
	         {
                public static      T ChangeType<T> (System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T ChangeType<T> (System.Object value, System.IFormatProvider provider)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T ChangeType<T> (System.Object value, System.Globalization.CultureInfo culture)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Object ChangeType (System.Object value, System.Type destinationType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Object ChangeType (System.Object value, System.Type destinationType, System.IFormatProvider provider)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Object ChangeType (System.Object value, System.Type destinationType, System.Globalization.CultureInfo culture)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  YamlDotNet.Serialization.TypeResolvers {
              public sealed class DynamicTypeResolver 
	 			: YamlDotNet.Serialization.ITypeResolver  
                    {
                public       System.Type Resolve (System.Type staticType, System.Object actualValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DynamicTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeResolvers {
              public sealed class StaticTypeResolver 
	 			: YamlDotNet.Serialization.ITypeResolver  
                    {
                public       System.Type Resolve (System.Type staticType, System.Object actualValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StaticTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeInspectors {
              public sealed class CachedTypeInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CachedTypeInspector (YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeInspectors {
              public sealed class NamingConventionTypeInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NamingConventionTypeInspector (YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor, YamlDotNet.Serialization.INamingConvention namingConvention)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeInspectors {
              public sealed class ReadableAndWritablePropertiesTypeInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ReadableAndWritablePropertiesTypeInspector (YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeInspectors {
              public sealed class ReadablePropertiesTypeInspector 
	 			: YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton,YamlDotNet.Serialization.ITypeInspector  
                    {
                public      override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ReadablePropertiesTypeInspector (YamlDotNet.Serialization.ITypeResolver typeResolver)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.TypeInspectors {
              public abstract class TypeInspectorSkeleton 
	 			: YamlDotNet.Serialization.ITypeInspector  
                    {
                public   virtual    System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties (System.Type type, System.Object container)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    YamlDotNet.Serialization.IPropertyDescriptor GetProperty (System.Type type, System.Object container, System.String name, System.Boolean ignoreUnmatched)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected TypeInspectorSkeleton ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public sealed class AnchorAssigner 
	 			: YamlDotNet.Serialization.ObjectGraphVisitors.PreProcessingPhaseObjectGraphVisitorSkeleton,YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>,YamlDotNet.Serialization.IAliasProvider  
                    {
                protected      override System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override System.Boolean EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override System.Boolean EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.String YamlDotNet.Serialization.IAliasProvider.GetAlias (System.Object target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AnchorAssigner (System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> typeConverters) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public sealed class AnchorAssigningObjectGraphVisitor 
	 			: YamlDotNet.Serialization.ObjectGraphVisitors.ChainedObjectGraphVisitor,YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>  
                    {
                public      override System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AnchorAssigningObjectGraphVisitor (YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> nextVisitor, YamlDotNet.Serialization.IEventEmitter eventEmitter, YamlDotNet.Serialization.IAliasProvider aliasProvider) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public abstract class ChainedObjectGraphVisitor 
	 			: YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>  
                    {
                public   virtual    System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected ChainedObjectGraphVisitor (YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> nextVisitor)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public sealed class CustomSerializationObjectGraphVisitor 
	 			: YamlDotNet.Serialization.ObjectGraphVisitors.ChainedObjectGraphVisitor,YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>  
                    {
                public      override System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CustomSerializationObjectGraphVisitor (YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> nextVisitor, System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> typeConverters, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public sealed class DefaultExclusiveObjectGraphVisitor 
	 			: YamlDotNet.Serialization.ObjectGraphVisitors.ChainedObjectGraphVisitor,YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>  
                    {
                public      override System.Boolean EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DefaultExclusiveObjectGraphVisitor (YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter> nextVisitor) : base(null) {
                throw new System.NotImplementedException();
            }
                     static DefaultExclusiveObjectGraphVisitor ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public sealed class EmittingObjectGraphVisitor 
	 			: YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>  
                    {
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.Enter (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence, YamlDotNet.Core.IEmitter context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EmittingObjectGraphVisitor (YamlDotNet.Serialization.IEventEmitter eventEmitter)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphVisitors {
              public abstract class PreProcessingPhaseObjectGraphVisitorSkeleton 
	 			: YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>  
                    {
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.Enter (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Boolean YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType, YamlDotNet.Serialization.Nothing context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean Enter (YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean EnterMapping (YamlDotNet.Serialization.IPropertyDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean EnterMapping (YamlDotNet.Serialization.IObjectDescriptor key, YamlDotNet.Serialization.IObjectDescriptor value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitMappingEnd (YamlDotNet.Serialization.IObjectDescriptor mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitMappingStart (YamlDotNet.Serialization.IObjectDescriptor mapping, System.Type keyType, System.Type valueType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitScalar (YamlDotNet.Serialization.IObjectDescriptor scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitSequenceEnd (YamlDotNet.Serialization.IObjectDescriptor sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitSequenceStart (YamlDotNet.Serialization.IObjectDescriptor sequence, System.Type elementType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PreProcessingPhaseObjectGraphVisitorSkeleton (System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> typeConverters)  {
                throw new System.NotImplementedException();
            }
                            protected  System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> typeConverters;
                }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphTraversalStrategies {
              public class FullObjectGraphTraversalStrategy 
	 			: YamlDotNet.Serialization.IObjectGraphTraversalStrategy  
                    {
                       void YamlDotNet.Serialization.IObjectGraphTraversalStrategy.Traverse<TContext> (YamlDotNet.Serialization.IObjectDescriptor graph, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Traverse<TContext> (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, System.Int32 currentDepth, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void TraverseObject<TContext> (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, System.Int32 currentDepth, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void TraverseDictionary<TContext> (YamlDotNet.Serialization.IObjectDescriptor dictionary, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, System.Int32 currentDepth, System.Type keyType, System.Type valueType, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void TraverseProperties<TContext> (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, System.Int32 currentDepth, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FullObjectGraphTraversalStrategy (YamlDotNet.Serialization.ITypeInspector typeDescriptor, YamlDotNet.Serialization.ITypeResolver typeResolver, System.Int32 maxRecursion, YamlDotNet.Serialization.INamingConvention namingConvention)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectGraphTraversalStrategies {
              public class RoundtripObjectGraphTraversalStrategy 
	 			: YamlDotNet.Serialization.ObjectGraphTraversalStrategies.FullObjectGraphTraversalStrategy,YamlDotNet.Serialization.IObjectGraphTraversalStrategy  
                    {
                protected      override void TraverseProperties<TContext> (YamlDotNet.Serialization.IObjectDescriptor value, YamlDotNet.Serialization.IObjectGraphVisitor<TContext> visitor, System.Int32 currentDepth, TContext context)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RoundtripObjectGraphTraversalStrategy (System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> converters, YamlDotNet.Serialization.ITypeInspector typeDescriptor, YamlDotNet.Serialization.ITypeResolver typeResolver, System.Int32 maxRecursion) : base(null, null, default(System.Int32), null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectFactories {
              public sealed class DefaultObjectFactory 
	 			: YamlDotNet.Serialization.IObjectFactory  
                    {
                public       System.Object Create (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DefaultObjectFactory ()  {
                throw new System.NotImplementedException();
            }
                     static DefaultObjectFactory ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.ObjectFactories {
              public sealed class LambdaObjectFactory 
	 			: YamlDotNet.Serialization.IObjectFactory  
                    {
                public       System.Object Create (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LambdaObjectFactory (System.Func<System.Type, System.Object> factory)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeTypeResolvers {
              public sealed class DefaultContainersNodeTypeResolver 
	 			: YamlDotNet.Serialization.INodeTypeResolver  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeTypeResolver.Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DefaultContainersNodeTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeTypeResolvers {
              public sealed class TagNodeTypeResolver 
	 			: YamlDotNet.Serialization.INodeTypeResolver  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeTypeResolver.Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagNodeTypeResolver (System.Collections.Generic.IDictionary<System.String, System.Type> tagMappings)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeTypeResolvers {
              public sealed class TypeNameInTagNodeTypeResolver 
	 			: YamlDotNet.Serialization.INodeTypeResolver  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeTypeResolver.Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TypeNameInTagNodeTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeTypeResolvers {
              public sealed class YamlConvertibleTypeResolver 
	 			: YamlDotNet.Serialization.INodeTypeResolver  
                    {
                public       System.Boolean Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlConvertibleTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeTypeResolvers {
              public sealed class YamlSerializableTypeResolver 
	 			: YamlDotNet.Serialization.INodeTypeResolver  
                    {
                public       System.Boolean Resolve (YamlDotNet.Core.Events.NodeEvent nodeEvent, System.Type currentType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlSerializableTypeResolver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class ArrayNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ArrayNodeDeserializer ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class CollectionNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CollectionNodeDeserializer (YamlDotNet.Serialization.IObjectFactory objectFactory)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class DictionaryNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DictionaryNodeDeserializer (YamlDotNet.Serialization.IObjectFactory objectFactory)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class EnumerableNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EnumerableNodeDeserializer ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class NullNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NullNodeDeserializer ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class ObjectNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ObjectNodeDeserializer (YamlDotNet.Serialization.IObjectFactory objectFactory, YamlDotNet.Serialization.ITypeInspector typeDescriptor, System.Boolean ignoreUnmatched, System.Action<System.String> unmatchedLogFn)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class ScalarNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ScalarNodeDeserializer ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class TypeConverterNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                       System.Boolean YamlDotNet.Serialization.INodeDeserializer.Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TypeConverterNodeDeserializer (System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IYamlTypeConverter> converters)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class YamlConvertibleNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                public       System.Boolean Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlConvertibleNodeDeserializer (YamlDotNet.Serialization.IObjectFactory objectFactory)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NodeDeserializers {
              public sealed class YamlSerializableNodeDeserializer 
	 			: YamlDotNet.Serialization.INodeDeserializer  
                    {
                public       System.Boolean Deserialize (YamlDotNet.Core.IParser parser, System.Type expectedType, System.Func<YamlDotNet.Core.IParser, System.Type, System.Object> nestedObjectDeserializer, out System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlSerializableNodeDeserializer (YamlDotNet.Serialization.IObjectFactory objectFactory)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NamingConventions {
              public sealed class CamelCaseNamingConvention 
	 			: YamlDotNet.Serialization.INamingConvention  
                    {
                public       System.String Apply (System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CamelCaseNamingConvention ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NamingConventions {
              public sealed class HyphenatedNamingConvention 
	 			: YamlDotNet.Serialization.INamingConvention  
                    {
                public       System.String Apply (System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HyphenatedNamingConvention ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NamingConventions {
              public sealed class NullNamingConvention 
	 			: YamlDotNet.Serialization.INamingConvention  
                    {
                public       System.String Apply (System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NullNamingConvention ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NamingConventions {
              public sealed class PascalCaseNamingConvention 
	 			: YamlDotNet.Serialization.INamingConvention  
                    {
                public       System.String Apply (System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PascalCaseNamingConvention ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.NamingConventions {
              public sealed class UnderscoredNamingConvention 
	 			: YamlDotNet.Serialization.INamingConvention  
                    {
                public       System.String Apply (System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UnderscoredNamingConvention ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.EventEmitters {
              public abstract class ChainedEventEmitter 
	 			: YamlDotNet.Serialization.IEventEmitter  
                    {
                public   virtual    void Emit (YamlDotNet.Serialization.AliasEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Emit (YamlDotNet.Serialization.ScalarEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Emit (YamlDotNet.Serialization.MappingStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Emit (YamlDotNet.Serialization.MappingEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Emit (YamlDotNet.Serialization.SequenceStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Emit (YamlDotNet.Serialization.SequenceEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected ChainedEventEmitter (YamlDotNet.Serialization.IEventEmitter nextEmitter)  {
                throw new System.NotImplementedException();
            }
                            protected  YamlDotNet.Serialization.IEventEmitter nextEmitter;
                }

            }
                 namespace  YamlDotNet.Serialization.EventEmitters {
              public sealed class JsonEventEmitter 
	 			: YamlDotNet.Serialization.EventEmitters.ChainedEventEmitter,YamlDotNet.Serialization.IEventEmitter  
                    {
                public      override void Emit (YamlDotNet.Serialization.AliasEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Emit (YamlDotNet.Serialization.ScalarEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Emit (YamlDotNet.Serialization.MappingStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Emit (YamlDotNet.Serialization.SequenceStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public JsonEventEmitter (YamlDotNet.Serialization.IEventEmitter nextEmitter) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.EventEmitters {
              public sealed class TypeAssigningEventEmitter 
	 			: YamlDotNet.Serialization.EventEmitters.ChainedEventEmitter,YamlDotNet.Serialization.IEventEmitter  
                    {
                public      override void Emit (YamlDotNet.Serialization.ScalarEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Emit (YamlDotNet.Serialization.MappingStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Emit (YamlDotNet.Serialization.SequenceStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TypeAssigningEventEmitter (YamlDotNet.Serialization.IEventEmitter nextEmitter, System.Boolean assignTypeWhenDifferent) : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.EventEmitters {
              public sealed class WriterEventEmitter 
	 			: YamlDotNet.Serialization.IEventEmitter  
                    {
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.AliasEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.ScalarEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.MappingStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.MappingEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.SequenceStartEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IEventEmitter.Emit (YamlDotNet.Serialization.SequenceEndEventInfo eventInfo, YamlDotNet.Core.IEmitter emitter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WriterEventEmitter ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.Converters {
              public class DateTimeConverter 
	 			: YamlDotNet.Serialization.IYamlTypeConverter  
                    {
                public   virtual    System.Boolean Accepts (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Object ReadYaml (YamlDotNet.Core.IParser parser, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void WriteYaml (YamlDotNet.Core.IEmitter emitter, System.Object value, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DateTimeConverter (System.DateTimeKind kind, System.IFormatProvider provider, System.String[] formats)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Serialization.Converters {
              public class GuidConverter 
	 			: YamlDotNet.Serialization.IYamlTypeConverter  
                    {
                public   virtual    System.Boolean Accepts (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Object ReadYaml (YamlDotNet.Core.IParser parser, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void WriteYaml (YamlDotNet.Core.IEmitter emitter, System.Object value, System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GuidConverter (System.Boolean jsonCompatible)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public interface IYamlVisitor 
	         {
                       void Visit (YamlDotNet.RepresentationModel.YamlStream stream)  
                    ;
                           void Visit (YamlDotNet.RepresentationModel.YamlDocument document)  
                    ;
                           void Visit (YamlDotNet.RepresentationModel.YamlScalarNode scalar)  
                    ;
                           void Visit (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
                    ;
                           void Visit (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
                    ;
            }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public class YamlDocument 
	         {
                public       void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlDocument (YamlDotNet.RepresentationModel.YamlNode rootNode)  {
                throw new System.NotImplementedException();
            }
                     public YamlDocument (System.String rootNode)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.RepresentationModel.YamlNode RootNode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode> AllNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public sealed class YamlMappingNode 
	 			: YamlDotNet.RepresentationModel.YamlNode,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<YamlDotNet.RepresentationModel.YamlNode, YamlDotNet.RepresentationModel.YamlNode>>,System.Collections.IEnumerable,YamlDotNet.Serialization.IYamlConvertible  
                    {
                public       void Add (YamlDotNet.RepresentationModel.YamlNode key, YamlDotNet.RepresentationModel.YamlNode value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.String key, YamlDotNet.RepresentationModel.YamlNode value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (YamlDotNet.RepresentationModel.YamlNode key, System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.String key, System.String value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<YamlDotNet.RepresentationModel.YamlNode, YamlDotNet.RepresentationModel.YamlNode>> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Read (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.ObjectDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Write (YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      YamlDotNet.RepresentationModel.YamlMappingNode FromObject (System.Object mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlMappingNode ()  {
                throw new System.NotImplementedException();
            }
                     public YamlMappingNode (System.Int32 dummy)  {
                throw new System.NotImplementedException();
            }
                     public YamlMappingNode (System.Collections.Generic.KeyValuePair<YamlDotNet.RepresentationModel.YamlNode, YamlDotNet.RepresentationModel.YamlNode>[] children)  {
                throw new System.NotImplementedException();
            }
                     public YamlMappingNode (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<YamlDotNet.RepresentationModel.YamlNode, YamlDotNet.RepresentationModel.YamlNode>> children)  {
                throw new System.NotImplementedException();
            }
                     public YamlMappingNode (YamlDotNet.RepresentationModel.YamlNode[] children)  {
                throw new System.NotImplementedException();
            }
                     public YamlMappingNode (System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode> children)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IDictionary<YamlDotNet.RepresentationModel.YamlNode, YamlDotNet.RepresentationModel.YamlNode> Children
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Events.MappingStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.RepresentationModel.YamlNodeType NodeType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public abstract class YamlNode 
	         {
                public   virtual    void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean Equals (YamlDotNet.RepresentationModel.YamlNode other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Boolean SafeEquals (System.Object first, System.Object second)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Int32 GetHashCode (System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Int32 CombineHashCodes (System.Int32 h1, System.Int32 h2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected YamlNode ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Anchor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Tag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Mark Start
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Mark End
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode> AllNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.RepresentationModel.YamlNodeType NodeType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public sealed class YamlNodeIdentityEqualityComparer 
	 			: System.Collections.Generic.IEqualityComparer<YamlDotNet.RepresentationModel.YamlNode>  
                    {
                public       System.Boolean Equals (YamlDotNet.RepresentationModel.YamlNode x, YamlDotNet.RepresentationModel.YamlNode y)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetHashCode (YamlDotNet.RepresentationModel.YamlNode obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlNodeIdentityEqualityComparer ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public enum  YamlNodeType {
                Alias,
                        Mapping,
                        Scalar,
                        Sequence,
                }
    
            }
                 namespace  YamlDotNet.RepresentationModel {
              public sealed class YamlScalarNode 
	 			: YamlDotNet.RepresentationModel.YamlNode,YamlDotNet.Serialization.IYamlConvertible  
                    {
                public      override void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Read (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.ObjectDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Write (YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlScalarNode ()  {
                throw new System.NotImplementedException();
            }
                     public YamlScalarNode (System.String value)  {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.ScalarStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.RepresentationModel.YamlNodeType NodeType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public sealed class YamlSequenceNode 
	 			: YamlDotNet.RepresentationModel.YamlNode,System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode>,System.Collections.IEnumerable,YamlDotNet.Serialization.IYamlConvertible  
                    {
                public       void Add (YamlDotNet.RepresentationModel.YamlNode child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.String child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlNode> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Read (YamlDotNet.Core.IParser parser, System.Type expectedType, YamlDotNet.Serialization.ObjectDeserializer nestedObjectDeserializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.Serialization.IYamlConvertible.Write (YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlSequenceNode ()  {
                throw new System.NotImplementedException();
            }
                     public YamlSequenceNode (YamlDotNet.RepresentationModel.YamlNode[] children)  {
                throw new System.NotImplementedException();
            }
                     public YamlSequenceNode (System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode> children)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IList<YamlDotNet.RepresentationModel.YamlNode> Children
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Events.SequenceStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.RepresentationModel.YamlNodeType NodeType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public class YamlStream 
	 			: System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlDocument>,System.Collections.IEnumerable  
                    {
                public       void Add (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.IO.TextReader input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (YamlDotNet.Core.IParser parser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.IO.TextWriter output)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.IO.TextWriter output, System.Boolean assignAnchors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Accept (YamlDotNet.RepresentationModel.IYamlVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlDocument> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public YamlStream ()  {
                throw new System.NotImplementedException();
            }
                     public YamlStream (YamlDotNet.RepresentationModel.YamlDocument[] documents)  {
                throw new System.NotImplementedException();
            }
                     public YamlStream (System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlDocument> documents)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IList<YamlDotNet.RepresentationModel.YamlDocument> Documents
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public abstract class YamlVisitor 
	 			: YamlDotNet.RepresentationModel.IYamlVisitor  
                    {
                protected   virtual    void Visit (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visited (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visit (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visited (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visit (YamlDotNet.RepresentationModel.YamlScalarNode scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visited (YamlDotNet.RepresentationModel.YamlScalarNode scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visit (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visited (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visit (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Visited (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.RepresentationModel.IYamlVisitor.Visit (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.RepresentationModel.IYamlVisitor.Visit (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.RepresentationModel.IYamlVisitor.Visit (YamlDotNet.RepresentationModel.YamlScalarNode scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.RepresentationModel.IYamlVisitor.Visit (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                       void YamlDotNet.RepresentationModel.IYamlVisitor.Visit (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected YamlVisitor ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.RepresentationModel {
              public abstract class YamlVisitorBase 
	 			: YamlDotNet.RepresentationModel.IYamlVisitor  
                    {
                public   virtual    void Visit (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Visit (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Visit (YamlDotNet.RepresentationModel.YamlScalarNode scalar)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Visit (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Visit (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitPair (YamlDotNet.RepresentationModel.YamlNode key, YamlDotNet.RepresentationModel.YamlNode value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlStream stream)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlDocument document)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlSequenceNode sequence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void VisitChildren (YamlDotNet.RepresentationModel.YamlMappingNode mapping)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected YamlVisitorBase ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Helpers {
              public abstract class ExpressionExtensions 
	         {
                    /*System.TypeLoadException: Method 'System.Linq.Expressions.Expression.ToString()' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
            }

            }
                 namespace  YamlDotNet.Samples {
              public class ConvertYamlToJson 
	         {
                public       void Main ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ConvertYamlToJson (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Samples {
              public class DeserializeObjectGraph 
	         {
                public       void Main ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DeserializeObjectGraph (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  {
                throw new System.NotImplementedException();
            }
             public class Order 
	         {
                     public Order ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Receipt
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.DateTime Date
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.DeserializeObjectGraph.Customer Customer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<YamlDotNet.Samples.DeserializeObjectGraph.OrderItem> Items
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.DeserializeObjectGraph.Address BillTo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.DeserializeObjectGraph.Address ShipTo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SpecialDelivery
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class Customer 
	         {
                     public Customer ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Given
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Family
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class OrderItem 
	         {
                     public OrderItem ()  {
                throw new System.NotImplementedException();
            }
         public  System.String PartNo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Descrip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Decimal Price
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Quantity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class Address 
	         {
                     public Address ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Street
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String City
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String State
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  YamlDotNet.Samples {
              public class DeserializingMultipleDocuments 
	         {
                public       void Main ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DeserializingMultipleDocuments (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Samples {
              public class LoadingAYamlStream 
	         {
                public       void Main ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LoadingAYamlStream (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Samples {
              public class SerializeObjectGraph 
	         {
                public       void Main ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SerializeObjectGraph (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Samples {
              public class Address 
	         {
                     public Address ()  {
                throw new System.NotImplementedException();
            }
         public  System.String street
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String city
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String state
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Samples {
              public class Receipt 
	         {
                     public Receipt ()  {
                throw new System.NotImplementedException();
            }
         public  System.String receipt
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.DateTime date
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.Customer customer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.Item[] items
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.Address bill_to
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Samples.Address ship_to
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String specialDelivery
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Samples {
              public class Customer 
	         {
                     public Customer ()  {
                throw new System.NotImplementedException();
            }
         public  System.String given
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String family
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Samples {
              public class Item 
	         {
                     public Item ()  {
                throw new System.NotImplementedException();
            }
         public  System.String part_no
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String descrip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Decimal price
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 quantity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Samples.Helpers {
              public class ExampleRunner 
	 			: UnityEngine.MonoBehaviour  
                    {
                public static      System.String[] GetAllTestNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String[] GetAllTestTitles ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ExampleRunner ()  {
                throw new System.NotImplementedException();
            }
                            public  System.String[] disabledTests;
                }

            }
                 namespace  YamlDotNet.Samples.Helpers {
              public abstract class TestOutputHelperExtensions 
	         {
                public static      void WriteLine (YamlDotNet.Samples.Helpers.ITestOutputHelper output)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  YamlDotNet.Samples.Helpers {
              public interface ITestOutputHelper 
	         {
                       void WriteLine ()  
                    ;
                           void WriteLine (System.String value)  
                    ;
                           void WriteLine (System.String format, System.Object[] args)  
                    ;
            }

            }
                 namespace  YamlDotNet.Core {
              public class AnchorNotFoundException 
	 			: YamlDotNet.Core.YamlException,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public AnchorNotFoundException ()  {
                throw new System.NotImplementedException();
            }
                     public AnchorNotFoundException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public AnchorNotFoundException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public AnchorNotFoundException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class Emitter 
	 			: YamlDotNet.Core.IEmitter  
                    {
                public   virtual    void Emit (YamlDotNet.Core.Events.ParsingEvent @event)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Emitter (System.IO.TextWriter output)  {
                throw new System.NotImplementedException();
            }
                     public Emitter (System.IO.TextWriter output, System.Int32 bestIndent)  {
                throw new System.NotImplementedException();
            }
                     public Emitter (System.IO.TextWriter output, System.Int32 bestIndent, System.Int32 bestWidth)  {
                throw new System.NotImplementedException();
            }
                     public Emitter (System.IO.TextWriter output, System.Int32 bestIndent, System.Int32 bestWidth, System.Boolean isCanonical)  {
                throw new System.NotImplementedException();
            }
                     static Emitter ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class FakeList<T> 
	         {
                     public FakeList (System.Collections.Generic.IEnumerator<T> collection)  {
                throw new System.NotImplementedException();
            }
                     public FakeList (System.Collections.Generic.IEnumerable<T> collection)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class ForwardAnchorNotSupportedException 
	 			: YamlDotNet.Core.YamlException,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public ForwardAnchorNotSupportedException ()  {
                throw new System.NotImplementedException();
            }
                     public ForwardAnchorNotSupportedException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public ForwardAnchorNotSupportedException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public ForwardAnchorNotSupportedException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public interface IEmitter 
	         {
                       void Emit (YamlDotNet.Core.Events.ParsingEvent @event)  
                    ;
            }

            }
                 namespace  YamlDotNet.Core {
              interface ILookAheadBuffer 
	         {
                       System.Char Peek (System.Int32 offset)  
                    ;
                           void Skip (System.Int32 length)  
                    ;
               System.Boolean EndOfInput
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public interface IParser 
	         {
                       System.Boolean MoveNext ()  
                    ;
               YamlDotNet.Core.Events.ParsingEvent Current
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public interface IScanner 
	         {
                       System.Boolean MoveNext ()  
                    ;
                           System.Boolean MoveNextWithoutConsuming ()  
                    ;
                           void ConsumeCurrent ()  
                    ;
               YamlDotNet.Core.Mark CurrentPosition
                   
                 {
                                                get;
                                         }
                    YamlDotNet.Core.Tokens.Token Current
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class InsertionQueue<T> 
	         {
                public       void Enqueue (T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T Dequeue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Insert (System.Int32 index, T item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InsertionQueue ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class LookAheadBuffer 
	 			: YamlDotNet.Core.ILookAheadBuffer  
                    {
                public   virtual    System.Char Peek (System.Int32 offset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Cache (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Skip (System.Int32 length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LookAheadBuffer (System.IO.TextReader input, System.Int32 capacity)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean EndOfInput
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class Mark 
	 			: System.IEquatable<YamlDotNet.Core.Mark>,System.IComparable<YamlDotNet.Core.Mark>,System.IComparable  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Equals (YamlDotNet.Core.Mark other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 CompareTo (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 CompareTo (YamlDotNet.Core.Mark other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Mark ()  {
                throw new System.NotImplementedException();
            }
                     public Mark (System.Int32 index, System.Int32 line, System.Int32 column)  {
                throw new System.NotImplementedException();
            }
                     static Mark ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Line
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Column
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static YamlDotNet.Core.Mark Empty;
                }

            }
                 namespace  YamlDotNet.Core {
              public class MaximumRecursionLevelReachedException 
	 			: YamlDotNet.Core.YamlException,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public MaximumRecursionLevelReachedException ()  {
                throw new System.NotImplementedException();
            }
                     public MaximumRecursionLevelReachedException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public MaximumRecursionLevelReachedException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public MaximumRecursionLevelReachedException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public sealed class MergingParser 
	 			: YamlDotNet.Core.IParser  
                    {
                public       System.Boolean MoveNext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MergingParser (YamlDotNet.Core.IParser innerParser)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Core.Events.ParsingEvent Current
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class Parser 
	 			: YamlDotNet.Core.IParser  
                    {
                public   virtual    System.Boolean MoveNext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Parser (System.IO.TextReader input)  {
                throw new System.NotImplementedException();
            }
                     public Parser (YamlDotNet.Core.IScanner scanner)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Core.Events.ParsingEvent Current
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public abstract class ParserExtensions 
	         {
                public static      T Expect<T> (YamlDotNet.Core.IParser parser) where T : YamlDotNet.Core.Events.ParsingEvent
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Accept<T> (YamlDotNet.Core.IParser parser) where T : YamlDotNet.Core.Events.ParsingEvent
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T Allow<T> (YamlDotNet.Core.IParser parser) where T : YamlDotNet.Core.Events.ParsingEvent
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T Peek<T> (YamlDotNet.Core.IParser parser) where T : YamlDotNet.Core.Events.ParsingEvent
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SkipThisAndNestedEvents (YamlDotNet.Core.IParser parser)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  YamlDotNet.Core {
              public enum  ScalarStyle {
                Any,
                        Plain,
                        SingleQuoted,
                        DoubleQuoted,
                        Literal,
                        Folded,
                }
    
            }
                 namespace  YamlDotNet.Core {
              public class Scanner 
	 			: YamlDotNet.Core.IScanner  
                    {
                public   virtual    System.Boolean MoveNext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean MoveNextWithoutConsuming ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void ConsumeCurrent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Scanner (System.IO.TextReader input, System.Boolean skipComments)  {
                throw new System.NotImplementedException();
            }
                     static Scanner ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean SkipComments
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Tokens.Token Current
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Mark CurrentPosition
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class SemanticErrorException 
	 			: YamlDotNet.Core.YamlException,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public SemanticErrorException ()  {
                throw new System.NotImplementedException();
            }
                     public SemanticErrorException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public SemanticErrorException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public SemanticErrorException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class SyntaxErrorException 
	 			: YamlDotNet.Core.YamlException,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public SyntaxErrorException ()  {
                throw new System.NotImplementedException();
            }
                     public SyntaxErrorException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public SyntaxErrorException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public SyntaxErrorException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class TagDirectiveCollection 
	 			: System.Collections.ObjectModel.KeyedCollection<System.String, YamlDotNet.Core.Tokens.TagDirective>,System.Collections.Generic.IList<YamlDotNet.Core.Tokens.TagDirective>,System.Collections.Generic.ICollection<YamlDotNet.Core.Tokens.TagDirective>,System.Collections.Generic.IEnumerable<YamlDotNet.Core.Tokens.TagDirective>,System.Collections.IEnumerable,System.Collections.IList,System.Collections.ICollection,System.Collections.Generic.IReadOnlyList<YamlDotNet.Core.Tokens.TagDirective>,System.Collections.Generic.IReadOnlyCollection<YamlDotNet.Core.Tokens.TagDirective>  
                    {
                protected      override System.String GetKeyForItem (YamlDotNet.Core.Tokens.TagDirective item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (YamlDotNet.Core.Tokens.TagDirective directive)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagDirectiveCollection ()  {
                throw new System.NotImplementedException();
            }
                     public TagDirectiveCollection (System.Collections.Generic.IEnumerable<YamlDotNet.Core.Tokens.TagDirective> tagDirectives)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core {
              public class Version 
	         {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Version (System.Int32 major, System.Int32 minor)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Major
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Minor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core {
              public class YamlException 
	 			: System.Exception,System.Runtime.Serialization.ISerializable,System.Runtime.InteropServices._Exception  
                    {
                     public YamlException ()  {
                throw new System.NotImplementedException();
            }
                     public YamlException (System.String message)  {
                throw new System.NotImplementedException();
            }
                     public YamlException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message)  {
                throw new System.NotImplementedException();
            }
                     public YamlException (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end, System.String message, System.Exception innerException)  {
                throw new System.NotImplementedException();
            }
                     public YamlException (System.String message, System.Exception inner)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Core.Mark Start
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  YamlDotNet.Core.Mark End
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Anchor 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Anchor (System.String value) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Anchor (System.String value, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class AnchorAlias 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public AnchorAlias (System.String value) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public AnchorAlias (System.String value, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class BlockEnd 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public BlockEnd () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public BlockEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class BlockEntry 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public BlockEntry () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public BlockEntry (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class BlockMappingStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public BlockMappingStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public BlockMappingStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class BlockSequenceStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public BlockSequenceStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public BlockSequenceStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Comment 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Comment (System.String value, System.Boolean isInline) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Comment (System.String value, System.Boolean isInline, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsInline
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class DocumentEnd 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public DocumentEnd () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public DocumentEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class DocumentStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public DocumentStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public DocumentStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class FlowEntry 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public FlowEntry () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public FlowEntry (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class FlowMappingEnd 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public FlowMappingEnd () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public FlowMappingEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class FlowMappingStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public FlowMappingStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public FlowMappingStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class FlowSequenceEnd 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public FlowSequenceEnd () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public FlowSequenceEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class FlowSequenceStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public FlowSequenceStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public FlowSequenceStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Key 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Key () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Key (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Scalar 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Scalar (System.String value) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String value, YamlDotNet.Core.ScalarStyle style) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String value, YamlDotNet.Core.ScalarStyle style, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.ScalarStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class StreamEnd 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public StreamEnd () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public StreamEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class StreamStart 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public StreamStart () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public StreamStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Tag 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Tag (System.String handle, System.String suffix) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Tag (System.String handle, System.String suffix, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Handle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Suffix
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class TagDirective 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TagDirective (System.String handle, System.String prefix) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public TagDirective (System.String handle, System.String prefix, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     static TagDirective ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Handle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Prefix
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public abstract class Token 
	         {
                     protected Token (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Core.Mark Start
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Mark End
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class Value 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                     public Value () : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public Value (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  YamlDotNet.Core.Tokens {
              public class VersionDirective 
	 			: YamlDotNet.Core.Tokens.Token  
                    {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public VersionDirective (YamlDotNet.Core.Version version) : base(null, null) {
                throw new System.NotImplementedException();
            }
                     public VersionDirective (YamlDotNet.Core.Version version, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null) {
                throw new System.NotImplementedException();
            }
         public  YamlDotNet.Core.Version Version
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class AnchorAlias 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AnchorAlias (System.String value, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public AnchorAlias (System.String value)  {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class Comment 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Comment (System.String value, System.Boolean isInline)  {
                throw new System.NotImplementedException();
            }
                     public Comment (System.String value, System.Boolean isInline, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsInline
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class DocumentEnd 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DocumentEnd (System.Boolean isImplicit, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public DocumentEnd (System.Boolean isImplicit)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class DocumentStart 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DocumentStart (YamlDotNet.Core.Tokens.VersionDirective version, YamlDotNet.Core.TagDirectiveCollection tags, System.Boolean isImplicit, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public DocumentStart (YamlDotNet.Core.Tokens.VersionDirective version, YamlDotNet.Core.TagDirectiveCollection tags, System.Boolean isImplicit)  {
                throw new System.NotImplementedException();
            }
                     public DocumentStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public DocumentStart ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.TagDirectiveCollection Tags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Tokens.VersionDirective Version
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public interface IParsingEventVisitor 
	         {
                       void Visit (YamlDotNet.Core.Events.AnchorAlias e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.StreamStart e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.StreamEnd e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.DocumentStart e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.DocumentEnd e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.Scalar e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.SequenceStart e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.SequenceEnd e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.MappingStart e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.MappingEnd e)  
                    ;
                           void Visit (YamlDotNet.Core.Events.Comment e)  
                    ;
            }

            }
                 namespace  YamlDotNet.Core.Events {
              public class MappingEnd 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MappingEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public MappingEnd ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class MappingStart 
	 			: YamlDotNet.Core.Events.NodeEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MappingStart (System.String anchor, System.String tag, System.Boolean isImplicit, YamlDotNet.Core.Events.MappingStyle style, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public MappingStart (System.String anchor, System.String tag, System.Boolean isImplicit, YamlDotNet.Core.Events.MappingStyle style) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public MappingStart () : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsCanonical
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Events.MappingStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public enum  MappingStyle {
                Any,
                        Block,
                        Flow,
                }
    
            }
                 namespace  YamlDotNet.Core.Events {
              public abstract class NodeEvent 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                     protected NodeEvent (System.String anchor, System.String tag, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     protected NodeEvent (System.String anchor, System.String tag)  {
                throw new System.NotImplementedException();
            }
                     static NodeEvent ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Anchor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Tag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsCanonical
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public abstract class ParsingEvent 
	         {
                public   virtual    void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Mark Start
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Mark End
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class Scalar 
	 			: YamlDotNet.Core.Events.NodeEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Scalar (System.String anchor, System.String tag, System.String value, YamlDotNet.Core.ScalarStyle style, System.Boolean isPlainImplicit, System.Boolean isQuotedImplicit, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String anchor, System.String tag, System.String value, YamlDotNet.Core.ScalarStyle style, System.Boolean isPlainImplicit, System.Boolean isQuotedImplicit) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String value) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String tag, System.String value) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public Scalar (System.String anchor, System.String tag, System.String value) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
         public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.ScalarStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsPlainImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsQuotedImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsCanonical
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class SequenceEnd 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SequenceEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public SequenceEnd ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class SequenceStart 
	 			: YamlDotNet.Core.Events.NodeEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SequenceStart (System.String anchor, System.String tag, System.Boolean isImplicit, YamlDotNet.Core.Events.SequenceStyle style, YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
                     public SequenceStart (System.String anchor, System.String tag, System.Boolean isImplicit, YamlDotNet.Core.Events.SequenceStyle style) : base(null, null, null, null) {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsImplicit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsCanonical
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  YamlDotNet.Core.Events.SequenceStyle Style
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public enum  SequenceStyle {
                Any,
                        Block,
                        Flow,
                }
    
            }
                 namespace  YamlDotNet.Core.Events {
              public class StreamEnd 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StreamEnd (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
                     public StreamEnd ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  YamlDotNet.Core.Events {
              public class StreamStart 
	 			: YamlDotNet.Core.Events.ParsingEvent  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Accept (YamlDotNet.Core.Events.IParsingEventVisitor visitor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StreamStart ()  {
                throw new System.NotImplementedException();
            }
                     public StreamStart (YamlDotNet.Core.Mark start, YamlDotNet.Core.Mark end)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 NestingIncrease
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  UnityEngine.UI.Extensions {
              public class BezierPath 
	         {
                public       void SetControlPoints (System.Collections.Generic.List<UnityEngine.Vector2> newControlPoints)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetControlPoints (UnityEngine.Vector2[] newControlPoints)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> GetControlPoints ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Interpolate (System.Collections.Generic.List<UnityEngine.Vector2> segmentPoints, System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SamplePoints (System.Collections.Generic.List<UnityEngine.Vector2> sourcePoints, System.Single minSqrDistance, System.Single maxSqrDistance, System.Single scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 CalculateBezierPoint (System.Int32 curveIndex, System.Single t)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> GetDrawingPoints0 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> GetDrawingPoints1 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<UnityEngine.Vector2> GetDrawingPoints2 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BezierPath ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 SegmentsPerCurve;
                                    public  System.Single MINIMUM_SQR_DISTANCE;
                                    public  System.Single DIVISION_THRESHOLD;
                }

            }
                 namespace  UnityEngine.UI.Extensions {
              public class UILineRenderer 
	 			: UnityEngine.UI.Extensions.UIPrimitiveBase,UnityEngine.UI.ICanvasElement,UnityEngine.UI.IClippable,UnityEngine.UI.IMaskable,UnityEngine.UI.IMaterialModifier,UnityEngine.UI.ILayoutElement,UnityEngine.ICanvasRaycastFilter  
                    {
                protected      override void OnPopulateMesh (UnityEngine.UI.VertexHelper vh)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UILineRenderer ()  {
                throw new System.NotImplementedException();
            }
                     static UILineRenderer ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Rect uvRect
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Vector2[] Points
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Single LineThickness;
                                    public  System.Boolean UseMargins;
                                    public  UnityEngine.Vector2 Margin;
                                    public  System.Boolean relativeSize;
                                    public  System.Boolean LineList;
                                    public  System.Boolean LineCaps;
                                    public  UnityEngine.UI.Extensions.UILineRenderer.JoinType LineJoins;
                                    public  UnityEngine.UI.Extensions.UILineRenderer.BezierType BezierMode;
                                    public  System.Int32 BezierSegmentsPerCurve;
                     public enum  JoinType {
                Bevel,
                        Miter,
                }
         public enum  BezierType {
                None,
                        Quick,
                        Basic,
                        Improved,
                }
    }

            }
                 namespace  UnityEngine.UI.Extensions {
              public class UIPrimitiveBase 
	 			: UnityEngine.UI.MaskableGraphic,UnityEngine.UI.ICanvasElement,UnityEngine.UI.IClippable,UnityEngine.UI.IMaskable,UnityEngine.UI.IMaterialModifier,UnityEngine.UI.ILayoutElement,UnityEngine.ICanvasRaycastFilter  
                    {
                protected       UnityEngine.UIVertex[] SetVbo (UnityEngine.Vector2[] vertices, UnityEngine.Vector2[] uvs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CalculateLayoutInputHorizontal ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CalculateLayoutInputVertical ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsRaycastLocationValid (UnityEngine.Vector2 screenPoint, UnityEngine.Camera eventCamera)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UIPrimitiveBase ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Sprite sprite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Sprite overrideSprite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single eventAlphaThreshold
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Texture mainTexture
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single pixelsPerUnit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single minWidth
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single preferredWidth
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single flexibleWidth
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single minHeight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single preferredHeight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Single flexibleHeight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 layoutPriority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Steamworks {
              public abstract class CallbackDispatcher 
	         {
                public static      void ExceptionHandler (System.Exception e)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static CallbackDispatcher ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsInitialized
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Steamworks {
              public abstract class Callback 
	         {
                     protected Callback ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsGameServer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Steamworks {
              public sealed class Callback<T> 
	 			: Steamworks.Callback,System.IDisposable  
                    {
                public static      Steamworks.Callback<T> Create (Steamworks.Callback<T>.DispatchDelegate func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.Callback<T> CreateGameServer (Steamworks.Callback<T>.DispatchDelegate func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Register (Steamworks.Callback<T>.DispatchDelegate func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unregister ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Callback (Steamworks.Callback<T>.DispatchDelegate func, System.Boolean bGameServer)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsGameServer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                     public delegate void DispatchDelegate ();
    }

            }
                 namespace  Steamworks {
              public abstract class CallResult 
	         {
                     protected CallResult ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Steamworks {
              public sealed class CallResult<T> 
	 			: Steamworks.CallResult,System.IDisposable  
                    {
                public static      Steamworks.CallResult<T> Create (Steamworks.CallResult<T>.APIDispatchDelegate func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Dispose ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Set (Steamworks.SteamAPICall_t hAPICall, Steamworks.CallResult<T>.APIDispatchDelegate func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Cancel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CallResult (Steamworks.CallResult<T>.APIDispatchDelegate func)  {
                throw new System.NotImplementedException();
            }
         public  Steamworks.SteamAPICall_t Handle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                     public delegate void APIDispatchDelegate ();
    }

            }
                 namespace  Steamworks {
              public class ISteamMatchmakingServerListResponse 
	         {
                     public ISteamMatchmakingServerListResponse (Steamworks.ISteamMatchmakingServerListResponse.ServerResponded onServerResponded, Steamworks.ISteamMatchmakingServerListResponse.ServerFailedToRespond onServerFailedToRespond, Steamworks.ISteamMatchmakingServerListResponse.RefreshComplete onRefreshComplete)  {
                throw new System.NotImplementedException();
            }
            public delegate void ServerResponded ();
        public delegate void ServerFailedToRespond ();
        public delegate void RefreshComplete ();
    }

            }
                 namespace  Steamworks {
              public class ISteamMatchmakingPingResponse 
	         {
                     public ISteamMatchmakingPingResponse (Steamworks.ISteamMatchmakingPingResponse.ServerResponded onServerResponded, Steamworks.ISteamMatchmakingPingResponse.ServerFailedToRespond onServerFailedToRespond)  {
                throw new System.NotImplementedException();
            }
            public delegate void ServerResponded ();
        public delegate void ServerFailedToRespond ();
    }

            }
                 namespace  Steamworks {
              public class ISteamMatchmakingPlayersResponse 
	         {
                     public ISteamMatchmakingPlayersResponse (Steamworks.ISteamMatchmakingPlayersResponse.AddPlayerToList onAddPlayerToList, Steamworks.ISteamMatchmakingPlayersResponse.PlayersFailedToRespond onPlayersFailedToRespond, Steamworks.ISteamMatchmakingPlayersResponse.PlayersRefreshComplete onPlayersRefreshComplete)  {
                throw new System.NotImplementedException();
            }
            public delegate void AddPlayerToList ();
        public delegate void PlayersFailedToRespond ();
        public delegate void PlayersRefreshComplete ();
        public delegate void InternalAddPlayerToList ();
        public delegate void InternalPlayersFailedToRespond ();
        public delegate void InternalPlayersRefreshComplete ();
    }

            }
                 namespace  Steamworks {
              public class ISteamMatchmakingRulesResponse 
	         {
                     public ISteamMatchmakingRulesResponse (Steamworks.ISteamMatchmakingRulesResponse.RulesResponded onRulesResponded, Steamworks.ISteamMatchmakingRulesResponse.RulesFailedToRespond onRulesFailedToRespond, Steamworks.ISteamMatchmakingRulesResponse.RulesRefreshComplete onRulesRefreshComplete)  {
                throw new System.NotImplementedException();
            }
            public delegate void RulesResponded ();
        public delegate void RulesFailedToRespond ();
        public delegate void RulesRefreshComplete ();
        public delegate void InternalRulesResponded ();
        public delegate void InternalRulesFailedToRespond ();
        public delegate void InternalRulesRefreshComplete ();
    }

            }
                 namespace  Steamworks {
              public class InteropHelp 
	         {
                public static      void TestIfPlatformSupported ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TestIfAvailableClient ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TestIfAvailableGameServer ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String PtrToStringUTF8 (System.IntPtr nativeUtf8)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ByteArrayToStringUTF8 (System.Byte[] buffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StringToByteArrayUTF8 (System.String str, System.Byte[] outArrayBuffer, System.Int32 outArrayBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InteropHelp ()  {
                throw new System.NotImplementedException();
            }
             public class UTF8StringHandle 
	 			: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid,System.IDisposable  
                    {
                protected      override System.Boolean ReleaseHandle ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UTF8StringHandle (System.String str) : base(default(System.Boolean)) {
                throw new System.NotImplementedException();
            }
        }
     public class SteamParamStringArray 
	         {
                     public SteamParamStringArray (System.Collections.Generic.IList<System.String> strings)  {
                throw new System.NotImplementedException();
            }
        }
}

            }
                 namespace  Steamworks {
              public class MMKVPMarshaller 
	         {
                     public MMKVPMarshaller (Steamworks.MatchMakingKeyValuePair_t[] filters)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Steamworks {
              public class DllCheck 
	         {
                public static      System.Boolean Test ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DllCheck ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Steamworks {
              public abstract class Packsize 
	         {
                public static      System.Boolean Test ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public static System.Int32 value;
                }

            }
                 namespace  Steamworks {
              public abstract class SteamAPI 
	         {
                public static      System.Boolean Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RestartAppIfNecessary (Steamworks.AppId_t unOwnAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReleaseCurrentThreadMemory ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RunCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamRunning ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamPipe GetHSteamPipe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser GetHSteamUser ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class GameServer 
	         {
                public static      System.Boolean Init (System.UInt32 unIP, System.UInt16 usGamePort, System.UInt16 usQueryPort, Steamworks.EServerMode eServerMode, System.String pchVersionString)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RunCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReleaseCurrentThreadMemory ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BSecure ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetSteamID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamPipe GetHSteamPipe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser GetHSteamUser ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamEncryptedAppTicket 
	         {
                public static      System.Boolean BDecryptTicket (System.Byte[] rgubTicketEncrypted, System.UInt32 cubTicketEncrypted, System.Byte[] rgubTicketDecrypted, System.UInt32 pcubTicketDecrypted, System.Byte[] rgubKey, System.Int32 cubKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsTicketForApp (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetTicketIssueTime (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetTicketSteamID (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted, out Steamworks.CSteamID psteamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetTicketAppID (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BUserOwnsAppInTicket (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BUserIsVacBanned (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Byte[] GetUserVariableData (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted, out System.UInt32 pcubUserData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsTicketSigned (System.Byte[] rgubTicketDecrypted, System.UInt32 cubTicketDecrypted, System.Byte[] pubRSAKey, System.UInt32 cubRSAKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class Version 
	         {
                            public static System.String SteamworksNETVersion;
                                    public static System.String SteamworksSDKVersion;
                                    public static System.String SteamAPIDLLVersion;
                                    public static System.Int32 SteamAPIDLLSize;
                                    public static System.Int32 SteamAPI64DLLSize;
                }

            }
                 namespace  Steamworks {
              public struct SteamAppInstalled_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamAppUninstalled_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct DlcInstalled_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RegisterActivationCodeResponse_t 
	         {
                            public  Steamworks.ERegisterActivationCodeResult m_eResult;
                                    public  System.UInt32 m_unPackageRegistered;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct NewUrlLaunchParameters_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AppProofOfPurchaseKeyResponse_t 
	         {
         public  System.String m_rgchKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  System.UInt32 m_nAppID;
                                    public  System.UInt32 m_cchKeyLength;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FileDetailsResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 m_ulFileSize;
                                    public  System.Byte[] m_FileSHA;
                                    public  System.UInt32 m_unFlags;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct TimedTrialStatus_t 
	         {
                            public  Steamworks.AppId_t m_unAppID;
                                    public  System.Boolean m_bIsOffline;
                                    public  System.UInt32 m_unSecondsAllowed;
                                    public  System.UInt32 m_unSecondsPlayed;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct PersonaStateChange_t 
	         {
                            public  System.UInt64 m_ulSteamID;
                                    public  Steamworks.EPersonaChange m_nChangeFlags;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameOverlayActivated_t 
	         {
                            public  System.Byte m_bActive;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameServerChangeRequested_t 
	         {
         public  System.String m_rgchServer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchPassword
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameLobbyJoinRequested_t 
	         {
                            public  Steamworks.CSteamID m_steamIDLobby;
                                    public  Steamworks.CSteamID m_steamIDFriend;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AvatarImageLoaded_t 
	         {
                            public  Steamworks.CSteamID m_steamID;
                                    public  System.Int32 m_iImage;
                                    public  System.Int32 m_iWide;
                                    public  System.Int32 m_iTall;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ClanOfficerListResponse_t 
	         {
                            public  Steamworks.CSteamID m_steamIDClan;
                                    public  System.Int32 m_cOfficers;
                                    public  System.Byte m_bSuccess;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FriendRichPresenceUpdate_t 
	         {
                            public  Steamworks.CSteamID m_steamIDFriend;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameRichPresenceJoinRequested_t 
	         {
         public  System.String m_rgchConnect
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.CSteamID m_steamIDFriend;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameConnectedClanChatMsg_t 
	         {
                            public  Steamworks.CSteamID m_steamIDClanChat;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public  System.Int32 m_iMessageID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameConnectedChatJoin_t 
	         {
                            public  Steamworks.CSteamID m_steamIDClanChat;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameConnectedChatLeave_t 
	         {
                            public  Steamworks.CSteamID m_steamIDClanChat;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public  System.Boolean m_bKicked;
                                    public  System.Boolean m_bDropped;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct DownloadClanActivityCountsResult_t 
	         {
                            public  System.Boolean m_bSuccess;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct JoinClanChatRoomCompletionResult_t 
	         {
                            public  Steamworks.CSteamID m_steamIDClanChat;
                                    public  Steamworks.EChatRoomEnterResponse m_eChatRoomEnterResponse;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameConnectedFriendChatMsg_t 
	         {
                            public  Steamworks.CSteamID m_steamIDUser;
                                    public  System.Int32 m_iMessageID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FriendsGetFollowerCount_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_steamID;
                                    public  System.Int32 m_nCount;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FriendsIsFollowing_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_steamID;
                                    public  System.Boolean m_bIsFollowing;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FriendsEnumerateFollowingList_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID[] m_rgSteamID;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SetPersonaNameResponse_t 
	         {
                            public  System.Boolean m_bSuccess;
                                    public  System.Boolean m_bLocalSuccess;
                                    public  Steamworks.EResult m_result;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UnreadChatMessagesChanged_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct OverlayBrowserProtocolNavigation_t 
	         {
         public  System.String rgchURI
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GCMessageAvailable_t 
	         {
                            public  System.UInt32 m_nMessageSize;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GCMessageFailed_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSClientApprove_t 
	         {
                            public  Steamworks.CSteamID m_SteamID;
                                    public  Steamworks.CSteamID m_OwnerSteamID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSClientDeny_t 
	         {
         public  System.String m_rgchOptionalText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.CSteamID m_SteamID;
                                    public  Steamworks.EDenyReason m_eDenyReason;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSClientKick_t 
	         {
                            public  Steamworks.CSteamID m_SteamID;
                                    public  Steamworks.EDenyReason m_eDenyReason;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSClientAchievementStatus_t 
	         {
         public  System.String m_pchAchievement
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.UInt64 m_SteamID;
                                    public  System.Boolean m_bUnlocked;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSPolicyResponse_t 
	         {
                            public  System.Byte m_bSecure;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSGameplayStats_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nRank;
                                    public  System.UInt32 m_unTotalConnects;
                                    public  System.UInt32 m_unTotalMinutesPlayed;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSClientGroupStatus_t 
	         {
                            public  Steamworks.CSteamID m_SteamIDUser;
                                    public  Steamworks.CSteamID m_SteamIDGroup;
                                    public  System.Boolean m_bMember;
                                    public  System.Boolean m_bOfficer;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSReputation_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt32 m_unReputationScore;
                                    public  System.Boolean m_bBanned;
                                    public  System.UInt32 m_unBannedIP;
                                    public  System.UInt16 m_usBannedPort;
                                    public  System.UInt64 m_ulBannedGameID;
                                    public  System.UInt32 m_unBanExpires;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AssociateWithClanResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ComputeNewPlayerCompatibilityResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_cPlayersThatDontLikeCandidate;
                                    public  System.Int32 m_cPlayersThatCandidateDoesntLike;
                                    public  System.Int32 m_cClanPlayersThatDontLikeCandidate;
                                    public  Steamworks.CSteamID m_SteamIDCandidate;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSStatsReceived_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSStatsStored_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GSStatsUnloaded_t 
	         {
                            public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_BrowserReady_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_NeedsPaint_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.IntPtr pBGRA;
                                    public  System.UInt32 unWide;
                                    public  System.UInt32 unTall;
                                    public  System.UInt32 unUpdateX;
                                    public  System.UInt32 unUpdateY;
                                    public  System.UInt32 unUpdateWide;
                                    public  System.UInt32 unUpdateTall;
                                    public  System.UInt32 unScrollX;
                                    public  System.UInt32 unScrollY;
                                    public  System.Single flPageScale;
                                    public  System.UInt32 unPageSerial;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_StartRequest_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchURL;
                                    public  System.String pchTarget;
                                    public  System.String pchPostData;
                                    public  System.Boolean bIsRedirect;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_CloseBrowser_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_URLChanged_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchURL;
                                    public  System.String pchPostData;
                                    public  System.Boolean bIsRedirect;
                                    public  System.String pchPageTitle;
                                    public  System.Boolean bNewNavigation;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_FinishedRequest_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchURL;
                                    public  System.String pchPageTitle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_OpenLinkInNewTab_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchURL;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_ChangedTitle_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchTitle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_SearchResults_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.UInt32 unResults;
                                    public  System.UInt32 unCurrentMatch;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_CanGoBackAndForward_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.Boolean bCanGoBack;
                                    public  System.Boolean bCanGoForward;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_HorizontalScroll_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.UInt32 unScrollMax;
                                    public  System.UInt32 unScrollCurrent;
                                    public  System.Single flPageScale;
                                    public  System.Boolean bVisible;
                                    public  System.UInt32 unPageSize;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_VerticalScroll_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.UInt32 unScrollMax;
                                    public  System.UInt32 unScrollCurrent;
                                    public  System.Single flPageScale;
                                    public  System.Boolean bVisible;
                                    public  System.UInt32 unPageSize;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_LinkAtPosition_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.UInt32 x;
                                    public  System.UInt32 y;
                                    public  System.String pchURL;
                                    public  System.Boolean bInput;
                                    public  System.Boolean bLiveLink;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_JSAlert_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchMessage;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_JSConfirm_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchMessage;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_FileOpenDialog_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchTitle;
                                    public  System.String pchInitialFile;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_NewWindow_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchURL;
                                    public  System.UInt32 unX;
                                    public  System.UInt32 unY;
                                    public  System.UInt32 unWide;
                                    public  System.UInt32 unTall;
                                    public  Steamworks.HHTMLBrowser unNewWindow_BrowserHandle_IGNORE;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_SetCursor_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.UInt32 eMouseCursor;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_StatusText_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchMsg;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_ShowToolTip_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchMsg;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_UpdateToolTip_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  System.String pchMsg;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_HideToolTip_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTML_BrowserRestarted_t 
	         {
                            public  Steamworks.HHTMLBrowser unBrowserHandle;
                                    public  Steamworks.HHTMLBrowser unOldBrowserHandle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTTPRequestCompleted_t 
	         {
                            public  Steamworks.HTTPRequestHandle m_hRequest;
                                    public  System.UInt64 m_ulContextValue;
                                    public  System.Boolean m_bRequestSuccessful;
                                    public  Steamworks.EHTTPStatusCode m_eStatusCode;
                                    public  System.UInt32 m_unBodySize;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTTPRequestHeadersReceived_t 
	         {
                            public  Steamworks.HTTPRequestHandle m_hRequest;
                                    public  System.UInt64 m_ulContextValue;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct HTTPRequestDataReceived_t 
	         {
                            public  Steamworks.HTTPRequestHandle m_hRequest;
                                    public  System.UInt64 m_ulContextValue;
                                    public  System.UInt32 m_cOffset;
                                    public  System.UInt32 m_cBytesReceived;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryResultReady_t 
	         {
                            public  Steamworks.SteamInventoryResult_t m_handle;
                                    public  Steamworks.EResult m_result;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryFullUpdate_t 
	         {
                            public  Steamworks.SteamInventoryResult_t m_handle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryDefinitionUpdate_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryEligiblePromoItemDefIDs_t 
	         {
                            public  Steamworks.EResult m_result;
                                    public  Steamworks.CSteamID m_steamID;
                                    public  System.Int32 m_numEligiblePromoItemDefs;
                                    public  System.Boolean m_bCachedData;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryStartPurchaseResult_t 
	         {
                            public  Steamworks.EResult m_result;
                                    public  System.UInt64 m_ulOrderID;
                                    public  System.UInt64 m_ulTransID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryRequestPricesResult_t 
	         {
         public  System.String m_rgchCurrency
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_result;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FavoritesListChanged_t 
	         {
                            public  System.UInt32 m_nIP;
                                    public  System.UInt32 m_nQueryPort;
                                    public  System.UInt32 m_nConnPort;
                                    public  System.UInt32 m_nAppID;
                                    public  System.UInt32 m_nFlags;
                                    public  System.Boolean m_bAdd;
                                    public  Steamworks.AccountID_t m_unAccountId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyInvite_t 
	         {
                            public  System.UInt64 m_ulSteamIDUser;
                                    public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulGameID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyEnter_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt32 m_rgfChatPermissions;
                                    public  System.Boolean m_bLocked;
                                    public  System.UInt32 m_EChatRoomEnterResponse;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyDataUpdate_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulSteamIDMember;
                                    public  System.Byte m_bSuccess;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyChatUpdate_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulSteamIDUserChanged;
                                    public  System.UInt64 m_ulSteamIDMakingChange;
                                    public  System.UInt32 m_rgfChatMemberStateChange;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyChatMsg_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulSteamIDUser;
                                    public  System.Byte m_eChatEntryType;
                                    public  System.UInt32 m_iChatID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyGameCreated_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulSteamIDGameServer;
                                    public  System.UInt32 m_unIP;
                                    public  System.UInt16 m_usPort;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyMatchList_t 
	         {
                            public  System.UInt32 m_nLobbiesMatching;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyKicked_t 
	         {
                            public  System.UInt64 m_ulSteamIDLobby;
                                    public  System.UInt64 m_ulSteamIDAdmin;
                                    public  System.Byte m_bKickedDueToDisconnect;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LobbyCreated_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 m_ulSteamIDLobby;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct FavoritesListAccountsUpdated_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SearchForGameProgressCallback_t 
	         {
                            public  System.UInt64 m_ullSearchID;
                                    public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_lobbyID;
                                    public  Steamworks.CSteamID m_steamIDEndedSearch;
                                    public  System.Int32 m_nSecondsRemainingEstimate;
                                    public  System.Int32 m_cPlayersSearching;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SearchForGameResultCallback_t 
	         {
                            public  System.UInt64 m_ullSearchID;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nCountPlayersInGame;
                                    public  System.Int32 m_nCountAcceptedGame;
                                    public  Steamworks.CSteamID m_steamIDHost;
                                    public  System.Boolean m_bFinalCallback;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RequestPlayersForGameProgressCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 m_ullSearchID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RequestPlayersForGameResultCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 m_ullSearchID;
                                    public  Steamworks.CSteamID m_SteamIDPlayerFound;
                                    public  Steamworks.CSteamID m_SteamIDLobby;
                                    public  Steamworks.PlayerAcceptState_t m_ePlayerAcceptState;
                                    public  System.Int32 m_nPlayerIndex;
                                    public  System.Int32 m_nTotalPlayersFound;
                                    public  System.Int32 m_nTotalPlayersAcceptedGame;
                                    public  System.Int32 m_nSuggestedTeamIndex;
                                    public  System.UInt64 m_ullUniqueGameID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RequestPlayersForGameFinalResultCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 m_ullSearchID;
                                    public  System.UInt64 m_ullUniqueGameID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SubmitPlayerResultResultCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 ullUniqueGameID;
                                    public  Steamworks.CSteamID steamIDPlayer;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct EndGameResultCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.UInt64 ullUniqueGameID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct JoinPartyCallback_t 
	         {
         public  System.String m_rgchConnectString
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PartyBeaconID_t m_ulBeaconID;
                                    public  Steamworks.CSteamID m_SteamIDBeaconOwner;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct CreateBeaconCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PartyBeaconID_t m_ulBeaconID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ReservationNotificationCallback_t 
	         {
                            public  Steamworks.PartyBeaconID_t m_ulBeaconID;
                                    public  Steamworks.CSteamID m_steamIDJoiner;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ChangeNumOpenSlotsCallback_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AvailableBeaconLocationsUpdated_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ActiveBeaconsUpdated_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct PlaybackStatusHasChanged_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct VolumeHasChanged_t 
	         {
                            public  System.Single m_flNewVolume;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerRemoteWillActivate_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerRemoteWillDeactivate_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerRemoteToFront_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWillQuit_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsPlay_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsPause_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsPlayPrevious_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsPlayNext_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsShuffled_t 
	         {
                            public  System.Boolean m_bShuffled;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsLooped_t 
	         {
                            public  System.Boolean m_bLooped;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsVolume_t 
	         {
                            public  System.Single m_flNewVolume;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerSelectsQueueEntry_t 
	         {
                            public  System.Int32 nID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerSelectsPlaylistEntry_t 
	         {
                            public  System.Int32 nID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MusicPlayerWantsPlayingRepeatStatus_t 
	         {
                            public  System.Int32 m_nPlayingRepeatStatus;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct P2PSessionRequest_t 
	         {
                            public  Steamworks.CSteamID m_steamIDRemote;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct P2PSessionConnectFail_t 
	         {
                            public  Steamworks.CSteamID m_steamIDRemote;
                                    public  System.Byte m_eP2PSessionError;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SocketStatusCallback_t 
	         {
                            public  Steamworks.SNetSocket_t m_hSocket;
                                    public  Steamworks.SNetListenSocket_t m_hListenSocket;
                                    public  Steamworks.CSteamID m_steamIDRemote;
                                    public  System.Int32 m_eSNetSocketState;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingMessagesSessionRequest_t 
	         {
                            public  Steamworks.SteamNetworkingIdentity m_identityRemote;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingMessagesSessionFailed_t 
	         {
                            public  Steamworks.SteamNetConnectionInfo_t m_info;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetConnectionStatusChangedCallback_t 
	         {
                            public  Steamworks.HSteamNetConnection m_hConn;
                                    public  Steamworks.SteamNetConnectionInfo_t m_info;
                                    public  Steamworks.ESteamNetworkingConnectionState m_eOldState;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetAuthenticationStatus_t 
	         {
         public  System.String m_debugMsg
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.ESteamNetworkingAvailability m_eAvail;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamRelayNetworkStatus_t 
	         {
         public  System.String m_debugMsg
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.ESteamNetworkingAvailability m_eAvail;
                                    public  System.Int32 m_bPingMeasurementInProgress;
                                    public  Steamworks.ESteamNetworkingAvailability m_eAvailNetworkConfig;
                                    public  Steamworks.ESteamNetworkingAvailability m_eAvailAnyRelay;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamParentalSettingsChanged_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamRemotePlaySessionConnected_t 
	         {
                            public  Steamworks.RemotePlaySessionID_t m_unSessionID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamRemotePlaySessionDisconnected_t 
	         {
                            public  Steamworks.RemotePlaySessionID_t m_unSessionID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageAppSyncedClient_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_unNumDownloads;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageAppSyncedServer_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_unNumUploads;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageAppSyncProgress_t 
	         {
         public  System.String m_rgchCurrentFile
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.AppId_t m_nAppID;
                                    public  System.UInt32 m_uBytesTransferredThisChunk;
                                    public  System.Double m_dAppPercentComplete;
                                    public  System.Boolean m_bUploading;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageAppSyncStatusCheck_t 
	         {
                            public  Steamworks.AppId_t m_nAppID;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageFileShareResult_t 
	         {
         public  System.String m_rgchFilename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  Steamworks.UGCHandle_t m_hFile;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishFileResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  System.Boolean m_bUserNeedsToAcceptWorkshopLegalAgreement;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageDeletePublishedFileResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageEnumerateUserPublishedFilesResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public  Steamworks.PublishedFileId_t[] m_rgPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageSubscribePublishedFileResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageEnumerateUserSubscribedFilesResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public  Steamworks.PublishedFileId_t[] m_rgPublishedFileId;
                                    public  System.UInt32[] m_rgRTimeSubscribed;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageUnsubscribePublishedFileResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageUpdatePublishedFileResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  System.Boolean m_bUserNeedsToAcceptWorkshopLegalAgreement;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageDownloadUGCResult_t 
	         {
         public  System.String m_pchFileName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  Steamworks.UGCHandle_t m_hFile;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public  System.Int32 m_nSizeInBytes;
                                    public  System.UInt64 m_ulSteamIDOwner;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageGetPublishedFileDetailsResult_t 
	         {
         public  System.String m_rgchTitle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_pchFileName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nCreatorAppID;
                                    public  Steamworks.AppId_t m_nConsumerAppID;
                                    public  Steamworks.UGCHandle_t m_hFile;
                                    public  Steamworks.UGCHandle_t m_hPreviewFile;
                                    public  System.UInt64 m_ulSteamIDOwner;
                                    public  System.UInt32 m_rtimeCreated;
                                    public  System.UInt32 m_rtimeUpdated;
                                    public  Steamworks.ERemoteStoragePublishedFileVisibility m_eVisibility;
                                    public  System.Boolean m_bBanned;
                                    public  System.Boolean m_bTagsTruncated;
                                    public  System.Int32 m_nFileSize;
                                    public  System.Int32 m_nPreviewFileSize;
                                    public  Steamworks.EWorkshopFileType m_eFileType;
                                    public  System.Boolean m_bAcceptedForUse;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageEnumerateWorkshopFilesResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public  Steamworks.PublishedFileId_t[] m_rgPublishedFileId;
                                    public  System.Single[] m_rgScore;
                                    public  Steamworks.AppId_t m_nAppId;
                                    public  System.UInt32 m_unStartIndex;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageGetPublishedItemVoteDetailsResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_unPublishedFileId;
                                    public  System.Int32 m_nVotesFor;
                                    public  System.Int32 m_nVotesAgainst;
                                    public  System.Int32 m_nReports;
                                    public  System.Single m_fScore;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishedFileSubscribed_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishedFileUnsubscribed_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishedFileDeleted_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageUpdateUserPublishedItemVoteResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageUserVoteDetails_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EWorkshopVote m_eVote;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public  Steamworks.PublishedFileId_t[] m_rgPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageSetUserPublishedFileActionResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EWorkshopFileAction m_eAction;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.EWorkshopFileAction m_eAction;
                                    public  System.Int32 m_nResultsReturned;
                                    public  System.Int32 m_nTotalResultCount;
                                    public  Steamworks.PublishedFileId_t[] m_rgPublishedFileId;
                                    public  System.UInt32[] m_rgRTimeUpdated;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishFileProgress_t 
	         {
                            public  System.Double m_dPercentFile;
                                    public  System.Boolean m_bPreview;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStoragePublishedFileUpdated_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public  System.UInt64 m_ulUnused;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageFileWriteAsyncComplete_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoteStorageFileReadAsyncComplete_t 
	         {
                            public  Steamworks.SteamAPICall_t m_hFileReadAsync;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.UInt32 m_nOffset;
                                    public  System.UInt32 m_cubRead;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ScreenshotReady_t 
	         {
                            public  Steamworks.ScreenshotHandle m_hLocal;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ScreenshotRequested_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamUGCQueryCompleted_t 
	         {
         public  System.String m_rgchNextCursor
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.UGCQueryHandle_t m_handle;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.UInt32 m_unNumResultsReturned;
                                    public  System.UInt32 m_unTotalMatchingResults;
                                    public  System.Boolean m_bCachedData;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamUGCRequestUGCDetailsResult_t 
	         {
                            public  Steamworks.SteamUGCDetails_t m_details;
                                    public  System.Boolean m_bCachedData;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct CreateItemResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  System.Boolean m_bUserNeedsToAcceptWorkshopLegalAgreement;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SubmitItemUpdateResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Boolean m_bUserNeedsToAcceptWorkshopLegalAgreement;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ItemInstalled_t 
	         {
                            public  Steamworks.AppId_t m_unAppID;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct DownloadItemResult_t 
	         {
                            public  Steamworks.AppId_t m_unAppID;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserFavoriteItemsListChanged_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Boolean m_bWasAddRequest;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SetUserItemVoteResult_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Boolean m_bVoteUp;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GetUserItemVoteResult_t 
	         {
                            public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EResult m_eResult;
                                    public  System.Boolean m_bVotedUp;
                                    public  System.Boolean m_bVotedDown;
                                    public  System.Boolean m_bVoteSkipped;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct StartPlaytimeTrackingResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct StopPlaytimeTrackingResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AddUGCDependencyResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.PublishedFileId_t m_nChildPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoveUGCDependencyResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.PublishedFileId_t m_nChildPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct AddAppDependencyResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct RemoveAppDependencyResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GetAppDependenciesResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.AppId_t[] m_rgAppIDs;
                                    public  System.UInt32 m_nNumAppDependencies;
                                    public  System.UInt32 m_nTotalNumAppDependencies;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct DeleteItemResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamServersConnected_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamServerConnectFailure_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  System.Boolean m_bStillRetrying;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamServersDisconnected_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ClientGameServerDeny_t 
	         {
                            public  System.UInt32 m_uAppID;
                                    public  System.UInt32 m_unGameServerIP;
                                    public  System.UInt16 m_usGameServerPort;
                                    public  System.UInt16 m_bSecure;
                                    public  System.UInt32 m_uReason;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct IPCFailure_t 
	         {
                            public  System.Byte m_eFailureType;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LicensesUpdated_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct ValidateAuthTicketResponse_t 
	         {
                            public  Steamworks.CSteamID m_SteamID;
                                    public  Steamworks.EAuthSessionResponse m_eAuthSessionResponse;
                                    public  Steamworks.CSteamID m_OwnerSteamID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MicroTxnAuthorizationResponse_t 
	         {
                            public  System.UInt32 m_unAppID;
                                    public  System.UInt64 m_ulOrderID;
                                    public  System.Byte m_bAuthorized;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct EncryptedAppTicketResponse_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GetAuthSessionTicketResponse_t 
	         {
                            public  Steamworks.HAuthTicket m_hAuthTicket;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GameWebCallback_t 
	         {
         public  System.String m_szURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct StoreAuthURLResponse_t 
	         {
         public  System.String m_szURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct MarketEligibilityResponse_t 
	         {
                            public  System.Boolean m_bAllowed;
                                    public  Steamworks.EMarketNotAllowedReasonFlags m_eNotAllowedReason;
                                    public  Steamworks.RTime32 m_rtAllowedAtTime;
                                    public  System.Int32 m_cdaySteamGuardRequiredDays;
                                    public  System.Int32 m_cdayNewDeviceCooldown;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct DurationControl_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.AppId_t m_appid;
                                    public  System.Boolean m_bApplicable;
                                    public  System.Int32 m_csecsLast5h;
                                    public  Steamworks.EDurationControlProgress m_progress;
                                    public  Steamworks.EDurationControlNotification m_notification;
                                    public  System.Int32 m_csecsToday;
                                    public  System.Int32 m_csecsRemaining;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserStatsReceived_t 
	         {
                            public  System.UInt64 m_nGameID;
                                    public  Steamworks.EResult m_eResult;
                                    public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserStatsStored_t 
	         {
                            public  System.UInt64 m_nGameID;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserAchievementStored_t 
	         {
         public  System.String m_rgchAchievementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.UInt64 m_nGameID;
                                    public  System.Boolean m_bGroupAchievement;
                                    public  System.UInt32 m_nCurProgress;
                                    public  System.UInt32 m_nMaxProgress;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LeaderboardFindResult_t 
	         {
                            public  Steamworks.SteamLeaderboard_t m_hSteamLeaderboard;
                                    public  System.Byte m_bLeaderboardFound;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LeaderboardScoresDownloaded_t 
	         {
                            public  Steamworks.SteamLeaderboard_t m_hSteamLeaderboard;
                                    public  Steamworks.SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;
                                    public  System.Int32 m_cEntryCount;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LeaderboardScoreUploaded_t 
	         {
                            public  System.Byte m_bSuccess;
                                    public  Steamworks.SteamLeaderboard_t m_hSteamLeaderboard;
                                    public  System.Int32 m_nScore;
                                    public  System.Byte m_bScoreChanged;
                                    public  System.Int32 m_nGlobalRankNew;
                                    public  System.Int32 m_nGlobalRankPrevious;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct NumberOfCurrentPlayers_t 
	         {
                            public  System.Byte m_bSuccess;
                                    public  System.Int32 m_cPlayers;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserStatsUnloaded_t 
	         {
                            public  Steamworks.CSteamID m_steamIDUser;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct UserAchievementIconFetched_t 
	         {
         public  System.String m_rgchAchievementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.CGameID m_nGameID;
                                    public  System.Boolean m_bAchieved;
                                    public  System.Int32 m_nIconHandle;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GlobalAchievementPercentagesReady_t 
	         {
                            public  System.UInt64 m_nGameID;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LeaderboardUGCSet_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.SteamLeaderboard_t m_hSteamLeaderboard;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GlobalStatsReceived_t 
	         {
                            public  System.UInt64 m_nGameID;
                                    public  Steamworks.EResult m_eResult;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct IPCountry_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct LowBatteryPower_t 
	         {
                            public  System.Byte m_nMinutesBatteryLeft;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamAPICallCompleted_t 
	         {
                            public  Steamworks.SteamAPICall_t m_hAsyncCall;
                                    public  System.Int32 m_iCallback;
                                    public  System.UInt32 m_cubParam;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct SteamShutdown_t 
	         {
                            public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct CheckFileSignature_t 
	         {
                            public  Steamworks.ECheckFileSignature m_eCheckFileSignature;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GamepadTextInputDismissed_t 
	         {
                            public  System.Boolean m_bSubmitted;
                                    public  System.UInt32 m_unSubmittedText;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GetVideoURLResult_t 
	         {
         public  System.String m_rgchURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.EResult m_eResult;
                                    public  Steamworks.AppId_t m_unVideoAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public struct GetOPFSettingsResult_t 
	         {
                            public  Steamworks.EResult m_eResult;
                                    public  Steamworks.AppId_t m_unVideoAppID;
                                    public static System.Int32 k_iCallback;
                }

            }
                 namespace  Steamworks {
              public abstract class Constants 
	         {
                            public static System.String STEAMAPPLIST_INTERFACE_VERSION;
                                    public static System.String STEAMAPPS_INTERFACE_VERSION;
                                    public static System.String STEAMAPPTICKET_INTERFACE_VERSION;
                                    public static System.String STEAMCLIENT_INTERFACE_VERSION;
                                    public static System.String STEAMFRIENDS_INTERFACE_VERSION;
                                    public static System.String STEAMGAMECOORDINATOR_INTERFACE_VERSION;
                                    public static System.String STEAMGAMESERVER_INTERFACE_VERSION;
                                    public static System.String STEAMGAMESERVERSTATS_INTERFACE_VERSION;
                                    public static System.String STEAMHTMLSURFACE_INTERFACE_VERSION;
                                    public static System.String STEAMHTTP_INTERFACE_VERSION;
                                    public static System.String STEAMINPUT_INTERFACE_VERSION;
                                    public static System.String STEAMINVENTORY_INTERFACE_VERSION;
                                    public static System.String STEAMMATCHMAKING_INTERFACE_VERSION;
                                    public static System.String STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION;
                                    public static System.String STEAMGAMESEARCH_INTERFACE_VERSION;
                                    public static System.String STEAMPARTIES_INTERFACE_VERSION;
                                    public static System.String STEAMMUSIC_INTERFACE_VERSION;
                                    public static System.String STEAMMUSICREMOTE_INTERFACE_VERSION;
                                    public static System.String STEAMNETWORKING_INTERFACE_VERSION;
                                    public static System.String STEAMNETWORKINGMESSAGES_INTERFACE_VERSION;
                                    public static System.String STEAMNETWORKINGSOCKETS_INTERFACE_VERSION;
                                    public static System.String STEAMNETWORKINGUTILS_INTERFACE_VERSION;
                                    public static System.String STEAMPARENTALSETTINGS_INTERFACE_VERSION;
                                    public static System.String STEAMREMOTEPLAY_INTERFACE_VERSION;
                                    public static System.String STEAMREMOTESTORAGE_INTERFACE_VERSION;
                                    public static System.String STEAMSCREENSHOTS_INTERFACE_VERSION;
                                    public static System.String STEAMUGC_INTERFACE_VERSION;
                                    public static System.String STEAMUSER_INTERFACE_VERSION;
                                    public static System.String STEAMUSERSTATS_INTERFACE_VERSION;
                                    public static System.String STEAMUTILS_INTERFACE_VERSION;
                                    public static System.String STEAMVIDEO_INTERFACE_VERSION;
                                    public static System.Int32 k_cubAppProofOfPurchaseKeyMax;
                                    public static System.Int32 k_cchMaxFriendsGroupName;
                                    public static System.Int32 k_cFriendsGroupLimit;
                                    public static System.Int32 k_cEnumerateFollowersMax;
                                    public static System.Int32 k_cchPersonaNameMax;
                                    public static System.Int32 k_cwchPersonaNameMax;
                                    public static System.Int32 k_cubChatMetadataMax;
                                    public static System.Int32 k_cchMaxRichPresenceKeys;
                                    public static System.Int32 k_cchMaxRichPresenceKeyLength;
                                    public static System.Int32 k_cchMaxRichPresenceValueLength;
                                    public static System.Int32 k_unFavoriteFlagNone;
                                    public static System.Int32 k_unFavoriteFlagFavorite;
                                    public static System.Int32 k_unFavoriteFlagHistory;
                                    public static System.Int32 k_unMaxCloudFileChunkSize;
                                    public static System.Int32 k_cchPublishedDocumentTitleMax;
                                    public static System.Int32 k_cchPublishedDocumentDescriptionMax;
                                    public static System.Int32 k_cchPublishedDocumentChangeDescriptionMax;
                                    public static System.Int32 k_unEnumeratePublishedFilesMaxResults;
                                    public static System.Int32 k_cchTagListMax;
                                    public static System.Int32 k_cchFilenameMax;
                                    public static System.Int32 k_cchPublishedFileURLMax;
                                    public static System.Int32 k_nScreenshotMaxTaggedUsers;
                                    public static System.Int32 k_nScreenshotMaxTaggedPublishedFiles;
                                    public static System.Int32 k_cubUFSTagTypeMax;
                                    public static System.Int32 k_cubUFSTagValueMax;
                                    public static System.Int32 k_ScreenshotThumbWidth;
                                    public static System.Int32 kNumUGCResultsPerPage;
                                    public static System.Int32 k_cchDeveloperMetadataMax;
                                    public static System.Int32 k_cchStatNameMax;
                                    public static System.Int32 k_cchLeaderboardNameMax;
                                    public static System.Int32 k_cLeaderboardDetailsMax;
                                    public static System.Int32 k_cbMaxGameServerGameDir;
                                    public static System.Int32 k_cbMaxGameServerMapName;
                                    public static System.Int32 k_cbMaxGameServerGameDescription;
                                    public static System.Int32 k_cbMaxGameServerName;
                                    public static System.Int32 k_cbMaxGameServerTags;
                                    public static System.Int32 k_cbMaxGameServerGameData;
                                    public static System.Int32 k_iSteamUserCallbacks;
                                    public static System.Int32 k_iSteamGameServerCallbacks;
                                    public static System.Int32 k_iSteamFriendsCallbacks;
                                    public static System.Int32 k_iSteamBillingCallbacks;
                                    public static System.Int32 k_iSteamMatchmakingCallbacks;
                                    public static System.Int32 k_iSteamContentServerCallbacks;
                                    public static System.Int32 k_iSteamUtilsCallbacks;
                                    public static System.Int32 k_iClientFriendsCallbacks;
                                    public static System.Int32 k_iClientUserCallbacks;
                                    public static System.Int32 k_iSteamAppsCallbacks;
                                    public static System.Int32 k_iSteamUserStatsCallbacks;
                                    public static System.Int32 k_iSteamNetworkingCallbacks;
                                    public static System.Int32 k_iSteamNetworkingSocketsCallbacks;
                                    public static System.Int32 k_iSteamNetworkingMessagesCallbacks;
                                    public static System.Int32 k_iSteamNetworkingUtilsCallbacks;
                                    public static System.Int32 k_iClientRemoteStorageCallbacks;
                                    public static System.Int32 k_iClientDepotBuilderCallbacks;
                                    public static System.Int32 k_iSteamGameServerItemsCallbacks;
                                    public static System.Int32 k_iClientUtilsCallbacks;
                                    public static System.Int32 k_iSteamGameCoordinatorCallbacks;
                                    public static System.Int32 k_iSteamGameServerStatsCallbacks;
                                    public static System.Int32 k_iSteam2AsyncCallbacks;
                                    public static System.Int32 k_iSteamGameStatsCallbacks;
                                    public static System.Int32 k_iClientHTTPCallbacks;
                                    public static System.Int32 k_iClientScreenshotsCallbacks;
                                    public static System.Int32 k_iSteamScreenshotsCallbacks;
                                    public static System.Int32 k_iClientAudioCallbacks;
                                    public static System.Int32 k_iClientUnifiedMessagesCallbacks;
                                    public static System.Int32 k_iSteamStreamLauncherCallbacks;
                                    public static System.Int32 k_iClientControllerCallbacks;
                                    public static System.Int32 k_iSteamControllerCallbacks;
                                    public static System.Int32 k_iClientParentalSettingsCallbacks;
                                    public static System.Int32 k_iClientDeviceAuthCallbacks;
                                    public static System.Int32 k_iClientNetworkDeviceManagerCallbacks;
                                    public static System.Int32 k_iClientMusicCallbacks;
                                    public static System.Int32 k_iClientRemoteClientManagerCallbacks;
                                    public static System.Int32 k_iClientUGCCallbacks;
                                    public static System.Int32 k_iSteamStreamClientCallbacks;
                                    public static System.Int32 k_IClientProductBuilderCallbacks;
                                    public static System.Int32 k_iClientShortcutsCallbacks;
                                    public static System.Int32 k_iClientRemoteControlManagerCallbacks;
                                    public static System.Int32 k_iSteamAppListCallbacks;
                                    public static System.Int32 k_iSteamMusicCallbacks;
                                    public static System.Int32 k_iSteamMusicRemoteCallbacks;
                                    public static System.Int32 k_iClientVRCallbacks;
                                    public static System.Int32 k_iClientGameNotificationCallbacks;
                                    public static System.Int32 k_iSteamGameNotificationCallbacks;
                                    public static System.Int32 k_iSteamHTMLSurfaceCallbacks;
                                    public static System.Int32 k_iClientVideoCallbacks;
                                    public static System.Int32 k_iClientInventoryCallbacks;
                                    public static System.Int32 k_iClientBluetoothManagerCallbacks;
                                    public static System.Int32 k_iClientSharedConnectionCallbacks;
                                    public static System.Int32 k_ISteamParentalSettingsCallbacks;
                                    public static System.Int32 k_iClientShaderCallbacks;
                                    public static System.Int32 k_iSteamGameSearchCallbacks;
                                    public static System.Int32 k_iSteamPartiesCallbacks;
                                    public static System.Int32 k_iClientPartiesCallbacks;
                                    public static System.Int32 k_iSteamSTARCallbacks;
                                    public static System.Int32 k_iClientSTARCallbacks;
                                    public static System.Int32 k_iSteamRemotePlayCallbacks;
                                    public static System.Int32 k_iClientCompatCallbacks;
                                    public static System.Int32 k_iSteamChatCallbacks;
                                    public static System.Int32 k_unSteamAccountIDMask;
                                    public static System.Int32 k_unSteamAccountInstanceMask;
                                    public static System.Int32 k_unSteamUserDefaultInstance;
                                    public static System.Int32 k_cchGameExtraInfoMax;
                                    public static System.Int32 k_cbSteamDatagramMaxSerializedTicket;
                                    public static System.Int32 k_cbMaxSteamDatagramGameCoordinatorServerLoginAppData;
                                    public static System.Int32 k_cbMaxSteamDatagramGameCoordinatorServerLoginSerialized;
                                    public static System.Int32 k_nSteamEncryptedAppTicketSymmetricKeyLen;
                                    public static System.Int32 k_cchMaxSteamNetworkingErrMsg;
                                    public static System.Int32 k_cchSteamNetworkingMaxConnectionCloseReason;
                                    public static System.Int32 k_cchSteamNetworkingMaxConnectionDescription;
                                    public static System.Int32 k_cbMaxSteamNetworkingSocketsMessageSizeSend;
                                    public static System.Int32 k_nSteamNetworkingSend_Unreliable;
                                    public static System.Int32 k_nSteamNetworkingSend_NoNagle;
                                    public static System.Int32 k_nSteamNetworkingSend_UnreliableNoNagle;
                                    public static System.Int32 k_nSteamNetworkingSend_NoDelay;
                                    public static System.Int32 k_nSteamNetworkingSend_UnreliableNoDelay;
                                    public static System.Int32 k_nSteamNetworkingSend_Reliable;
                                    public static System.Int32 k_nSteamNetworkingSend_ReliableNoNagle;
                                    public static System.Int32 k_nSteamNetworkingSend_UseCurrentThread;
                                    public static System.Int32 k_nSteamNetworkingSend_AutoRestartBrokenSession;
                                    public static System.Int32 k_cchMaxSteamNetworkingPingLocationString;
                                    public static System.Int32 k_nSteamNetworkingPing_Failed;
                                    public static System.Int32 k_nSteamNetworkingPing_Unknown;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Default;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Disable;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Relay;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Private;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Public;
                                    public static System.Int32 k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_All;
                                    public static System.Int32 k_cubSaltSize;
                                    public static System.UInt64 k_GIDNil;
                                    public static System.UInt64 k_TxnIDNil;
                                    public static System.UInt64 k_TxnIDUnknown;
                                    public static System.Int32 k_uPackageIdInvalid;
                                    public static System.UInt64 k_ulAssetClassIdInvalid;
                                    public static System.Int32 k_uPhysicalItemIdInvalid;
                                    public static System.Int32 k_uCellIDInvalid;
                                    public static System.Int32 k_uPartnerIdInvalid;
                                    public static System.UInt64 k_ulPartyBeaconIdInvalid;
                                    public static System.Int32 INVALID_HTTPREQUEST_HANDLE;
                                    public static System.Int32 STEAM_INPUT_MAX_COUNT;
                                    public static System.Int32 STEAM_INPUT_MAX_ANALOG_ACTIONS;
                                    public static System.Int32 STEAM_INPUT_MAX_DIGITAL_ACTIONS;
                                    public static System.Int32 STEAM_INPUT_MAX_ORIGINS;
                                    public static System.Int32 STEAM_INPUT_MAX_ACTIVE_LAYERS;
                                    public static System.UInt64 STEAM_INPUT_HANDLE_ALL_CONTROLLERS;
                                    public static System.Single STEAM_INPUT_MIN_ANALOG_ACTION_DATA;
                                    public static System.Single STEAM_INPUT_MAX_ANALOG_ACTION_DATA;
                                    public static System.Byte k_nMaxLobbyKeyLength;
                                    public static System.Int32 k_SteamMusicNameMaxLength;
                                    public static System.Int32 k_SteamMusicPNGMaxLength;
                                    public static System.UInt16 MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE;
                                    public static System.Int32 QUERY_PORT_NOT_INITIALIZED;
                                    public static System.Int32 QUERY_PORT_ERROR;
                }

            }
                 namespace  Steamworks {
              public enum  ERegisterActivationCodeResult {
                k_ERegisterActivationCodeResultOK,
                        k_ERegisterActivationCodeResultFail,
                        k_ERegisterActivationCodeResultAlreadyRegistered,
                        k_ERegisterActivationCodeResultTimeout,
                        k_ERegisterActivationCodeAlreadyOwned,
                }
    
            }
                 namespace  Steamworks {
              public enum  EFriendRelationship {
                k_EFriendRelationshipNone,
                        k_EFriendRelationshipBlocked,
                        k_EFriendRelationshipRequestRecipient,
                        k_EFriendRelationshipFriend,
                        k_EFriendRelationshipRequestInitiator,
                        k_EFriendRelationshipIgnored,
                        k_EFriendRelationshipIgnoredFriend,
                        k_EFriendRelationshipSuggested_DEPRECATED,
                        k_EFriendRelationshipMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EPersonaState {
                k_EPersonaStateOffline,
                        k_EPersonaStateOnline,
                        k_EPersonaStateBusy,
                        k_EPersonaStateAway,
                        k_EPersonaStateSnooze,
                        k_EPersonaStateLookingToTrade,
                        k_EPersonaStateLookingToPlay,
                        k_EPersonaStateInvisible,
                        k_EPersonaStateMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EFriendFlags {
                k_EFriendFlagNone,
                        k_EFriendFlagBlocked,
                        k_EFriendFlagFriendshipRequested,
                        k_EFriendFlagImmediate,
                        k_EFriendFlagClanMember,
                        k_EFriendFlagOnGameServer,
                        k_EFriendFlagRequestingFriendship,
                        k_EFriendFlagRequestingInfo,
                        k_EFriendFlagIgnored,
                        k_EFriendFlagIgnoredFriend,
                        k_EFriendFlagChatMember,
                        k_EFriendFlagAll,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUserRestriction {
                k_nUserRestrictionNone,
                        k_nUserRestrictionUnknown,
                        k_nUserRestrictionAnyChat,
                        k_nUserRestrictionVoiceChat,
                        k_nUserRestrictionGroupChat,
                        k_nUserRestrictionRating,
                        k_nUserRestrictionGameInvites,
                        k_nUserRestrictionTrading,
                }
    
            }
                 namespace  Steamworks {
              public enum  EOverlayToStoreFlag {
                k_EOverlayToStoreFlag_None,
                        k_EOverlayToStoreFlag_AddToCart,
                        k_EOverlayToStoreFlag_AddToCartAndShow,
                }
    
            }
                 namespace  Steamworks {
              public enum  EActivateGameOverlayToWebPageMode {
                k_EActivateGameOverlayToWebPageMode_Default,
                        k_EActivateGameOverlayToWebPageMode_Modal,
                }
    
            }
                 namespace  Steamworks {
              public enum  EPersonaChange {
                k_EPersonaChangeName,
                        k_EPersonaChangeStatus,
                        k_EPersonaChangeComeOnline,
                        k_EPersonaChangeGoneOffline,
                        k_EPersonaChangeGamePlayed,
                        k_EPersonaChangeGameServer,
                        k_EPersonaChangeAvatar,
                        k_EPersonaChangeJoinedSource,
                        k_EPersonaChangeLeftSource,
                        k_EPersonaChangeRelationshipChanged,
                        k_EPersonaChangeNameFirstSet,
                        k_EPersonaChangeBroadcast,
                        k_EPersonaChangeNickname,
                        k_EPersonaChangeSteamLevel,
                        k_EPersonaChangeRichPresence,
                }
    
            }
                 namespace  Steamworks {
              public enum  EGCResults {
                k_EGCResultOK,
                        k_EGCResultNoMessage,
                        k_EGCResultBufferTooSmall,
                        k_EGCResultNotLoggedOn,
                        k_EGCResultInvalidMessage,
                }
    
            }
                 namespace  Steamworks {
              public enum  EHTMLMouseButton {
                eHTMLMouseButton_Left,
                        eHTMLMouseButton_Right,
                        eHTMLMouseButton_Middle,
                }
    
            }
                 namespace  Steamworks {
              public enum  EMouseCursor {
                dc_user,
                        dc_none,
                        dc_arrow,
                        dc_ibeam,
                        dc_hourglass,
                        dc_waitarrow,
                        dc_crosshair,
                        dc_up,
                        dc_sizenw,
                        dc_sizese,
                        dc_sizene,
                        dc_sizesw,
                        dc_sizew,
                        dc_sizee,
                        dc_sizen,
                        dc_sizes,
                        dc_sizewe,
                        dc_sizens,
                        dc_sizeall,
                        dc_no,
                        dc_hand,
                        dc_blank,
                        dc_middle_pan,
                        dc_north_pan,
                        dc_north_east_pan,
                        dc_east_pan,
                        dc_south_east_pan,
                        dc_south_pan,
                        dc_south_west_pan,
                        dc_west_pan,
                        dc_north_west_pan,
                        dc_alias,
                        dc_cell,
                        dc_colresize,
                        dc_copycur,
                        dc_verticaltext,
                        dc_rowresize,
                        dc_zoomin,
                        dc_zoomout,
                        dc_help,
                        dc_custom,
                        dc_last,
                }
    
            }
                 namespace  Steamworks {
              public enum  EHTMLKeyModifiers {
                k_eHTMLKeyModifier_None,
                        k_eHTMLKeyModifier_AltDown,
                        k_eHTMLKeyModifier_CtrlDown,
                        k_eHTMLKeyModifier_ShiftDown,
                }
    
            }
                 namespace  Steamworks {
              public enum  EInputSourceMode {
                k_EInputSourceMode_None,
                        k_EInputSourceMode_Dpad,
                        k_EInputSourceMode_Buttons,
                        k_EInputSourceMode_FourButtons,
                        k_EInputSourceMode_AbsoluteMouse,
                        k_EInputSourceMode_RelativeMouse,
                        k_EInputSourceMode_JoystickMove,
                        k_EInputSourceMode_JoystickMouse,
                        k_EInputSourceMode_JoystickCamera,
                        k_EInputSourceMode_ScrollWheel,
                        k_EInputSourceMode_Trigger,
                        k_EInputSourceMode_TouchMenu,
                        k_EInputSourceMode_MouseJoystick,
                        k_EInputSourceMode_MouseRegion,
                        k_EInputSourceMode_RadialMenu,
                        k_EInputSourceMode_SingleButton,
                        k_EInputSourceMode_Switches,
                }
    
            }
                 namespace  Steamworks {
              public enum  EInputActionOrigin {
                k_EInputActionOrigin_None,
                        k_EInputActionOrigin_SteamController_A,
                        k_EInputActionOrigin_SteamController_B,
                        k_EInputActionOrigin_SteamController_X,
                        k_EInputActionOrigin_SteamController_Y,
                        k_EInputActionOrigin_SteamController_LeftBumper,
                        k_EInputActionOrigin_SteamController_RightBumper,
                        k_EInputActionOrigin_SteamController_LeftGrip,
                        k_EInputActionOrigin_SteamController_RightGrip,
                        k_EInputActionOrigin_SteamController_Start,
                        k_EInputActionOrigin_SteamController_Back,
                        k_EInputActionOrigin_SteamController_LeftPad_Touch,
                        k_EInputActionOrigin_SteamController_LeftPad_Swipe,
                        k_EInputActionOrigin_SteamController_LeftPad_Click,
                        k_EInputActionOrigin_SteamController_LeftPad_DPadNorth,
                        k_EInputActionOrigin_SteamController_LeftPad_DPadSouth,
                        k_EInputActionOrigin_SteamController_LeftPad_DPadWest,
                        k_EInputActionOrigin_SteamController_LeftPad_DPadEast,
                        k_EInputActionOrigin_SteamController_RightPad_Touch,
                        k_EInputActionOrigin_SteamController_RightPad_Swipe,
                        k_EInputActionOrigin_SteamController_RightPad_Click,
                        k_EInputActionOrigin_SteamController_RightPad_DPadNorth,
                        k_EInputActionOrigin_SteamController_RightPad_DPadSouth,
                        k_EInputActionOrigin_SteamController_RightPad_DPadWest,
                        k_EInputActionOrigin_SteamController_RightPad_DPadEast,
                        k_EInputActionOrigin_SteamController_LeftTrigger_Pull,
                        k_EInputActionOrigin_SteamController_LeftTrigger_Click,
                        k_EInputActionOrigin_SteamController_RightTrigger_Pull,
                        k_EInputActionOrigin_SteamController_RightTrigger_Click,
                        k_EInputActionOrigin_SteamController_LeftStick_Move,
                        k_EInputActionOrigin_SteamController_LeftStick_Click,
                        k_EInputActionOrigin_SteamController_LeftStick_DPadNorth,
                        k_EInputActionOrigin_SteamController_LeftStick_DPadSouth,
                        k_EInputActionOrigin_SteamController_LeftStick_DPadWest,
                        k_EInputActionOrigin_SteamController_LeftStick_DPadEast,
                        k_EInputActionOrigin_SteamController_Gyro_Move,
                        k_EInputActionOrigin_SteamController_Gyro_Pitch,
                        k_EInputActionOrigin_SteamController_Gyro_Yaw,
                        k_EInputActionOrigin_SteamController_Gyro_Roll,
                        k_EInputActionOrigin_SteamController_Reserved0,
                        k_EInputActionOrigin_SteamController_Reserved1,
                        k_EInputActionOrigin_SteamController_Reserved2,
                        k_EInputActionOrigin_SteamController_Reserved3,
                        k_EInputActionOrigin_SteamController_Reserved4,
                        k_EInputActionOrigin_SteamController_Reserved5,
                        k_EInputActionOrigin_SteamController_Reserved6,
                        k_EInputActionOrigin_SteamController_Reserved7,
                        k_EInputActionOrigin_SteamController_Reserved8,
                        k_EInputActionOrigin_SteamController_Reserved9,
                        k_EInputActionOrigin_SteamController_Reserved10,
                        k_EInputActionOrigin_PS4_X,
                        k_EInputActionOrigin_PS4_Circle,
                        k_EInputActionOrigin_PS4_Triangle,
                        k_EInputActionOrigin_PS4_Square,
                        k_EInputActionOrigin_PS4_LeftBumper,
                        k_EInputActionOrigin_PS4_RightBumper,
                        k_EInputActionOrigin_PS4_Options,
                        k_EInputActionOrigin_PS4_Share,
                        k_EInputActionOrigin_PS4_LeftPad_Touch,
                        k_EInputActionOrigin_PS4_LeftPad_Swipe,
                        k_EInputActionOrigin_PS4_LeftPad_Click,
                        k_EInputActionOrigin_PS4_LeftPad_DPadNorth,
                        k_EInputActionOrigin_PS4_LeftPad_DPadSouth,
                        k_EInputActionOrigin_PS4_LeftPad_DPadWest,
                        k_EInputActionOrigin_PS4_LeftPad_DPadEast,
                        k_EInputActionOrigin_PS4_RightPad_Touch,
                        k_EInputActionOrigin_PS4_RightPad_Swipe,
                        k_EInputActionOrigin_PS4_RightPad_Click,
                        k_EInputActionOrigin_PS4_RightPad_DPadNorth,
                        k_EInputActionOrigin_PS4_RightPad_DPadSouth,
                        k_EInputActionOrigin_PS4_RightPad_DPadWest,
                        k_EInputActionOrigin_PS4_RightPad_DPadEast,
                        k_EInputActionOrigin_PS4_CenterPad_Touch,
                        k_EInputActionOrigin_PS4_CenterPad_Swipe,
                        k_EInputActionOrigin_PS4_CenterPad_Click,
                        k_EInputActionOrigin_PS4_CenterPad_DPadNorth,
                        k_EInputActionOrigin_PS4_CenterPad_DPadSouth,
                        k_EInputActionOrigin_PS4_CenterPad_DPadWest,
                        k_EInputActionOrigin_PS4_CenterPad_DPadEast,
                        k_EInputActionOrigin_PS4_LeftTrigger_Pull,
                        k_EInputActionOrigin_PS4_LeftTrigger_Click,
                        k_EInputActionOrigin_PS4_RightTrigger_Pull,
                        k_EInputActionOrigin_PS4_RightTrigger_Click,
                        k_EInputActionOrigin_PS4_LeftStick_Move,
                        k_EInputActionOrigin_PS4_LeftStick_Click,
                        k_EInputActionOrigin_PS4_LeftStick_DPadNorth,
                        k_EInputActionOrigin_PS4_LeftStick_DPadSouth,
                        k_EInputActionOrigin_PS4_LeftStick_DPadWest,
                        k_EInputActionOrigin_PS4_LeftStick_DPadEast,
                        k_EInputActionOrigin_PS4_RightStick_Move,
                        k_EInputActionOrigin_PS4_RightStick_Click,
                        k_EInputActionOrigin_PS4_RightStick_DPadNorth,
                        k_EInputActionOrigin_PS4_RightStick_DPadSouth,
                        k_EInputActionOrigin_PS4_RightStick_DPadWest,
                        k_EInputActionOrigin_PS4_RightStick_DPadEast,
                        k_EInputActionOrigin_PS4_DPad_North,
                        k_EInputActionOrigin_PS4_DPad_South,
                        k_EInputActionOrigin_PS4_DPad_West,
                        k_EInputActionOrigin_PS4_DPad_East,
                        k_EInputActionOrigin_PS4_Gyro_Move,
                        k_EInputActionOrigin_PS4_Gyro_Pitch,
                        k_EInputActionOrigin_PS4_Gyro_Yaw,
                        k_EInputActionOrigin_PS4_Gyro_Roll,
                        k_EInputActionOrigin_PS4_DPad_Move,
                        k_EInputActionOrigin_PS4_Reserved1,
                        k_EInputActionOrigin_PS4_Reserved2,
                        k_EInputActionOrigin_PS4_Reserved3,
                        k_EInputActionOrigin_PS4_Reserved4,
                        k_EInputActionOrigin_PS4_Reserved5,
                        k_EInputActionOrigin_PS4_Reserved6,
                        k_EInputActionOrigin_PS4_Reserved7,
                        k_EInputActionOrigin_PS4_Reserved8,
                        k_EInputActionOrigin_PS4_Reserved9,
                        k_EInputActionOrigin_PS4_Reserved10,
                        k_EInputActionOrigin_XBoxOne_A,
                        k_EInputActionOrigin_XBoxOne_B,
                        k_EInputActionOrigin_XBoxOne_X,
                        k_EInputActionOrigin_XBoxOne_Y,
                        k_EInputActionOrigin_XBoxOne_LeftBumper,
                        k_EInputActionOrigin_XBoxOne_RightBumper,
                        k_EInputActionOrigin_XBoxOne_Menu,
                        k_EInputActionOrigin_XBoxOne_View,
                        k_EInputActionOrigin_XBoxOne_LeftTrigger_Pull,
                        k_EInputActionOrigin_XBoxOne_LeftTrigger_Click,
                        k_EInputActionOrigin_XBoxOne_RightTrigger_Pull,
                        k_EInputActionOrigin_XBoxOne_RightTrigger_Click,
                        k_EInputActionOrigin_XBoxOne_LeftStick_Move,
                        k_EInputActionOrigin_XBoxOne_LeftStick_Click,
                        k_EInputActionOrigin_XBoxOne_LeftStick_DPadNorth,
                        k_EInputActionOrigin_XBoxOne_LeftStick_DPadSouth,
                        k_EInputActionOrigin_XBoxOne_LeftStick_DPadWest,
                        k_EInputActionOrigin_XBoxOne_LeftStick_DPadEast,
                        k_EInputActionOrigin_XBoxOne_RightStick_Move,
                        k_EInputActionOrigin_XBoxOne_RightStick_Click,
                        k_EInputActionOrigin_XBoxOne_RightStick_DPadNorth,
                        k_EInputActionOrigin_XBoxOne_RightStick_DPadSouth,
                        k_EInputActionOrigin_XBoxOne_RightStick_DPadWest,
                        k_EInputActionOrigin_XBoxOne_RightStick_DPadEast,
                        k_EInputActionOrigin_XBoxOne_DPad_North,
                        k_EInputActionOrigin_XBoxOne_DPad_South,
                        k_EInputActionOrigin_XBoxOne_DPad_West,
                        k_EInputActionOrigin_XBoxOne_DPad_East,
                        k_EInputActionOrigin_XBoxOne_DPad_Move,
                        k_EInputActionOrigin_XBoxOne_Reserved1,
                        k_EInputActionOrigin_XBoxOne_Reserved2,
                        k_EInputActionOrigin_XBoxOne_Reserved3,
                        k_EInputActionOrigin_XBoxOne_Reserved4,
                        k_EInputActionOrigin_XBoxOne_Reserved5,
                        k_EInputActionOrigin_XBoxOne_Reserved6,
                        k_EInputActionOrigin_XBoxOne_Reserved7,
                        k_EInputActionOrigin_XBoxOne_Reserved8,
                        k_EInputActionOrigin_XBoxOne_Reserved9,
                        k_EInputActionOrigin_XBoxOne_Reserved10,
                        k_EInputActionOrigin_XBox360_A,
                        k_EInputActionOrigin_XBox360_B,
                        k_EInputActionOrigin_XBox360_X,
                        k_EInputActionOrigin_XBox360_Y,
                        k_EInputActionOrigin_XBox360_LeftBumper,
                        k_EInputActionOrigin_XBox360_RightBumper,
                        k_EInputActionOrigin_XBox360_Start,
                        k_EInputActionOrigin_XBox360_Back,
                        k_EInputActionOrigin_XBox360_LeftTrigger_Pull,
                        k_EInputActionOrigin_XBox360_LeftTrigger_Click,
                        k_EInputActionOrigin_XBox360_RightTrigger_Pull,
                        k_EInputActionOrigin_XBox360_RightTrigger_Click,
                        k_EInputActionOrigin_XBox360_LeftStick_Move,
                        k_EInputActionOrigin_XBox360_LeftStick_Click,
                        k_EInputActionOrigin_XBox360_LeftStick_DPadNorth,
                        k_EInputActionOrigin_XBox360_LeftStick_DPadSouth,
                        k_EInputActionOrigin_XBox360_LeftStick_DPadWest,
                        k_EInputActionOrigin_XBox360_LeftStick_DPadEast,
                        k_EInputActionOrigin_XBox360_RightStick_Move,
                        k_EInputActionOrigin_XBox360_RightStick_Click,
                        k_EInputActionOrigin_XBox360_RightStick_DPadNorth,
                        k_EInputActionOrigin_XBox360_RightStick_DPadSouth,
                        k_EInputActionOrigin_XBox360_RightStick_DPadWest,
                        k_EInputActionOrigin_XBox360_RightStick_DPadEast,
                        k_EInputActionOrigin_XBox360_DPad_North,
                        k_EInputActionOrigin_XBox360_DPad_South,
                        k_EInputActionOrigin_XBox360_DPad_West,
                        k_EInputActionOrigin_XBox360_DPad_East,
                        k_EInputActionOrigin_XBox360_DPad_Move,
                        k_EInputActionOrigin_XBox360_Reserved1,
                        k_EInputActionOrigin_XBox360_Reserved2,
                        k_EInputActionOrigin_XBox360_Reserved3,
                        k_EInputActionOrigin_XBox360_Reserved4,
                        k_EInputActionOrigin_XBox360_Reserved5,
                        k_EInputActionOrigin_XBox360_Reserved6,
                        k_EInputActionOrigin_XBox360_Reserved7,
                        k_EInputActionOrigin_XBox360_Reserved8,
                        k_EInputActionOrigin_XBox360_Reserved9,
                        k_EInputActionOrigin_XBox360_Reserved10,
                        k_EInputActionOrigin_Switch_A,
                        k_EInputActionOrigin_Switch_B,
                        k_EInputActionOrigin_Switch_X,
                        k_EInputActionOrigin_Switch_Y,
                        k_EInputActionOrigin_Switch_LeftBumper,
                        k_EInputActionOrigin_Switch_RightBumper,
                        k_EInputActionOrigin_Switch_Plus,
                        k_EInputActionOrigin_Switch_Minus,
                        k_EInputActionOrigin_Switch_Capture,
                        k_EInputActionOrigin_Switch_LeftTrigger_Pull,
                        k_EInputActionOrigin_Switch_LeftTrigger_Click,
                        k_EInputActionOrigin_Switch_RightTrigger_Pull,
                        k_EInputActionOrigin_Switch_RightTrigger_Click,
                        k_EInputActionOrigin_Switch_LeftStick_Move,
                        k_EInputActionOrigin_Switch_LeftStick_Click,
                        k_EInputActionOrigin_Switch_LeftStick_DPadNorth,
                        k_EInputActionOrigin_Switch_LeftStick_DPadSouth,
                        k_EInputActionOrigin_Switch_LeftStick_DPadWest,
                        k_EInputActionOrigin_Switch_LeftStick_DPadEast,
                        k_EInputActionOrigin_Switch_RightStick_Move,
                        k_EInputActionOrigin_Switch_RightStick_Click,
                        k_EInputActionOrigin_Switch_RightStick_DPadNorth,
                        k_EInputActionOrigin_Switch_RightStick_DPadSouth,
                        k_EInputActionOrigin_Switch_RightStick_DPadWest,
                        k_EInputActionOrigin_Switch_RightStick_DPadEast,
                        k_EInputActionOrigin_Switch_DPad_North,
                        k_EInputActionOrigin_Switch_DPad_South,
                        k_EInputActionOrigin_Switch_DPad_West,
                        k_EInputActionOrigin_Switch_DPad_East,
                        k_EInputActionOrigin_Switch_ProGyro_Move,
                        k_EInputActionOrigin_Switch_ProGyro_Pitch,
                        k_EInputActionOrigin_Switch_ProGyro_Yaw,
                        k_EInputActionOrigin_Switch_ProGyro_Roll,
                        k_EInputActionOrigin_Switch_DPad_Move,
                        k_EInputActionOrigin_Switch_Reserved1,
                        k_EInputActionOrigin_Switch_Reserved2,
                        k_EInputActionOrigin_Switch_Reserved3,
                        k_EInputActionOrigin_Switch_Reserved4,
                        k_EInputActionOrigin_Switch_Reserved5,
                        k_EInputActionOrigin_Switch_Reserved6,
                        k_EInputActionOrigin_Switch_Reserved7,
                        k_EInputActionOrigin_Switch_Reserved8,
                        k_EInputActionOrigin_Switch_Reserved9,
                        k_EInputActionOrigin_Switch_Reserved10,
                        k_EInputActionOrigin_Switch_RightGyro_Move,
                        k_EInputActionOrigin_Switch_RightGyro_Pitch,
                        k_EInputActionOrigin_Switch_RightGyro_Yaw,
                        k_EInputActionOrigin_Switch_RightGyro_Roll,
                        k_EInputActionOrigin_Switch_LeftGyro_Move,
                        k_EInputActionOrigin_Switch_LeftGyro_Pitch,
                        k_EInputActionOrigin_Switch_LeftGyro_Yaw,
                        k_EInputActionOrigin_Switch_LeftGyro_Roll,
                        k_EInputActionOrigin_Switch_LeftGrip_Lower,
                        k_EInputActionOrigin_Switch_LeftGrip_Upper,
                        k_EInputActionOrigin_Switch_RightGrip_Lower,
                        k_EInputActionOrigin_Switch_RightGrip_Upper,
                        k_EInputActionOrigin_Switch_Reserved11,
                        k_EInputActionOrigin_Switch_Reserved12,
                        k_EInputActionOrigin_Switch_Reserved13,
                        k_EInputActionOrigin_Switch_Reserved14,
                        k_EInputActionOrigin_Switch_Reserved15,
                        k_EInputActionOrigin_Switch_Reserved16,
                        k_EInputActionOrigin_Switch_Reserved17,
                        k_EInputActionOrigin_Switch_Reserved18,
                        k_EInputActionOrigin_Switch_Reserved19,
                        k_EInputActionOrigin_Switch_Reserved20,
                        k_EInputActionOrigin_PS5_X,
                        k_EInputActionOrigin_PS5_Circle,
                        k_EInputActionOrigin_PS5_Triangle,
                        k_EInputActionOrigin_PS5_Square,
                        k_EInputActionOrigin_PS5_LeftBumper,
                        k_EInputActionOrigin_PS5_RightBumper,
                        k_EInputActionOrigin_PS5_Option,
                        k_EInputActionOrigin_PS5_Create,
                        k_EInputActionOrigin_PS5_Mute,
                        k_EInputActionOrigin_PS5_LeftPad_Touch,
                        k_EInputActionOrigin_PS5_LeftPad_Swipe,
                        k_EInputActionOrigin_PS5_LeftPad_Click,
                        k_EInputActionOrigin_PS5_LeftPad_DPadNorth,
                        k_EInputActionOrigin_PS5_LeftPad_DPadSouth,
                        k_EInputActionOrigin_PS5_LeftPad_DPadWest,
                        k_EInputActionOrigin_PS5_LeftPad_DPadEast,
                        k_EInputActionOrigin_PS5_RightPad_Touch,
                        k_EInputActionOrigin_PS5_RightPad_Swipe,
                        k_EInputActionOrigin_PS5_RightPad_Click,
                        k_EInputActionOrigin_PS5_RightPad_DPadNorth,
                        k_EInputActionOrigin_PS5_RightPad_DPadSouth,
                        k_EInputActionOrigin_PS5_RightPad_DPadWest,
                        k_EInputActionOrigin_PS5_RightPad_DPadEast,
                        k_EInputActionOrigin_PS5_CenterPad_Touch,
                        k_EInputActionOrigin_PS5_CenterPad_Swipe,
                        k_EInputActionOrigin_PS5_CenterPad_Click,
                        k_EInputActionOrigin_PS5_CenterPad_DPadNorth,
                        k_EInputActionOrigin_PS5_CenterPad_DPadSouth,
                        k_EInputActionOrigin_PS5_CenterPad_DPadWest,
                        k_EInputActionOrigin_PS5_CenterPad_DPadEast,
                        k_EInputActionOrigin_PS5_LeftTrigger_Pull,
                        k_EInputActionOrigin_PS5_LeftTrigger_Click,
                        k_EInputActionOrigin_PS5_RightTrigger_Pull,
                        k_EInputActionOrigin_PS5_RightTrigger_Click,
                        k_EInputActionOrigin_PS5_LeftStick_Move,
                        k_EInputActionOrigin_PS5_LeftStick_Click,
                        k_EInputActionOrigin_PS5_LeftStick_DPadNorth,
                        k_EInputActionOrigin_PS5_LeftStick_DPadSouth,
                        k_EInputActionOrigin_PS5_LeftStick_DPadWest,
                        k_EInputActionOrigin_PS5_LeftStick_DPadEast,
                        k_EInputActionOrigin_PS5_RightStick_Move,
                        k_EInputActionOrigin_PS5_RightStick_Click,
                        k_EInputActionOrigin_PS5_RightStick_DPadNorth,
                        k_EInputActionOrigin_PS5_RightStick_DPadSouth,
                        k_EInputActionOrigin_PS5_RightStick_DPadWest,
                        k_EInputActionOrigin_PS5_RightStick_DPadEast,
                        k_EInputActionOrigin_PS5_DPad_North,
                        k_EInputActionOrigin_PS5_DPad_South,
                        k_EInputActionOrigin_PS5_DPad_West,
                        k_EInputActionOrigin_PS5_DPad_East,
                        k_EInputActionOrigin_PS5_Gyro_Move,
                        k_EInputActionOrigin_PS5_Gyro_Pitch,
                        k_EInputActionOrigin_PS5_Gyro_Yaw,
                        k_EInputActionOrigin_PS5_Gyro_Roll,
                        k_EInputActionOrigin_PS5_DPad_Move,
                        k_EInputActionOrigin_PS5_Reserved1,
                        k_EInputActionOrigin_PS5_Reserved2,
                        k_EInputActionOrigin_PS5_Reserved3,
                        k_EInputActionOrigin_PS5_Reserved4,
                        k_EInputActionOrigin_PS5_Reserved5,
                        k_EInputActionOrigin_PS5_Reserved6,
                        k_EInputActionOrigin_PS5_Reserved7,
                        k_EInputActionOrigin_PS5_Reserved8,
                        k_EInputActionOrigin_PS5_Reserved9,
                        k_EInputActionOrigin_PS5_Reserved10,
                        k_EInputActionOrigin_PS5_Reserved11,
                        k_EInputActionOrigin_PS5_Reserved12,
                        k_EInputActionOrigin_PS5_Reserved13,
                        k_EInputActionOrigin_PS5_Reserved14,
                        k_EInputActionOrigin_PS5_Reserved15,
                        k_EInputActionOrigin_PS5_Reserved16,
                        k_EInputActionOrigin_PS5_Reserved17,
                        k_EInputActionOrigin_PS5_Reserved18,
                        k_EInputActionOrigin_PS5_Reserved19,
                        k_EInputActionOrigin_PS5_Reserved20,
                        k_EInputActionOrigin_Count,
                        k_EInputActionOrigin_MaximumPossibleValue,
                }
    
            }
                 namespace  Steamworks {
              public enum  EXboxOrigin {
                k_EXboxOrigin_A,
                        k_EXboxOrigin_B,
                        k_EXboxOrigin_X,
                        k_EXboxOrigin_Y,
                        k_EXboxOrigin_LeftBumper,
                        k_EXboxOrigin_RightBumper,
                        k_EXboxOrigin_Menu,
                        k_EXboxOrigin_View,
                        k_EXboxOrigin_LeftTrigger_Pull,
                        k_EXboxOrigin_LeftTrigger_Click,
                        k_EXboxOrigin_RightTrigger_Pull,
                        k_EXboxOrigin_RightTrigger_Click,
                        k_EXboxOrigin_LeftStick_Move,
                        k_EXboxOrigin_LeftStick_Click,
                        k_EXboxOrigin_LeftStick_DPadNorth,
                        k_EXboxOrigin_LeftStick_DPadSouth,
                        k_EXboxOrigin_LeftStick_DPadWest,
                        k_EXboxOrigin_LeftStick_DPadEast,
                        k_EXboxOrigin_RightStick_Move,
                        k_EXboxOrigin_RightStick_Click,
                        k_EXboxOrigin_RightStick_DPadNorth,
                        k_EXboxOrigin_RightStick_DPadSouth,
                        k_EXboxOrigin_RightStick_DPadWest,
                        k_EXboxOrigin_RightStick_DPadEast,
                        k_EXboxOrigin_DPad_North,
                        k_EXboxOrigin_DPad_South,
                        k_EXboxOrigin_DPad_West,
                        k_EXboxOrigin_DPad_East,
                        k_EXboxOrigin_Count,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamControllerPad {
                k_ESteamControllerPad_Left,
                        k_ESteamControllerPad_Right,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamInputType {
                k_ESteamInputType_Unknown,
                        k_ESteamInputType_SteamController,
                        k_ESteamInputType_XBox360Controller,
                        k_ESteamInputType_XBoxOneController,
                        k_ESteamInputType_GenericGamepad,
                        k_ESteamInputType_PS4Controller,
                        k_ESteamInputType_AppleMFiController,
                        k_ESteamInputType_AndroidController,
                        k_ESteamInputType_SwitchJoyConPair,
                        k_ESteamInputType_SwitchJoyConSingle,
                        k_ESteamInputType_SwitchProController,
                        k_ESteamInputType_MobileTouch,
                        k_ESteamInputType_PS3Controller,
                        k_ESteamInputType_PS5Controller,
                        k_ESteamInputType_Count,
                        k_ESteamInputType_MaximumPossibleValue,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamInputLEDFlag {
                k_ESteamInputLEDFlag_SetColor,
                        k_ESteamInputLEDFlag_RestoreUserDefault,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamItemFlags {
                k_ESteamItemNoTrade,
                        k_ESteamItemRemoved,
                        k_ESteamItemConsumed,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELobbyType {
                k_ELobbyTypePrivate,
                        k_ELobbyTypeFriendsOnly,
                        k_ELobbyTypePublic,
                        k_ELobbyTypeInvisible,
                        k_ELobbyTypePrivateUnique,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELobbyComparison {
                k_ELobbyComparisonEqual,
                        k_ELobbyComparisonGreaterThan,
                        k_ELobbyComparisonEqualToOrGreaterThan,
                        k_ELobbyComparisonNotEqual,
                        k_ELobbyComparisonEqualToOrLessThan,
                        k_ELobbyComparisonLessThan,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELobbyDistanceFilter {
                k_ELobbyDistanceFilterClose,
                        k_ELobbyDistanceFilterDefault,
                        k_ELobbyDistanceFilterFar,
                        k_ELobbyDistanceFilterWorldwide,
                }
    
            }
                 namespace  Steamworks {
              public enum  EChatMemberStateChange {
                k_EChatMemberStateChangeEntered,
                        k_EChatMemberStateChangeLeft,
                        k_EChatMemberStateChangeDisconnected,
                        k_EChatMemberStateChangeKicked,
                        k_EChatMemberStateChangeBanned,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamPartyBeaconLocationType {
                k_ESteamPartyBeaconLocationType_Invalid,
                        k_ESteamPartyBeaconLocationType_ChatGroup,
                        k_ESteamPartyBeaconLocationType_Max,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamPartyBeaconLocationData {
                k_ESteamPartyBeaconLocationDataInvalid,
                        k_ESteamPartyBeaconLocationDataName,
                        k_ESteamPartyBeaconLocationDataIconURLSmall,
                        k_ESteamPartyBeaconLocationDataIconURLMedium,
                        k_ESteamPartyBeaconLocationDataIconURLLarge,
                }
    
            }
                 namespace  Steamworks {
              public enum  PlayerAcceptState_t {
                k_EStateUnknown,
                        k_EStatePlayerAccepted,
                        k_EStatePlayerDeclined,
                }
    
            }
                 namespace  Steamworks {
              public enum  AudioPlayback_Status {
                AudioPlayback_Undefined,
                        AudioPlayback_Playing,
                        AudioPlayback_Paused,
                        AudioPlayback_Idle,
                }
    
            }
                 namespace  Steamworks {
              public enum  EP2PSessionError {
                k_EP2PSessionErrorNone,
                        k_EP2PSessionErrorNotRunningApp_DELETED,
                        k_EP2PSessionErrorNoRightsToApp,
                        k_EP2PSessionErrorDestinationNotLoggedIn_DELETED,
                        k_EP2PSessionErrorTimeout,
                        k_EP2PSessionErrorMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EP2PSend {
                k_EP2PSendUnreliable,
                        k_EP2PSendUnreliableNoDelay,
                        k_EP2PSendReliable,
                        k_EP2PSendReliableWithBuffering,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESNetSocketState {
                k_ESNetSocketStateInvalid,
                        k_ESNetSocketStateConnected,
                        k_ESNetSocketStateInitiated,
                        k_ESNetSocketStateLocalCandidatesFound,
                        k_ESNetSocketStateReceivedRemoteCandidates,
                        k_ESNetSocketStateChallengeHandshake,
                        k_ESNetSocketStateDisconnecting,
                        k_ESNetSocketStateLocalDisconnect,
                        k_ESNetSocketStateTimeoutDuringConnect,
                        k_ESNetSocketStateRemoteEndDisconnected,
                        k_ESNetSocketStateConnectionBroken,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESNetSocketConnectionType {
                k_ESNetSocketConnectionTypeNotConnected,
                        k_ESNetSocketConnectionTypeUDP,
                        k_ESNetSocketConnectionTypeUDPRelay,
                }
    
            }
                 namespace  Steamworks {
              public enum  EParentalFeature {
                k_EFeatureInvalid,
                        k_EFeatureStore,
                        k_EFeatureCommunity,
                        k_EFeatureProfile,
                        k_EFeatureFriends,
                        k_EFeatureNews,
                        k_EFeatureTrading,
                        k_EFeatureSettings,
                        k_EFeatureConsole,
                        k_EFeatureBrowser,
                        k_EFeatureParentalSetup,
                        k_EFeatureLibrary,
                        k_EFeatureTest,
                        k_EFeatureSiteLicense,
                        k_EFeatureMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamDeviceFormFactor {
                k_ESteamDeviceFormFactorUnknown,
                        k_ESteamDeviceFormFactorPhone,
                        k_ESteamDeviceFormFactorTablet,
                        k_ESteamDeviceFormFactorComputer,
                        k_ESteamDeviceFormFactorTV,
                }
    
            }
                 namespace  Steamworks {
              public enum  ERemoteStoragePlatform {
                k_ERemoteStoragePlatformNone,
                        k_ERemoteStoragePlatformWindows,
                        k_ERemoteStoragePlatformOSX,
                        k_ERemoteStoragePlatformPS3,
                        k_ERemoteStoragePlatformLinux,
                        k_ERemoteStoragePlatformSwitch,
                        k_ERemoteStoragePlatformAndroid,
                        k_ERemoteStoragePlatformIOS,
                        k_ERemoteStoragePlatformAll,
                }
    
            }
                 namespace  Steamworks {
              public enum  ERemoteStoragePublishedFileVisibility {
                k_ERemoteStoragePublishedFileVisibilityPublic,
                        k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
                        k_ERemoteStoragePublishedFileVisibilityPrivate,
                        k_ERemoteStoragePublishedFileVisibilityUnlisted,
                }
    
            }
                 namespace  Steamworks {
              public enum  EWorkshopFileType {
                k_EWorkshopFileTypeFirst,
                        k_EWorkshopFileTypeCommunity,
                        k_EWorkshopFileTypeMicrotransaction,
                        k_EWorkshopFileTypeCollection,
                        k_EWorkshopFileTypeArt,
                        k_EWorkshopFileTypeVideo,
                        k_EWorkshopFileTypeScreenshot,
                        k_EWorkshopFileTypeGame,
                        k_EWorkshopFileTypeSoftware,
                        k_EWorkshopFileTypeConcept,
                        k_EWorkshopFileTypeWebGuide,
                        k_EWorkshopFileTypeIntegratedGuide,
                        k_EWorkshopFileTypeMerch,
                        k_EWorkshopFileTypeControllerBinding,
                        k_EWorkshopFileTypeSteamworksAccessInvite,
                        k_EWorkshopFileTypeSteamVideo,
                        k_EWorkshopFileTypeGameManagedItem,
                        k_EWorkshopFileTypeMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EWorkshopVote {
                k_EWorkshopVoteUnvoted,
                        k_EWorkshopVoteFor,
                        k_EWorkshopVoteAgainst,
                        k_EWorkshopVoteLater,
                }
    
            }
                 namespace  Steamworks {
              public enum  EWorkshopFileAction {
                k_EWorkshopFileActionPlayed,
                        k_EWorkshopFileActionCompleted,
                }
    
            }
                 namespace  Steamworks {
              public enum  EWorkshopEnumerationType {
                k_EWorkshopEnumerationTypeRankedByVote,
                        k_EWorkshopEnumerationTypeRecent,
                        k_EWorkshopEnumerationTypeTrending,
                        k_EWorkshopEnumerationTypeFavoritesOfFriends,
                        k_EWorkshopEnumerationTypeVotedByFriends,
                        k_EWorkshopEnumerationTypeContentByFriends,
                        k_EWorkshopEnumerationTypeRecentFromFollowedUsers,
                }
    
            }
                 namespace  Steamworks {
              public enum  EWorkshopVideoProvider {
                k_EWorkshopVideoProviderNone,
                        k_EWorkshopVideoProviderYoutube,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUGCReadAction {
                k_EUGCRead_ContinueReadingUntilFinished,
                        k_EUGCRead_ContinueReading,
                        k_EUGCRead_Close,
                }
    
            }
                 namespace  Steamworks {
              public enum  EVRScreenshotType {
                k_EVRScreenshotType_None,
                        k_EVRScreenshotType_Mono,
                        k_EVRScreenshotType_Stereo,
                        k_EVRScreenshotType_MonoCubemap,
                        k_EVRScreenshotType_MonoPanorama,
                        k_EVRScreenshotType_StereoPanorama,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUGCMatchingUGCType {
                k_EUGCMatchingUGCType_Items,
                        k_EUGCMatchingUGCType_Items_Mtx,
                        k_EUGCMatchingUGCType_Items_ReadyToUse,
                        k_EUGCMatchingUGCType_Collections,
                        k_EUGCMatchingUGCType_Artwork,
                        k_EUGCMatchingUGCType_Videos,
                        k_EUGCMatchingUGCType_Screenshots,
                        k_EUGCMatchingUGCType_AllGuides,
                        k_EUGCMatchingUGCType_WebGuides,
                        k_EUGCMatchingUGCType_IntegratedGuides,
                        k_EUGCMatchingUGCType_UsableInGame,
                        k_EUGCMatchingUGCType_ControllerBindings,
                        k_EUGCMatchingUGCType_GameManagedItems,
                        k_EUGCMatchingUGCType_All,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUserUGCList {
                k_EUserUGCList_Published,
                        k_EUserUGCList_VotedOn,
                        k_EUserUGCList_VotedUp,
                        k_EUserUGCList_VotedDown,
                        k_EUserUGCList_WillVoteLater,
                        k_EUserUGCList_Favorited,
                        k_EUserUGCList_Subscribed,
                        k_EUserUGCList_UsedOrPlayed,
                        k_EUserUGCList_Followed,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUserUGCListSortOrder {
                k_EUserUGCListSortOrder_CreationOrderDesc,
                        k_EUserUGCListSortOrder_CreationOrderAsc,
                        k_EUserUGCListSortOrder_TitleAsc,
                        k_EUserUGCListSortOrder_LastUpdatedDesc,
                        k_EUserUGCListSortOrder_SubscriptionDateDesc,
                        k_EUserUGCListSortOrder_VoteScoreDesc,
                        k_EUserUGCListSortOrder_ForModeration,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUGCQuery {
                k_EUGCQuery_RankedByVote,
                        k_EUGCQuery_RankedByPublicationDate,
                        k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
                        k_EUGCQuery_RankedByTrend,
                        k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
                        k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
                        k_EUGCQuery_RankedByNumTimesReported,
                        k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
                        k_EUGCQuery_NotYetRated,
                        k_EUGCQuery_RankedByTotalVotesAsc,
                        k_EUGCQuery_RankedByVotesUp,
                        k_EUGCQuery_RankedByTextSearch,
                        k_EUGCQuery_RankedByTotalUniqueSubscriptions,
                        k_EUGCQuery_RankedByPlaytimeTrend,
                        k_EUGCQuery_RankedByTotalPlaytime,
                        k_EUGCQuery_RankedByAveragePlaytimeTrend,
                        k_EUGCQuery_RankedByLifetimeAveragePlaytime,
                        k_EUGCQuery_RankedByPlaytimeSessionsTrend,
                        k_EUGCQuery_RankedByLifetimePlaytimeSessions,
                }
    
            }
                 namespace  Steamworks {
              public enum  EItemUpdateStatus {
                k_EItemUpdateStatusInvalid,
                        k_EItemUpdateStatusPreparingConfig,
                        k_EItemUpdateStatusPreparingContent,
                        k_EItemUpdateStatusUploadingContent,
                        k_EItemUpdateStatusUploadingPreviewFile,
                        k_EItemUpdateStatusCommittingChanges,
                }
    
            }
                 namespace  Steamworks {
              public enum  EItemState {
                k_EItemStateNone,
                        k_EItemStateSubscribed,
                        k_EItemStateLegacyItem,
                        k_EItemStateInstalled,
                        k_EItemStateNeedsUpdate,
                        k_EItemStateDownloading,
                        k_EItemStateDownloadPending,
                }
    
            }
                 namespace  Steamworks {
              public enum  EItemStatistic {
                k_EItemStatistic_NumSubscriptions,
                        k_EItemStatistic_NumFavorites,
                        k_EItemStatistic_NumFollowers,
                        k_EItemStatistic_NumUniqueSubscriptions,
                        k_EItemStatistic_NumUniqueFavorites,
                        k_EItemStatistic_NumUniqueFollowers,
                        k_EItemStatistic_NumUniqueWebsiteViews,
                        k_EItemStatistic_ReportScore,
                        k_EItemStatistic_NumSecondsPlayed,
                        k_EItemStatistic_NumPlaytimeSessions,
                        k_EItemStatistic_NumComments,
                        k_EItemStatistic_NumSecondsPlayedDuringTimePeriod,
                        k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod,
                }
    
            }
                 namespace  Steamworks {
              public enum  EItemPreviewType {
                k_EItemPreviewType_Image,
                        k_EItemPreviewType_YouTubeVideo,
                        k_EItemPreviewType_Sketchfab,
                        k_EItemPreviewType_EnvironmentMap_HorizontalCross,
                        k_EItemPreviewType_EnvironmentMap_LatLong,
                        k_EItemPreviewType_ReservedMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EFailureType {
                k_EFailureFlushedCallbackQueue,
                        k_EFailurePipeFail,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELeaderboardDataRequest {
                k_ELeaderboardDataRequestGlobal,
                        k_ELeaderboardDataRequestGlobalAroundUser,
                        k_ELeaderboardDataRequestFriends,
                        k_ELeaderboardDataRequestUsers,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELeaderboardSortMethod {
                k_ELeaderboardSortMethodNone,
                        k_ELeaderboardSortMethodAscending,
                        k_ELeaderboardSortMethodDescending,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELeaderboardDisplayType {
                k_ELeaderboardDisplayTypeNone,
                        k_ELeaderboardDisplayTypeNumeric,
                        k_ELeaderboardDisplayTypeTimeSeconds,
                        k_ELeaderboardDisplayTypeTimeMilliSeconds,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELeaderboardUploadScoreMethod {
                k_ELeaderboardUploadScoreMethodNone,
                        k_ELeaderboardUploadScoreMethodKeepBest,
                        k_ELeaderboardUploadScoreMethodForceUpdate,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamAPICallFailure {
                k_ESteamAPICallFailureSteamGone,
                        k_ESteamAPICallFailureNetworkFailure,
                        k_ESteamAPICallFailureInvalidHandle,
                        k_ESteamAPICallFailureMismatchedCallback,
                        k_ESteamAPICallFailureNone,
                }
    
            }
                 namespace  Steamworks {
              public enum  EGamepadTextInputMode {
                k_EGamepadTextInputModeNormal,
                        k_EGamepadTextInputModePassword,
                }
    
            }
                 namespace  Steamworks {
              public enum  EGamepadTextInputLineMode {
                k_EGamepadTextInputLineModeSingleLine,
                        k_EGamepadTextInputLineModeMultipleLines,
                }
    
            }
                 namespace  Steamworks {
              public enum  ETextFilteringContext {
                k_ETextFilteringContextUnknown,
                        k_ETextFilteringContextGameContent,
                        k_ETextFilteringContextChat,
                        k_ETextFilteringContextName,
                }
    
            }
                 namespace  Steamworks {
              public enum  ECheckFileSignature {
                k_ECheckFileSignatureInvalidSignature,
                        k_ECheckFileSignatureValidSignature,
                        k_ECheckFileSignatureFileNotFound,
                        k_ECheckFileSignatureNoSignaturesFoundForThisApp,
                        k_ECheckFileSignatureNoSignaturesFoundForThisFile,
                }
    
            }
                 namespace  Steamworks {
              public enum  EMatchMakingServerResponse {
                eServerResponded,
                        eServerFailedToRespond,
                        eNoServersListedOnMasterServer,
                }
    
            }
                 namespace  Steamworks {
              public enum  EServerMode {
                eServerModeInvalid,
                        eServerModeNoAuthentication,
                        eServerModeAuthentication,
                        eServerModeAuthenticationAndSecure,
                }
    
            }
                 namespace  Steamworks {
              public enum  EResult {
                k_EResultNone,
                        k_EResultOK,
                        k_EResultFail,
                        k_EResultNoConnection,
                        k_EResultInvalidPassword,
                        k_EResultLoggedInElsewhere,
                        k_EResultInvalidProtocolVer,
                        k_EResultInvalidParam,
                        k_EResultFileNotFound,
                        k_EResultBusy,
                        k_EResultInvalidState,
                        k_EResultInvalidName,
                        k_EResultInvalidEmail,
                        k_EResultDuplicateName,
                        k_EResultAccessDenied,
                        k_EResultTimeout,
                        k_EResultBanned,
                        k_EResultAccountNotFound,
                        k_EResultInvalidSteamID,
                        k_EResultServiceUnavailable,
                        k_EResultNotLoggedOn,
                        k_EResultPending,
                        k_EResultEncryptionFailure,
                        k_EResultInsufficientPrivilege,
                        k_EResultLimitExceeded,
                        k_EResultRevoked,
                        k_EResultExpired,
                        k_EResultAlreadyRedeemed,
                        k_EResultDuplicateRequest,
                        k_EResultAlreadyOwned,
                        k_EResultIPNotFound,
                        k_EResultPersistFailed,
                        k_EResultLockingFailed,
                        k_EResultLogonSessionReplaced,
                        k_EResultConnectFailed,
                        k_EResultHandshakeFailed,
                        k_EResultIOFailure,
                        k_EResultRemoteDisconnect,
                        k_EResultShoppingCartNotFound,
                        k_EResultBlocked,
                        k_EResultIgnored,
                        k_EResultNoMatch,
                        k_EResultAccountDisabled,
                        k_EResultServiceReadOnly,
                        k_EResultAccountNotFeatured,
                        k_EResultAdministratorOK,
                        k_EResultContentVersion,
                        k_EResultTryAnotherCM,
                        k_EResultPasswordRequiredToKickSession,
                        k_EResultAlreadyLoggedInElsewhere,
                        k_EResultSuspended,
                        k_EResultCancelled,
                        k_EResultDataCorruption,
                        k_EResultDiskFull,
                        k_EResultRemoteCallFailed,
                        k_EResultPasswordUnset,
                        k_EResultExternalAccountUnlinked,
                        k_EResultPSNTicketInvalid,
                        k_EResultExternalAccountAlreadyLinked,
                        k_EResultRemoteFileConflict,
                        k_EResultIllegalPassword,
                        k_EResultSameAsPreviousValue,
                        k_EResultAccountLogonDenied,
                        k_EResultCannotUseOldPassword,
                        k_EResultInvalidLoginAuthCode,
                        k_EResultAccountLogonDeniedNoMail,
                        k_EResultHardwareNotCapableOfIPT,
                        k_EResultIPTInitError,
                        k_EResultParentalControlRestricted,
                        k_EResultFacebookQueryError,
                        k_EResultExpiredLoginAuthCode,
                        k_EResultIPLoginRestrictionFailed,
                        k_EResultAccountLockedDown,
                        k_EResultAccountLogonDeniedVerifiedEmailRequired,
                        k_EResultNoMatchingURL,
                        k_EResultBadResponse,
                        k_EResultRequirePasswordReEntry,
                        k_EResultValueOutOfRange,
                        k_EResultUnexpectedError,
                        k_EResultDisabled,
                        k_EResultInvalidCEGSubmission,
                        k_EResultRestrictedDevice,
                        k_EResultRegionLocked,
                        k_EResultRateLimitExceeded,
                        k_EResultAccountLoginDeniedNeedTwoFactor,
                        k_EResultItemDeleted,
                        k_EResultAccountLoginDeniedThrottle,
                        k_EResultTwoFactorCodeMismatch,
                        k_EResultTwoFactorActivationCodeMismatch,
                        k_EResultAccountAssociatedToMultiplePartners,
                        k_EResultNotModified,
                        k_EResultNoMobileDevice,
                        k_EResultTimeNotSynced,
                        k_EResultSmsCodeFailed,
                        k_EResultAccountLimitExceeded,
                        k_EResultAccountActivityLimitExceeded,
                        k_EResultPhoneActivityLimitExceeded,
                        k_EResultRefundToWallet,
                        k_EResultEmailSendFailure,
                        k_EResultNotSettled,
                        k_EResultNeedCaptcha,
                        k_EResultGSLTDenied,
                        k_EResultGSOwnerDenied,
                        k_EResultInvalidItemType,
                        k_EResultIPBanned,
                        k_EResultGSLTExpired,
                        k_EResultInsufficientFunds,
                        k_EResultTooManyPending,
                        k_EResultNoSiteLicensesFound,
                        k_EResultWGNetworkSendExceeded,
                        k_EResultAccountNotFriends,
                        k_EResultLimitedUserAccount,
                        k_EResultCantRemoveItem,
                        k_EResultAccountDeleted,
                        k_EResultExistingUserCancelledLicense,
                        k_EResultCommunityCooldown,
                        k_EResultNoLauncherSpecified,
                        k_EResultMustAgreeToSSA,
                        k_EResultLauncherMigrated,
                }
    
            }
                 namespace  Steamworks {
              public enum  EVoiceResult {
                k_EVoiceResultOK,
                        k_EVoiceResultNotInitialized,
                        k_EVoiceResultNotRecording,
                        k_EVoiceResultNoData,
                        k_EVoiceResultBufferTooSmall,
                        k_EVoiceResultDataCorrupted,
                        k_EVoiceResultRestricted,
                        k_EVoiceResultUnsupportedCodec,
                        k_EVoiceResultReceiverOutOfDate,
                        k_EVoiceResultReceiverDidNotAnswer,
                }
    
            }
                 namespace  Steamworks {
              public enum  EDenyReason {
                k_EDenyInvalid,
                        k_EDenyInvalidVersion,
                        k_EDenyGeneric,
                        k_EDenyNotLoggedOn,
                        k_EDenyNoLicense,
                        k_EDenyCheater,
                        k_EDenyLoggedInElseWhere,
                        k_EDenyUnknownText,
                        k_EDenyIncompatibleAnticheat,
                        k_EDenyMemoryCorruption,
                        k_EDenyIncompatibleSoftware,
                        k_EDenySteamConnectionLost,
                        k_EDenySteamConnectionError,
                        k_EDenySteamResponseTimedOut,
                        k_EDenySteamValidationStalled,
                        k_EDenySteamOwnerLeftGuestUser,
                }
    
            }
                 namespace  Steamworks {
              public enum  EBeginAuthSessionResult {
                k_EBeginAuthSessionResultOK,
                        k_EBeginAuthSessionResultInvalidTicket,
                        k_EBeginAuthSessionResultDuplicateRequest,
                        k_EBeginAuthSessionResultInvalidVersion,
                        k_EBeginAuthSessionResultGameMismatch,
                        k_EBeginAuthSessionResultExpiredTicket,
                }
    
            }
                 namespace  Steamworks {
              public enum  EAuthSessionResponse {
                k_EAuthSessionResponseOK,
                        k_EAuthSessionResponseUserNotConnectedToSteam,
                        k_EAuthSessionResponseNoLicenseOrExpired,
                        k_EAuthSessionResponseVACBanned,
                        k_EAuthSessionResponseLoggedInElseWhere,
                        k_EAuthSessionResponseVACCheckTimedOut,
                        k_EAuthSessionResponseAuthTicketCanceled,
                        k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
                        k_EAuthSessionResponseAuthTicketInvalid,
                        k_EAuthSessionResponsePublisherIssuedBan,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUserHasLicenseForAppResult {
                k_EUserHasLicenseResultHasLicense,
                        k_EUserHasLicenseResultDoesNotHaveLicense,
                        k_EUserHasLicenseResultNoAuth,
                }
    
            }
                 namespace  Steamworks {
              public enum  EAccountType {
                k_EAccountTypeInvalid,
                        k_EAccountTypeIndividual,
                        k_EAccountTypeMultiseat,
                        k_EAccountTypeGameServer,
                        k_EAccountTypeAnonGameServer,
                        k_EAccountTypePending,
                        k_EAccountTypeContentServer,
                        k_EAccountTypeClan,
                        k_EAccountTypeChat,
                        k_EAccountTypeConsoleUser,
                        k_EAccountTypeAnonUser,
                        k_EAccountTypeMax,
                }
    
            }
                 namespace  Steamworks {
              public enum  EAppReleaseState {
                k_EAppReleaseState_Unknown,
                        k_EAppReleaseState_Unavailable,
                        k_EAppReleaseState_Prerelease,
                        k_EAppReleaseState_PreloadOnly,
                        k_EAppReleaseState_Released,
                }
    
            }
                 namespace  Steamworks {
              public enum  EAppOwnershipFlags {
                k_EAppOwnershipFlags_None,
                        k_EAppOwnershipFlags_OwnsLicense,
                        k_EAppOwnershipFlags_FreeLicense,
                        k_EAppOwnershipFlags_RegionRestricted,
                        k_EAppOwnershipFlags_LowViolence,
                        k_EAppOwnershipFlags_InvalidPlatform,
                        k_EAppOwnershipFlags_SharedLicense,
                        k_EAppOwnershipFlags_FreeWeekend,
                        k_EAppOwnershipFlags_RetailLicense,
                        k_EAppOwnershipFlags_LicenseLocked,
                        k_EAppOwnershipFlags_LicensePending,
                        k_EAppOwnershipFlags_LicenseExpired,
                        k_EAppOwnershipFlags_LicensePermanent,
                        k_EAppOwnershipFlags_LicenseRecurring,
                        k_EAppOwnershipFlags_LicenseCanceled,
                        k_EAppOwnershipFlags_AutoGrant,
                        k_EAppOwnershipFlags_PendingGift,
                        k_EAppOwnershipFlags_RentalNotActivated,
                        k_EAppOwnershipFlags_Rental,
                        k_EAppOwnershipFlags_SiteLicense,
                        k_EAppOwnershipFlags_LegacyFreeSub,
                        k_EAppOwnershipFlags_InvalidOSType,
                        k_EAppOwnershipFlags_TimedTrial,
                }
    
            }
                 namespace  Steamworks {
              public enum  EAppType {
                k_EAppType_Invalid,
                        k_EAppType_Game,
                        k_EAppType_Application,
                        k_EAppType_Tool,
                        k_EAppType_Demo,
                        k_EAppType_Media_DEPRECATED,
                        k_EAppType_DLC,
                        k_EAppType_Guide,
                        k_EAppType_Driver,
                        k_EAppType_Config,
                        k_EAppType_Hardware,
                        k_EAppType_Franchise,
                        k_EAppType_Video,
                        k_EAppType_Plugin,
                        k_EAppType_MusicAlbum,
                        k_EAppType_Series,
                        k_EAppType_Comic_UNUSED,
                        k_EAppType_Beta,
                        k_EAppType_Shortcut,
                        k_EAppType_DepotOnly_DEPRECATED,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamUserStatType {
                k_ESteamUserStatTypeINVALID,
                        k_ESteamUserStatTypeINT,
                        k_ESteamUserStatTypeFLOAT,
                        k_ESteamUserStatTypeAVGRATE,
                        k_ESteamUserStatTypeACHIEVEMENTS,
                        k_ESteamUserStatTypeGROUPACHIEVEMENTS,
                        k_ESteamUserStatTypeMAX,
                }
    
            }
                 namespace  Steamworks {
              public enum  EChatEntryType {
                k_EChatEntryTypeInvalid,
                        k_EChatEntryTypeChatMsg,
                        k_EChatEntryTypeTyping,
                        k_EChatEntryTypeInviteGame,
                        k_EChatEntryTypeEmote,
                        k_EChatEntryTypeLeftConversation,
                        k_EChatEntryTypeEntered,
                        k_EChatEntryTypeWasKicked,
                        k_EChatEntryTypeWasBanned,
                        k_EChatEntryTypeDisconnected,
                        k_EChatEntryTypeHistoricalChat,
                        k_EChatEntryTypeLinkBlocked,
                }
    
            }
                 namespace  Steamworks {
              public enum  EChatRoomEnterResponse {
                k_EChatRoomEnterResponseSuccess,
                        k_EChatRoomEnterResponseDoesntExist,
                        k_EChatRoomEnterResponseNotAllowed,
                        k_EChatRoomEnterResponseFull,
                        k_EChatRoomEnterResponseError,
                        k_EChatRoomEnterResponseBanned,
                        k_EChatRoomEnterResponseLimited,
                        k_EChatRoomEnterResponseClanDisabled,
                        k_EChatRoomEnterResponseCommunityBan,
                        k_EChatRoomEnterResponseMemberBlockedYou,
                        k_EChatRoomEnterResponseYouBlockedMember,
                        k_EChatRoomEnterResponseRatelimitExceeded,
                }
    
            }
                 namespace  Steamworks {
              public enum  EChatSteamIDInstanceFlags {
                k_EChatAccountInstanceMask,
                        k_EChatInstanceFlagMMSLobby,
                        k_EChatInstanceFlagLobby,
                        k_EChatInstanceFlagClan,
                }
    
            }
                 namespace  Steamworks {
              public enum  EMarketingMessageFlags {
                k_EMarketingMessageFlagsNone,
                        k_EMarketingMessageFlagsHighPriority,
                        k_EMarketingMessageFlagsPlatformWindows,
                        k_EMarketingMessageFlagsPlatformMac,
                        k_EMarketingMessageFlagsPlatformLinux,
                        k_EMarketingMessageFlagsPlatformRestrictions,
                }
    
            }
                 namespace  Steamworks {
              public enum  ENotificationPosition {
                k_EPositionTopLeft,
                        k_EPositionTopRight,
                        k_EPositionBottomLeft,
                        k_EPositionBottomRight,
                }
    
            }
                 namespace  Steamworks {
              public enum  EBroadcastUploadResult {
                k_EBroadcastUploadResultNone,
                        k_EBroadcastUploadResultOK,
                        k_EBroadcastUploadResultInitFailed,
                        k_EBroadcastUploadResultFrameFailed,
                        k_EBroadcastUploadResultTimeout,
                        k_EBroadcastUploadResultBandwidthExceeded,
                        k_EBroadcastUploadResultLowFPS,
                        k_EBroadcastUploadResultMissingKeyFrames,
                        k_EBroadcastUploadResultNoConnection,
                        k_EBroadcastUploadResultRelayFailed,
                        k_EBroadcastUploadResultSettingsChanged,
                        k_EBroadcastUploadResultMissingAudio,
                        k_EBroadcastUploadResultTooFarBehind,
                        k_EBroadcastUploadResultTranscodeBehind,
                        k_EBroadcastUploadResultNotAllowedToPlay,
                        k_EBroadcastUploadResultBusy,
                        k_EBroadcastUploadResultBanned,
                        k_EBroadcastUploadResultAlreadyActive,
                        k_EBroadcastUploadResultForcedOff,
                        k_EBroadcastUploadResultAudioBehind,
                        k_EBroadcastUploadResultShutdown,
                        k_EBroadcastUploadResultDisconnect,
                        k_EBroadcastUploadResultVideoInitFailed,
                        k_EBroadcastUploadResultAudioInitFailed,
                }
    
            }
                 namespace  Steamworks {
              public enum  ELaunchOptionType {
                k_ELaunchOptionType_None,
                        k_ELaunchOptionType_Default,
                        k_ELaunchOptionType_SafeMode,
                        k_ELaunchOptionType_Multiplayer,
                        k_ELaunchOptionType_Config,
                        k_ELaunchOptionType_OpenVR,
                        k_ELaunchOptionType_Server,
                        k_ELaunchOptionType_Editor,
                        k_ELaunchOptionType_Manual,
                        k_ELaunchOptionType_Benchmark,
                        k_ELaunchOptionType_Option1,
                        k_ELaunchOptionType_Option2,
                        k_ELaunchOptionType_Option3,
                        k_ELaunchOptionType_OculusVR,
                        k_ELaunchOptionType_OpenVROverlay,
                        k_ELaunchOptionType_OSVR,
                        k_ELaunchOptionType_Dialog,
                }
    
            }
                 namespace  Steamworks {
              public enum  EVRHMDType {
                k_eEVRHMDType_Unknown,
                        k_eEVRHMDType_HTC_Dev,
                        k_eEVRHMDType_HTC_VivePre,
                        k_eEVRHMDType_HTC_Vive,
                        k_eEVRHMDType_HTC_VivePro,
                        k_eEVRHMDType_HTC_ViveCosmos,
                        k_eEVRHMDType_HTC_Unknown,
                        k_eEVRHMDType_Oculus_DK1,
                        k_eEVRHMDType_Oculus_DK2,
                        k_eEVRHMDType_Oculus_Rift,
                        k_eEVRHMDType_Oculus_RiftS,
                        k_eEVRHMDType_Oculus_Quest,
                        k_eEVRHMDType_Oculus_Unknown,
                        k_eEVRHMDType_Acer_Unknown,
                        k_eEVRHMDType_Acer_WindowsMR,
                        k_eEVRHMDType_Dell_Unknown,
                        k_eEVRHMDType_Dell_Visor,
                        k_eEVRHMDType_Lenovo_Unknown,
                        k_eEVRHMDType_Lenovo_Explorer,
                        k_eEVRHMDType_HP_Unknown,
                        k_eEVRHMDType_HP_WindowsMR,
                        k_eEVRHMDType_HP_Reverb,
                        k_eEVRHMDType_Samsung_Unknown,
                        k_eEVRHMDType_Samsung_Odyssey,
                        k_eEVRHMDType_Unannounced_Unknown,
                        k_eEVRHMDType_Unannounced_WindowsMR,
                        k_eEVRHMDType_vridge,
                        k_eEVRHMDType_Huawei_Unknown,
                        k_eEVRHMDType_Huawei_VR2,
                        k_eEVRHMDType_Huawei_EndOfRange,
                        k_eEVRHmdType_Valve_Unknown,
                        k_eEVRHmdType_Valve_Index,
                        k_eEVRHMDType_HP_ReverbG2,
                        k_eEVRHMDType_None,
                }
    
            }
                 namespace  Steamworks {
              public enum  EMarketNotAllowedReasonFlags {
                k_EMarketNotAllowedReason_None,
                        k_EMarketNotAllowedReason_TemporaryFailure,
                        k_EMarketNotAllowedReason_AccountDisabled,
                        k_EMarketNotAllowedReason_AccountLockedDown,
                        k_EMarketNotAllowedReason_AccountLimited,
                        k_EMarketNotAllowedReason_TradeBanned,
                        k_EMarketNotAllowedReason_AccountNotTrusted,
                        k_EMarketNotAllowedReason_SteamGuardNotEnabled,
                        k_EMarketNotAllowedReason_SteamGuardOnlyRecentlyEnabled,
                        k_EMarketNotAllowedReason_RecentPasswordReset,
                        k_EMarketNotAllowedReason_NewPaymentMethod,
                        k_EMarketNotAllowedReason_InvalidCookie,
                        k_EMarketNotAllowedReason_UsingNewDevice,
                        k_EMarketNotAllowedReason_RecentSelfRefund,
                        k_EMarketNotAllowedReason_NewPaymentMethodCannotBeVerified,
                        k_EMarketNotAllowedReason_NoRecentPurchases,
                        k_EMarketNotAllowedReason_AcceptedWalletGift,
                }
    
            }
                 namespace  Steamworks {
              public enum  EDurationControlProgress {
                k_EDurationControlProgress_Full,
                        k_EDurationControlProgress_Half,
                        k_EDurationControlProgress_None,
                        k_EDurationControl_ExitSoon_3h,
                        k_EDurationControl_ExitSoon_5h,
                        k_EDurationControl_ExitSoon_Night,
                }
    
            }
                 namespace  Steamworks {
              public enum  EDurationControlNotification {
                k_EDurationControlNotification_None,
                        k_EDurationControlNotification_1Hour,
                        k_EDurationControlNotification_3Hours,
                        k_EDurationControlNotification_HalfProgress,
                        k_EDurationControlNotification_NoProgress,
                        k_EDurationControlNotification_ExitSoon_3h,
                        k_EDurationControlNotification_ExitSoon_5h,
                        k_EDurationControlNotification_ExitSoon_Night,
                }
    
            }
                 namespace  Steamworks {
              public enum  EDurationControlOnlineState {
                k_EDurationControlOnlineState_Invalid,
                        k_EDurationControlOnlineState_Offline,
                        k_EDurationControlOnlineState_Online,
                        k_EDurationControlOnlineState_OnlineHighPri,
                }
    
            }
                 namespace  Steamworks {
              public enum  EGameSearchErrorCode_t {
                k_EGameSearchErrorCode_OK,
                        k_EGameSearchErrorCode_Failed_Search_Already_In_Progress,
                        k_EGameSearchErrorCode_Failed_No_Search_In_Progress,
                        k_EGameSearchErrorCode_Failed_Not_Lobby_Leader,
                        k_EGameSearchErrorCode_Failed_No_Host_Available,
                        k_EGameSearchErrorCode_Failed_Search_Params_Invalid,
                        k_EGameSearchErrorCode_Failed_Offline,
                        k_EGameSearchErrorCode_Failed_NotAuthorized,
                        k_EGameSearchErrorCode_Failed_Unknown_Error,
                }
    
            }
                 namespace  Steamworks {
              public enum  EPlayerResult_t {
                k_EPlayerResultFailedToConnect,
                        k_EPlayerResultAbandoned,
                        k_EPlayerResultKicked,
                        k_EPlayerResultIncomplete,
                        k_EPlayerResultCompleted,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamIPv6ConnectivityProtocol {
                k_ESteamIPv6ConnectivityProtocol_Invalid,
                        k_ESteamIPv6ConnectivityProtocol_HTTP,
                        k_ESteamIPv6ConnectivityProtocol_UDP,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamIPv6ConnectivityState {
                k_ESteamIPv6ConnectivityState_Unknown,
                        k_ESteamIPv6ConnectivityState_Good,
                        k_ESteamIPv6ConnectivityState_Bad,
                }
    
            }
                 namespace  Steamworks {
              public enum  EHTTPMethod {
                k_EHTTPMethodInvalid,
                        k_EHTTPMethodGET,
                        k_EHTTPMethodHEAD,
                        k_EHTTPMethodPOST,
                        k_EHTTPMethodPUT,
                        k_EHTTPMethodDELETE,
                        k_EHTTPMethodOPTIONS,
                        k_EHTTPMethodPATCH,
                }
    
            }
                 namespace  Steamworks {
              public enum  EHTTPStatusCode {
                k_EHTTPStatusCodeInvalid,
                        k_EHTTPStatusCode100Continue,
                        k_EHTTPStatusCode101SwitchingProtocols,
                        k_EHTTPStatusCode200OK,
                        k_EHTTPStatusCode201Created,
                        k_EHTTPStatusCode202Accepted,
                        k_EHTTPStatusCode203NonAuthoritative,
                        k_EHTTPStatusCode204NoContent,
                        k_EHTTPStatusCode205ResetContent,
                        k_EHTTPStatusCode206PartialContent,
                        k_EHTTPStatusCode300MultipleChoices,
                        k_EHTTPStatusCode301MovedPermanently,
                        k_EHTTPStatusCode302Found,
                        k_EHTTPStatusCode303SeeOther,
                        k_EHTTPStatusCode304NotModified,
                        k_EHTTPStatusCode305UseProxy,
                        k_EHTTPStatusCode307TemporaryRedirect,
                        k_EHTTPStatusCode400BadRequest,
                        k_EHTTPStatusCode401Unauthorized,
                        k_EHTTPStatusCode402PaymentRequired,
                        k_EHTTPStatusCode403Forbidden,
                        k_EHTTPStatusCode404NotFound,
                        k_EHTTPStatusCode405MethodNotAllowed,
                        k_EHTTPStatusCode406NotAcceptable,
                        k_EHTTPStatusCode407ProxyAuthRequired,
                        k_EHTTPStatusCode408RequestTimeout,
                        k_EHTTPStatusCode409Conflict,
                        k_EHTTPStatusCode410Gone,
                        k_EHTTPStatusCode411LengthRequired,
                        k_EHTTPStatusCode412PreconditionFailed,
                        k_EHTTPStatusCode413RequestEntityTooLarge,
                        k_EHTTPStatusCode414RequestURITooLong,
                        k_EHTTPStatusCode415UnsupportedMediaType,
                        k_EHTTPStatusCode416RequestedRangeNotSatisfiable,
                        k_EHTTPStatusCode417ExpectationFailed,
                        k_EHTTPStatusCode4xxUnknown,
                        k_EHTTPStatusCode429TooManyRequests,
                        k_EHTTPStatusCode444ConnectionClosed,
                        k_EHTTPStatusCode500InternalServerError,
                        k_EHTTPStatusCode501NotImplemented,
                        k_EHTTPStatusCode502BadGateway,
                        k_EHTTPStatusCode503ServiceUnavailable,
                        k_EHTTPStatusCode504GatewayTimeout,
                        k_EHTTPStatusCode505HTTPVersionNotSupported,
                        k_EHTTPStatusCode5xxUnknown,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingAvailability {
                k_ESteamNetworkingAvailability_Unknown,
                        k_ESteamNetworkingAvailability_NeverTried,
                        k_ESteamNetworkingAvailability_Waiting,
                        k_ESteamNetworkingAvailability_Attempting,
                        k_ESteamNetworkingAvailability_Current,
                        k_ESteamNetworkingAvailability__Force32bit,
                        k_ESteamNetworkingAvailability_CannotTry,
                        k_ESteamNetworkingAvailability_Failed,
                        k_ESteamNetworkingAvailability_Previously,
                        k_ESteamNetworkingAvailability_Retrying,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingIdentityType {
                k_ESteamNetworkingIdentityType_Invalid,
                        k_ESteamNetworkingIdentityType_IPAddress,
                        k_ESteamNetworkingIdentityType_GenericString,
                        k_ESteamNetworkingIdentityType_GenericBytes,
                        k_ESteamNetworkingIdentityType_UnknownType,
                        k_ESteamNetworkingIdentityType_SteamID,
                        k_ESteamNetworkingIdentityType__Force32bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingConnectionState {
                k_ESteamNetworkingConnectionState_None,
                        k_ESteamNetworkingConnectionState_Connecting,
                        k_ESteamNetworkingConnectionState_FindingRoute,
                        k_ESteamNetworkingConnectionState_Connected,
                        k_ESteamNetworkingConnectionState_ClosedByPeer,
                        k_ESteamNetworkingConnectionState_ProblemDetectedLocally,
                        k_ESteamNetworkingConnectionState__Force32Bit,
                        k_ESteamNetworkingConnectionState_Dead,
                        k_ESteamNetworkingConnectionState_Linger,
                        k_ESteamNetworkingConnectionState_FinWait,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetConnectionEnd {
                k_ESteamNetConnectionEnd_Invalid,
                        k_ESteamNetConnectionEnd_App_Min,
                        k_ESteamNetConnectionEnd_App_Generic,
                        k_ESteamNetConnectionEnd_App_Max,
                        k_ESteamNetConnectionEnd_AppException_Min,
                        k_ESteamNetConnectionEnd_AppException_Generic,
                        k_ESteamNetConnectionEnd_AppException_Max,
                        k_ESteamNetConnectionEnd_Local_Min,
                        k_ESteamNetConnectionEnd_Local_OfflineMode,
                        k_ESteamNetConnectionEnd_Local_ManyRelayConnectivity,
                        k_ESteamNetConnectionEnd_Local_HostedServerPrimaryRelay,
                        k_ESteamNetConnectionEnd_Local_NetworkConfig,
                        k_ESteamNetConnectionEnd_Local_Rights,
                        k_ESteamNetConnectionEnd_Local_P2P_ICE_NoPublicAddresses,
                        k_ESteamNetConnectionEnd_Local_Max,
                        k_ESteamNetConnectionEnd_Remote_Min,
                        k_ESteamNetConnectionEnd_Remote_Timeout,
                        k_ESteamNetConnectionEnd_Remote_BadCrypt,
                        k_ESteamNetConnectionEnd_Remote_BadCert,
                        k_ESteamNetConnectionEnd_Remote_NotLoggedIn,
                        k_ESteamNetConnectionEnd_Remote_NotRunningApp,
                        k_ESteamNetConnectionEnd_Remote_BadProtocolVersion,
                        k_ESteamNetConnectionEnd_Remote_P2P_ICE_NoPublicAddresses,
                        k_ESteamNetConnectionEnd_Remote_Max,
                        k_ESteamNetConnectionEnd_Misc_Min,
                        k_ESteamNetConnectionEnd_Misc_Generic,
                        k_ESteamNetConnectionEnd_Misc_InternalError,
                        k_ESteamNetConnectionEnd_Misc_Timeout,
                        k_ESteamNetConnectionEnd_Misc_RelayConnectivity,
                        k_ESteamNetConnectionEnd_Misc_SteamConnectivity,
                        k_ESteamNetConnectionEnd_Misc_NoRelaySessionsToClient,
                        k_ESteamNetConnectionEnd_Misc_P2P_Rendezvous,
                        k_ESteamNetConnectionEnd_Misc_P2P_NAT_Firewall,
                        k_ESteamNetConnectionEnd_Misc_PeerSentNoConnection,
                        k_ESteamNetConnectionEnd_Misc_Max,
                        k_ESteamNetConnectionEnd__Force32Bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingConfigScope {
                k_ESteamNetworkingConfig_Global,
                        k_ESteamNetworkingConfig_SocketsInterface,
                        k_ESteamNetworkingConfig_ListenSocket,
                        k_ESteamNetworkingConfig_Connection,
                        k_ESteamNetworkingConfigScope__Force32Bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingConfigDataType {
                k_ESteamNetworkingConfig_Int32,
                        k_ESteamNetworkingConfig_Int64,
                        k_ESteamNetworkingConfig_Float,
                        k_ESteamNetworkingConfig_String,
                        k_ESteamNetworkingConfig_Ptr,
                        k_ESteamNetworkingConfigDataType__Force32Bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingConfigValue {
                k_ESteamNetworkingConfig_Invalid,
                        k_ESteamNetworkingConfig_FakePacketLoss_Send,
                        k_ESteamNetworkingConfig_FakePacketLoss_Recv,
                        k_ESteamNetworkingConfig_FakePacketLag_Send,
                        k_ESteamNetworkingConfig_FakePacketLag_Recv,
                        k_ESteamNetworkingConfig_FakePacketReorder_Send,
                        k_ESteamNetworkingConfig_FakePacketReorder_Recv,
                        k_ESteamNetworkingConfig_FakePacketReorder_Time,
                        k_ESteamNetworkingConfig_SendBufferSize,
                        k_ESteamNetworkingConfig_SendRateMin,
                        k_ESteamNetworkingConfig_SendRateMax,
                        k_ESteamNetworkingConfig_NagleTime,
                        k_ESteamNetworkingConfig_LogLevel_AckRTT,
                        k_ESteamNetworkingConfig_LogLevel_PacketDecode,
                        k_ESteamNetworkingConfig_LogLevel_Message,
                        k_ESteamNetworkingConfig_LogLevel_PacketGaps,
                        k_ESteamNetworkingConfig_LogLevel_P2PRendezvous,
                        k_ESteamNetworkingConfig_LogLevel_SDRRelayPings,
                        k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFailInitial,
                        k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFail,
                        k_ESteamNetworkingConfig_SDRClient_MinPingsBeforePingAccurate,
                        k_ESteamNetworkingConfig_SDRClient_SingleSocket,
                        k_ESteamNetworkingConfig_IP_AllowWithoutAuth,
                        k_ESteamNetworkingConfig_TimeoutInitial,
                        k_ESteamNetworkingConfig_TimeoutConnected,
                        k_ESteamNetworkingConfig_FakePacketDup_Send,
                        k_ESteamNetworkingConfig_FakePacketDup_Recv,
                        k_ESteamNetworkingConfig_FakePacketDup_TimeMax,
                        k_ESteamNetworkingConfig_SDRClient_ForceRelayCluster,
                        k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress,
                        k_ESteamNetworkingConfig_SDRClient_ForceProxyAddr,
                        k_ESteamNetworkingConfig_MTU_PacketSize,
                        k_ESteamNetworkingConfig_MTU_DataSize,
                        k_ESteamNetworkingConfig_Unencrypted,
                        k_ESteamNetworkingConfig_EnumerateDevVars,
                        k_ESteamNetworkingConfig_SDRClient_FakeClusterPing,
                        k_ESteamNetworkingConfig_SymmetricConnect,
                        k_ESteamNetworkingConfig_LocalVirtualPort,
                        k_ESteamNetworkingConfig_P2P_STUN_ServerList,
                        k_ESteamNetworkingConfig_P2P_Transport_ICE_Enable,
                        k_ESteamNetworkingConfig_P2P_Transport_ICE_Penalty,
                        k_ESteamNetworkingConfig_P2P_Transport_SDR_Penalty,
                        k_ESteamNetworkingConfig_Callback_ConnectionStatusChanged,
                        k_ESteamNetworkingConfig_Callback_AuthStatusChanged,
                        k_ESteamNetworkingConfig_Callback_RelayNetworkStatusChanged,
                        k_ESteamNetworkingConfig_Callback_MessagesSessionRequest,
                        k_ESteamNetworkingConfig_Callback_MessagesSessionFailed,
                        k_ESteamNetworkingConfig_Callback_CreateConnectionSignaling,
                        k_ESteamNetworkingConfigValue__Force32Bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingGetConfigValueResult {
                k_ESteamNetworkingGetConfigValue_OK,
                        k_ESteamNetworkingGetConfigValue_OKInherited,
                        k_ESteamNetworkingGetConfigValueResult__Force32Bit,
                        k_ESteamNetworkingGetConfigValue_BufferTooSmall,
                        k_ESteamNetworkingGetConfigValue_BadScopeObj,
                        k_ESteamNetworkingGetConfigValue_BadValue,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamNetworkingSocketsDebugOutputType {
                k_ESteamNetworkingSocketsDebugOutputType_None,
                        k_ESteamNetworkingSocketsDebugOutputType_Bug,
                        k_ESteamNetworkingSocketsDebugOutputType_Error,
                        k_ESteamNetworkingSocketsDebugOutputType_Important,
                        k_ESteamNetworkingSocketsDebugOutputType_Warning,
                        k_ESteamNetworkingSocketsDebugOutputType_Msg,
                        k_ESteamNetworkingSocketsDebugOutputType_Verbose,
                        k_ESteamNetworkingSocketsDebugOutputType_Debug,
                        k_ESteamNetworkingSocketsDebugOutputType_Everything,
                        k_ESteamNetworkingSocketsDebugOutputType__Force32Bit,
                }
    
            }
                 namespace  Steamworks {
              public enum  ESteamIPType {
                k_ESteamIPTypeIPv4,
                        k_ESteamIPTypeIPv6,
                }
    
            }
                 namespace  Steamworks {
              public enum  EUniverse {
                k_EUniverseInvalid,
                        k_EUniversePublic,
                        k_EUniverseBeta,
                        k_EUniverseInternal,
                        k_EUniverseDev,
                        k_EUniverseMax,
                }
    
            }
                 namespace  Steamworks {
              public struct FriendGameInfo_t 
	         {
                            public  Steamworks.CGameID m_gameID;
                                    public  System.UInt32 m_unGameIP;
                                    public  System.UInt16 m_usGamePort;
                                    public  System.UInt16 m_usQueryPort;
                                    public  Steamworks.CSteamID m_steamIDLobby;
                }

            }
                 namespace  Steamworks {
              public struct InputAnalogActionData_t 
	         {
                            public  Steamworks.EInputSourceMode eMode;
                                    public  System.Single x;
                                    public  System.Single y;
                                    public  System.Byte bActive;
                }

            }
                 namespace  Steamworks {
              public struct InputDigitalActionData_t 
	         {
                            public  System.Byte bState;
                                    public  System.Byte bActive;
                }

            }
                 namespace  Steamworks {
              public struct InputMotionData_t 
	         {
                            public  System.Single rotQuatX;
                                    public  System.Single rotQuatY;
                                    public  System.Single rotQuatZ;
                                    public  System.Single rotQuatW;
                                    public  System.Single posAccelX;
                                    public  System.Single posAccelY;
                                    public  System.Single posAccelZ;
                                    public  System.Single rotVelX;
                                    public  System.Single rotVelY;
                                    public  System.Single rotVelZ;
                }

            }
                 namespace  Steamworks {
              public struct SteamItemDetails_t 
	         {
                            public  Steamworks.SteamItemInstanceID_t m_itemId;
                                    public  Steamworks.SteamItemDef_t m_iDefinition;
                                    public  System.UInt16 m_unQuantity;
                                    public  System.UInt16 m_unFlags;
                }

            }
                 namespace  Steamworks {
              public struct SteamPartyBeaconLocation_t 
	         {
                            public  Steamworks.ESteamPartyBeaconLocationType m_eType;
                                    public  System.UInt64 m_ulLocationID;
                }

            }
                 namespace  Steamworks {
              public struct P2PSessionState_t 
	         {
                            public  System.Byte m_bConnectionActive;
                                    public  System.Byte m_bConnecting;
                                    public  System.Byte m_eP2PSessionError;
                                    public  System.Byte m_bUsingRelay;
                                    public  System.Int32 m_nBytesQueuedForSend;
                                    public  System.Int32 m_nPacketsQueuedForSend;
                                    public  System.UInt32 m_nRemoteIP;
                                    public  System.UInt16 m_nRemotePort;
                }

            }
                 namespace  Steamworks {
              public struct SteamParamStringArray_t 
	         {
                            public  System.IntPtr m_ppStrings;
                                    public  System.Int32 m_nNumStrings;
                }

            }
                 namespace  Steamworks {
              public struct SteamUGCDetails_t 
	         {
         public  System.String m_rgchTitle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_pchFileName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_rgchURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.PublishedFileId_t m_nPublishedFileId;
                                    public  Steamworks.EResult m_eResult;
                                    public  Steamworks.EWorkshopFileType m_eFileType;
                                    public  Steamworks.AppId_t m_nCreatorAppID;
                                    public  Steamworks.AppId_t m_nConsumerAppID;
                                    public  System.UInt64 m_ulSteamIDOwner;
                                    public  System.UInt32 m_rtimeCreated;
                                    public  System.UInt32 m_rtimeUpdated;
                                    public  System.UInt32 m_rtimeAddedToUserList;
                                    public  Steamworks.ERemoteStoragePublishedFileVisibility m_eVisibility;
                                    public  System.Boolean m_bBanned;
                                    public  System.Boolean m_bAcceptedForUse;
                                    public  System.Boolean m_bTagsTruncated;
                                    public  Steamworks.UGCHandle_t m_hFile;
                                    public  Steamworks.UGCHandle_t m_hPreviewFile;
                                    public  System.Int32 m_nFileSize;
                                    public  System.Int32 m_nPreviewFileSize;
                                    public  System.UInt32 m_unVotesUp;
                                    public  System.UInt32 m_unVotesDown;
                                    public  System.Single m_flScore;
                                    public  System.UInt32 m_unNumChildren;
                }

            }
                 namespace  Steamworks {
              public struct LeaderboardEntry_t 
	         {
                            public  Steamworks.CSteamID m_steamIDUser;
                                    public  System.Int32 m_nGlobalRank;
                                    public  System.Int32 m_nScore;
                                    public  System.Int32 m_cDetails;
                                    public  Steamworks.UGCHandle_t m_hUGC;
                }

            }
                 namespace  Steamworks {
              public struct MatchMakingKeyValuePair_t 
	         {
                     MatchMakingKeyValuePair_t (System.String strKey, System.String strValue)  {
                throw new System.NotImplementedException();
            }
                            public  System.String m_szKey;
                                    public  System.String m_szValue;
                }

            }
                 namespace  Steamworks {
              public struct CallbackMsg_t 
	         {
                            public  System.Int32 m_hSteamUser;
                                    public  System.Int32 m_iCallback;
                                    public  System.IntPtr m_pubParam;
                                    public  System.Int32 m_cubParam;
                }

            }
                 namespace  Steamworks {
              public struct SteamDatagramGameCoordinatorServerLogin 
	         {
                            public  Steamworks.SteamNetworkingIdentity m_identity;
                                    public  Steamworks.SteamDatagramHostedAddress m_routing;
                                    public  Steamworks.AppId_t m_nAppID;
                                    public  Steamworks.RTime32 m_rtime;
                                    public  System.Int32 m_cbAppData;
                                    public  System.Byte[] m_appData;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetConnectionInfo_t 
	         {
         public  System.String m_szEndDebug
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String m_szConnectionDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  Steamworks.SteamNetworkingIdentity m_identityRemote;
                                    public  System.Int64 m_nUserData;
                                    public  Steamworks.HSteamListenSocket m_hListenSocket;
                                    public  Steamworks.SteamNetworkingIPAddr m_addrRemote;
                                    public  System.UInt16 m__pad1;
                                    public  Steamworks.SteamNetworkingPOPID m_idPOPRemote;
                                    public  Steamworks.SteamNetworkingPOPID m_idPOPRelay;
                                    public  Steamworks.ESteamNetworkingConnectionState m_eState;
                                    public  System.Int32 m_eEndReason;
                                    public  System.UInt32[] reserved;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingQuickConnectionStatus 
	         {
                            public  Steamworks.ESteamNetworkingConnectionState m_eState;
                                    public  System.Int32 m_nPing;
                                    public  System.Single m_flConnectionQualityLocal;
                                    public  System.Single m_flConnectionQualityRemote;
                                    public  System.Single m_flOutPacketsPerSec;
                                    public  System.Single m_flOutBytesPerSec;
                                    public  System.Single m_flInPacketsPerSec;
                                    public  System.Single m_flInBytesPerSec;
                                    public  System.Int32 m_nSendRateBytesPerSecond;
                                    public  System.Int32 m_cbPendingUnreliable;
                                    public  System.Int32 m_cbPendingReliable;
                                    public  System.Int32 m_cbSentUnackedReliable;
                                    public  Steamworks.SteamNetworkingMicroseconds m_usecQueueTime;
                                    public  System.UInt32[] reserved;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkPingLocation_t 
	         {
                            public  System.Byte[] m_data;
                }

            }
                 namespace  Steamworks {
              public abstract class SteamAppList 
	         {
                public static      System.UInt32 GetNumInstalledApps ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetInstalledApps (Steamworks.AppId_t[] pvecAppID, System.UInt32 unMaxAppIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAppName (Steamworks.AppId_t nAppID, out System.String pchName, System.Int32 cchNameMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAppInstallDir (Steamworks.AppId_t nAppID, out System.String pchDirectory, System.Int32 cchNameMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAppBuildId (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamApps 
	         {
                public static      System.Boolean BIsSubscribed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsLowViolence ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsCybercafe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsVACBanned ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetCurrentGameLanguage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetAvailableGameLanguages ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedApp (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsDlcInstalled (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetEarliestPurchaseUnixTime (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedFromFreeWeekend ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDLCCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BGetDLCDataByIndex (System.Int32 iDLC, out Steamworks.AppId_t pAppID, out System.Boolean pbAvailable, out System.String pchName, System.Int32 cchNameBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void InstallDLC (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void UninstallDLC (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestAppProofOfPurchaseKey (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetCurrentBetaName (out System.String pchName, System.Int32 cchNameBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean MarkContentCorrupt (System.Boolean bMissingFilesOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetInstalledDepots (Steamworks.AppId_t appID, Steamworks.DepotId_t[] pvecDepots, System.UInt32 cMaxDepots)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetAppInstallDir (Steamworks.AppId_t appID, out System.String pchFolder, System.UInt32 cchFolderBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsAppInstalled (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetAppOwner ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetLaunchQueryParam (System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetDlcDownloadProgress (Steamworks.AppId_t nAppID, out System.UInt64 punBytesDownloaded, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAppBuildId ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestAllProofOfPurchaseKeys ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetFileDetails (System.String pszFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLaunchCommandLine (out System.String pszCommandLine, System.Int32 cubCommandLine)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedFromFamilySharing ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsTimedTrial (out System.UInt32 punSecondsAllowed, out System.UInt32 punSecondsPlayed)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamClient 
	         {
                public static      Steamworks.HSteamPipe CreateSteamPipe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BReleaseSteamPipe (Steamworks.HSteamPipe hSteamPipe)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser ConnectToGlobalUser (Steamworks.HSteamPipe hSteamPipe)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser CreateLocalUser (out Steamworks.HSteamPipe phSteamPipe, Steamworks.EAccountType eAccountType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReleaseUser (Steamworks.HSteamPipe hSteamPipe, Steamworks.HSteamUser hUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUser (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameServer (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLocalIPBinding (Steamworks.SteamIPAddress_t unIP, System.UInt16 usPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamFriends (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUtils (Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMatchmaking (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMatchmakingServers (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGenericInterface (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUserStats (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameServerStats (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamApps (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamNetworking (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamRemoteStorage (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamScreenshots (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameSearch (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetIPCCallCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetWarningMessageHook (Steamworks.SteamAPIWarningMessageHook_t pFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BShutdownIfAllPipesClosed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamHTTP (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamController (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUGC (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamAppList (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMusic (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMusicRemote (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamHTMLSurface (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamInventory (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamVideo (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamParentalSettings (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamInput (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamParties (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamRemotePlay (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamFriends 
	         {
                public static      System.String GetPersonaName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SetPersonaName (System.String pchPersonaName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EPersonaState GetPersonaState ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendCount (Steamworks.EFriendFlags iFriendFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetFriendByIndex (System.Int32 iFriend, Steamworks.EFriendFlags iFriendFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EFriendRelationship GetFriendRelationship (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EPersonaState GetFriendPersonaState (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFriendPersonaName (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetFriendGamePlayed (Steamworks.CSteamID steamIDFriend, out Steamworks.FriendGameInfo_t pFriendGameInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFriendPersonaNameHistory (Steamworks.CSteamID steamIDFriend, System.Int32 iPersonaName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendSteamLevel (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetPlayerNickname (Steamworks.CSteamID steamIDPlayer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendsGroupCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.FriendsGroupID_t GetFriendsGroupIDByIndex (System.Int32 iFG)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFriendsGroupName (Steamworks.FriendsGroupID_t friendsGroupID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendsGroupMembersCount (Steamworks.FriendsGroupID_t friendsGroupID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetFriendsGroupMembersList (Steamworks.FriendsGroupID_t friendsGroupID, Steamworks.CSteamID[] pOutSteamIDMembers, System.Int32 nMembersCount)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean HasFriend (Steamworks.CSteamID steamIDFriend, Steamworks.EFriendFlags iFriendFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetClanCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetClanByIndex (System.Int32 iClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetClanName (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetClanTag (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetClanActivityCounts (Steamworks.CSteamID steamIDClan, out System.Int32 pnOnline, out System.Int32 pnInGame, out System.Int32 pnChatting)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DownloadClanActivityCounts (Steamworks.CSteamID[] psteamIDClans, System.Int32 cClansToRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendCountFromSource (Steamworks.CSteamID steamIDSource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetFriendFromSourceByIndex (Steamworks.CSteamID steamIDSource, System.Int32 iFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsUserInSource (Steamworks.CSteamID steamIDUser, Steamworks.CSteamID steamIDSource)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetInGameVoiceSpeaking (Steamworks.CSteamID steamIDUser, System.Boolean bSpeaking)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlay (System.String pchDialog)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayToUser (System.String pchDialog, Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayToWebPage (System.String pchURL, Steamworks.EActivateGameOverlayToWebPageMode eMode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayToStore (Steamworks.AppId_t nAppID, Steamworks.EOverlayToStoreFlag eFlag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetPlayedWith (Steamworks.CSteamID steamIDUserPlayedWith)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayInviteDialog (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetSmallFriendAvatar (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetMediumFriendAvatar (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLargeFriendAvatar (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RequestUserInformation (Steamworks.CSteamID steamIDUser, System.Boolean bRequireNameOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestClanOfficerList (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetClanOwner (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetClanOfficerCount (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetClanOfficerByIndex (Steamworks.CSteamID steamIDClan, System.Int32 iOfficer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetUserRestrictions ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetRichPresence (System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ClearRichPresence ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFriendRichPresence (Steamworks.CSteamID steamIDFriend, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendRichPresenceKeyCount (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFriendRichPresenceKeyByIndex (Steamworks.CSteamID steamIDFriend, System.Int32 iKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestFriendRichPresence (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InviteUserToGame (Steamworks.CSteamID steamIDFriend, System.String pchConnectString)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetCoplayFriendCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetCoplayFriend (System.Int32 iCoplayFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendCoplayTime (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.AppId_t GetFriendCoplayGame (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t JoinClanChatRoom (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LeaveClanChatRoom (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetClanChatMemberCount (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetChatMemberByIndex (Steamworks.CSteamID steamIDClan, System.Int32 iUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendClanChatMessage (Steamworks.CSteamID steamIDClanChat, System.String pchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetClanChatMessage (Steamworks.CSteamID steamIDClanChat, System.Int32 iMessage, out System.String prgchText, System.Int32 cchTextMax, out Steamworks.EChatEntryType peChatEntryType, out Steamworks.CSteamID psteamidChatter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsClanChatAdmin (Steamworks.CSteamID steamIDClanChat, Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsClanChatWindowOpenInSteam (Steamworks.CSteamID steamIDClanChat)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean OpenClanChatWindowInSteam (Steamworks.CSteamID steamIDClanChat)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseClanChatWindowInSteam (Steamworks.CSteamID steamIDClanChat)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetListenForFriendsMessages (System.Boolean bInterceptEnabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReplyToFriendMessage (Steamworks.CSteamID steamIDFriend, System.String pchMsgToSend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFriendMessage (Steamworks.CSteamID steamIDFriend, System.Int32 iMessageID, out System.String pvData, System.Int32 cubData, out Steamworks.EChatEntryType peChatEntryType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetFollowerCount (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t IsFollowing (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumerateFollowingList (System.UInt32 unStartIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsClanPublic (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsClanOfficialGameGroup (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetNumChatsWithUnreadPriorityMessages ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayRemotePlayTogetherInviteDialog (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RegisterProtocolInOverlayBrowser (System.String pchProtocol)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateGameOverlayInviteDialogConnectString (System.String pchConnectString)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServer 
	         {
                public static      void SetProduct (System.String pszProduct)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetGameDescription (System.String pszGameDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetModDir (System.String pszModDir)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetDedicatedServer (System.Boolean bDedicated)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogOn (System.String pszToken)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogOnAnonymous ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogOff ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BLoggedOn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BSecure ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetSteamID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean WasRestartRequested ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetMaxPlayerCount (System.Int32 cPlayersMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetBotPlayerCount (System.Int32 cBotplayers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetServerName (System.String pszServerName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetMapName (System.String pszMapName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetPasswordProtected (System.Boolean bPasswordProtected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetSpectatorPort (System.UInt16 unSpectatorPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetSpectatorServerName (System.String pszSpectatorServerName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ClearAllKeyValues ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetKeyValue (System.String pKey, System.String pValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetGameTags (System.String pchGameTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetGameData (System.String pchGameData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetRegion (System.String pszRegion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendUserConnectAndAuthenticate (System.UInt32 unIPClient, System.Byte[] pvAuthBlob, System.UInt32 cubAuthBlobSize, out Steamworks.CSteamID pSteamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID CreateUnauthenticatedUserConnection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SendUserDisconnect (Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BUpdateUserData (Steamworks.CSteamID steamIDUser, System.String pchPlayerName, System.UInt32 uScore)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HAuthTicket GetAuthSessionTicket (System.Byte[] pTicket, System.Int32 cbMaxTicket, out System.UInt32 pcbTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EBeginAuthSessionResult BeginAuthSession (System.Byte[] pAuthTicket, System.Int32 cbAuthTicket, Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndAuthSession (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CancelAuthTicket (Steamworks.HAuthTicket hAuthTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EUserHasLicenseForAppResult UserHasLicenseForApp (Steamworks.CSteamID steamID, Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RequestUserGroupStatus (Steamworks.CSteamID steamIDUser, Steamworks.CSteamID steamIDGroup)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetGameplayStats ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetServerReputation ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamIPAddress_t GetPublicIP ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean HandleIncomingPacket (System.Byte[] pData, System.Int32 cbData, System.UInt32 srcIP, System.UInt16 srcPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetNextOutgoingPacket (System.Byte[] pOut, System.Int32 cbMaxOut, out System.UInt32 pNetAdr, out System.UInt16 pPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EnableHeartbeats (System.Boolean bActive)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetHeartbeatInterval (System.Int32 iHeartbeatInterval)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ForceHeartbeat ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AssociateWithClan (Steamworks.CSteamID steamIDClan)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t ComputeNewPlayerCompatibility (Steamworks.CSteamID steamIDNewPlayer)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerApps 
	         {
                public static      System.Boolean BIsSubscribed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsLowViolence ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsCybercafe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsVACBanned ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetCurrentGameLanguage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetAvailableGameLanguages ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedApp (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsDlcInstalled (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetEarliestPurchaseUnixTime (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedFromFreeWeekend ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDLCCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BGetDLCDataByIndex (System.Int32 iDLC, out Steamworks.AppId_t pAppID, out System.Boolean pbAvailable, out System.String pchName, System.Int32 cchNameBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void InstallDLC (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void UninstallDLC (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestAppProofOfPurchaseKey (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetCurrentBetaName (out System.String pchName, System.Int32 cchNameBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean MarkContentCorrupt (System.Boolean bMissingFilesOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetInstalledDepots (Steamworks.AppId_t appID, Steamworks.DepotId_t[] pvecDepots, System.UInt32 cMaxDepots)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetAppInstallDir (Steamworks.AppId_t appID, out System.String pchFolder, System.UInt32 cchFolderBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsAppInstalled (Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetAppOwner ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetLaunchQueryParam (System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetDlcDownloadProgress (Steamworks.AppId_t nAppID, out System.UInt64 punBytesDownloaded, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAppBuildId ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RequestAllProofOfPurchaseKeys ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetFileDetails (System.String pszFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLaunchCommandLine (out System.String pszCommandLine, System.Int32 cubCommandLine)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsSubscribedFromFamilySharing ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsTimedTrial (out System.UInt32 punSecondsAllowed, out System.UInt32 punSecondsPlayed)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerClient 
	         {
                public static      Steamworks.HSteamPipe CreateSteamPipe ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BReleaseSteamPipe (Steamworks.HSteamPipe hSteamPipe)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser ConnectToGlobalUser (Steamworks.HSteamPipe hSteamPipe)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamUser CreateLocalUser (out Steamworks.HSteamPipe phSteamPipe, Steamworks.EAccountType eAccountType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReleaseUser (Steamworks.HSteamPipe hSteamPipe, Steamworks.HSteamUser hUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUser (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameServer (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLocalIPBinding (Steamworks.SteamIPAddress_t unIP, System.UInt16 usPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamFriends (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUtils (Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMatchmaking (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMatchmakingServers (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGenericInterface (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUserStats (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameServerStats (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamApps (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamNetworking (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamRemoteStorage (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamScreenshots (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamGameSearch (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetIPCCallCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetWarningMessageHook (Steamworks.SteamAPIWarningMessageHook_t pFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BShutdownIfAllPipesClosed ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamHTTP (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamController (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamUGC (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamAppList (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMusic (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamMusicRemote (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamHTMLSurface (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamInventory (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamVideo (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamParentalSettings (Steamworks.HSteamUser hSteamuser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamInput (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamParties (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IntPtr GetISteamRemotePlay (Steamworks.HSteamUser hSteamUser, Steamworks.HSteamPipe hSteamPipe, System.String pchVersion)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerHTTP 
	         {
                public static      Steamworks.HTTPRequestHandle CreateHTTPRequest (Steamworks.EHTTPMethod eHTTPRequestMethod, System.String pchAbsoluteURL)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestContextValue (Steamworks.HTTPRequestHandle hRequest, System.UInt64 ulContextValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestNetworkActivityTimeout (Steamworks.HTTPRequestHandle hRequest, System.UInt32 unTimeoutSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestHeaderValue (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, System.String pchHeaderValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestGetOrPostParameter (Steamworks.HTTPRequestHandle hRequest, System.String pchParamName, System.String pchParamValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendHTTPRequest (Steamworks.HTTPRequestHandle hRequest, out Steamworks.SteamAPICall_t pCallHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendHTTPRequestAndStreamResponse (Steamworks.HTTPRequestHandle hRequest, out Steamworks.SteamAPICall_t pCallHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeferHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean PrioritizeHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseHeaderSize (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, out System.UInt32 unResponseHeaderSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseHeaderValue (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, System.Byte[] pHeaderValueBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseBodySize (Steamworks.HTTPRequestHandle hRequest, out System.UInt32 unBodySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseBodyData (Steamworks.HTTPRequestHandle hRequest, System.Byte[] pBodyDataBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPStreamingResponseBodyData (Steamworks.HTTPRequestHandle hRequest, System.UInt32 cOffset, System.Byte[] pBodyDataBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPDownloadProgressPct (Steamworks.HTTPRequestHandle hRequest, out System.Single pflPercentOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestRawPostBody (Steamworks.HTTPRequestHandle hRequest, System.String pchContentType, System.Byte[] pubBody, System.UInt32 unBodyLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HTTPCookieContainerHandle CreateCookieContainer (System.Boolean bAllowResponsesToModify)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseCookieContainer (Steamworks.HTTPCookieContainerHandle hCookieContainer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCookie (Steamworks.HTTPCookieContainerHandle hCookieContainer, System.String pchHost, System.String pchUrl, System.String pchCookie)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestCookieContainer (Steamworks.HTTPRequestHandle hRequest, Steamworks.HTTPCookieContainerHandle hCookieContainer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestUserAgentInfo (Steamworks.HTTPRequestHandle hRequest, System.String pchUserAgentInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestRequiresVerifiedCertificate (Steamworks.HTTPRequestHandle hRequest, System.Boolean bRequireVerifiedCertificate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestAbsoluteTimeoutMS (Steamworks.HTTPRequestHandle hRequest, System.UInt32 unMilliseconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPRequestWasTimedOut (Steamworks.HTTPRequestHandle hRequest, out System.Boolean pbWasTimedOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerInventory 
	         {
                public static      Steamworks.EResult GetResultStatus (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetResultItems (Steamworks.SteamInventoryResult_t resultHandle, Steamworks.SteamItemDetails_t[] pOutItemsArray, System.UInt32 punOutItemsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetResultItemProperty (Steamworks.SteamInventoryResult_t resultHandle, System.UInt32 unItemIndex, System.String pchPropertyName, out System.String pchValueBuffer, System.UInt32 punValueBufferSizeOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetResultTimestamp (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CheckResultSteamID (Steamworks.SteamInventoryResult_t resultHandle, Steamworks.CSteamID steamIDExpected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DestroyResult (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAllItems (out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemsByID (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t[] pInstanceIDs, System.UInt32 unCountInstanceIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SerializeResult (Steamworks.SteamInventoryResult_t resultHandle, System.Byte[] pOutBuffer, out System.UInt32 punOutBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeserializeResult (out Steamworks.SteamInventoryResult_t pOutResultHandle, System.Byte[] pBuffer, System.UInt32 unBufferSize, System.Boolean bRESERVED_MUST_BE_FALSE)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GenerateItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32[] punArrayQuantity, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GrantPromoItems (out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddPromoItem (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t itemDef)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddPromoItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ConsumeItem (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t itemConsume, System.UInt32 unQuantity)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ExchangeItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayGenerate, System.UInt32[] punArrayGenerateQuantity, System.UInt32 unArrayGenerateLength, Steamworks.SteamItemInstanceID_t[] pArrayDestroy, System.UInt32[] punArrayDestroyQuantity, System.UInt32 unArrayDestroyLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TransferItemQuantity (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t itemIdSource, System.UInt32 unQuantity, Steamworks.SteamItemInstanceID_t itemIdDest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SendItemDropHeartbeat ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TriggerItemDrop (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t dropListDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TradeItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.CSteamID steamIDTradePartner, Steamworks.SteamItemInstanceID_t[] pArrayGive, System.UInt32[] pArrayGiveQuantity, System.UInt32 nArrayGiveLength, Steamworks.SteamItemInstanceID_t[] pArrayGet, System.UInt32[] pArrayGetQuantity, System.UInt32 nArrayGetLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LoadItemDefinitions ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDefinitionIDs (Steamworks.SteamItemDef_t[] pItemDefIDs, System.UInt32 punItemDefIDsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDefinitionProperty (Steamworks.SteamItemDef_t iDefinition, System.String pchPropertyName, out System.String pchValueBuffer, System.UInt32 punValueBufferSizeOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetEligiblePromoItemDefinitionIDs (Steamworks.CSteamID steamID, Steamworks.SteamItemDef_t[] pItemDefIDs, System.UInt32 punItemDefIDsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StartPurchase (Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32[] punArrayQuantity, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestPrices ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetNumItemsWithPrices ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemsWithPrices (Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt64[] pCurrentPrices, System.UInt64[] pBasePrices, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemPrice (Steamworks.SteamItemDef_t iDefinition, out System.UInt64 pCurrentPrice, out System.UInt64 pBasePrice)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamInventoryUpdateHandle_t StartUpdateProperties ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.String pchPropertyValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Int64 nValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Single flValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SubmitUpdateProperties (Steamworks.SteamInventoryUpdateHandle_t handle, out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InspectItem (out Steamworks.SteamInventoryResult_t pResultHandle, System.String pchItemToken)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerNetworking 
	         {
                public static      System.Boolean SendP2PPacket (Steamworks.CSteamID steamIDRemote, System.Byte[] pubData, System.UInt32 cubData, Steamworks.EP2PSend eP2PSendType, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsP2PPacketAvailable (out System.UInt32 pcubMsgSize, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReadP2PPacket (System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out Steamworks.CSteamID psteamIDRemote, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AcceptP2PSessionWithUser (Steamworks.CSteamID steamIDRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseP2PSessionWithUser (Steamworks.CSteamID steamIDRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseP2PChannelWithUser (Steamworks.CSteamID steamIDRemote, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetP2PSessionState (Steamworks.CSteamID steamIDRemote, out Steamworks.P2PSessionState_t pConnectionState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AllowP2PPacketRelay (System.Boolean bAllow)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetListenSocket_t CreateListenSocket (System.Int32 nVirtualP2PPort, Steamworks.SteamIPAddress_t nIP, System.UInt16 nPort, System.Boolean bAllowUseOfPacketRelay)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetSocket_t CreateP2PConnectionSocket (Steamworks.CSteamID steamIDTarget, System.Int32 nVirtualPort, System.Int32 nTimeoutSec, System.Boolean bAllowUseOfPacketRelay)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetSocket_t CreateConnectionSocket (Steamworks.SteamIPAddress_t nIP, System.UInt16 nPort, System.Int32 nTimeoutSec)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroySocket (Steamworks.SNetSocket_t hSocket, System.Boolean bNotifyRemoteEnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroyListenSocket (Steamworks.SNetListenSocket_t hSocket, System.Boolean bNotifyRemoteEnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendDataOnSocket (Steamworks.SNetSocket_t hSocket, System.Byte[] pubData, System.UInt32 cubData, System.Boolean bReliable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsDataAvailableOnSocket (Steamworks.SNetSocket_t hSocket, out System.UInt32 pcubMsgSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RetrieveDataFromSocket (Steamworks.SNetSocket_t hSocket, System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsDataAvailable (Steamworks.SNetListenSocket_t hListenSocket, out System.UInt32 pcubMsgSize, out Steamworks.SNetSocket_t phSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RetrieveData (Steamworks.SNetListenSocket_t hListenSocket, System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out Steamworks.SNetSocket_t phSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetSocketInfo (Steamworks.SNetSocket_t hSocket, out Steamworks.CSteamID pSteamIDRemote, out System.Int32 peSocketStatus, out Steamworks.SteamIPAddress_t punIPRemote, out System.UInt16 punPortRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetListenSocketInfo (Steamworks.SNetListenSocket_t hListenSocket, out Steamworks.SteamIPAddress_t pnIP, out System.UInt16 pnPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESNetSocketConnectionType GetSocketConnectionType (Steamworks.SNetSocket_t hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetMaxPacketSize (Steamworks.SNetSocket_t hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerNetworkingSockets 
	         {
                public static      Steamworks.HSteamListenSocket CreateListenSocketIP (Steamworks.SteamNetworkingIPAddr localAddress, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectByIPAddress (Steamworks.SteamNetworkingIPAddr address, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamListenSocket CreateListenSocketP2P (System.Int32 nLocalVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectP2P (Steamworks.SteamNetworkingIdentity identityRemote, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult AcceptConnection (Steamworks.HSteamNetConnection hConn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseConnection (Steamworks.HSteamNetConnection hPeer, System.Int32 nReason, System.String pszDebug, System.Boolean bEnableLinger)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseListenSocket (Steamworks.HSteamListenSocket hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConnectionUserData (Steamworks.HSteamNetConnection hPeer, System.Int64 nUserData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int64 GetConnectionUserData (Steamworks.HSteamNetConnection hPeer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetConnectionName (Steamworks.HSteamNetConnection hPeer, System.String pszName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConnectionName (Steamworks.HSteamNetConnection hPeer, out System.String pszName, System.Int32 nMaxLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult SendMessageToConnection (Steamworks.HSteamNetConnection hConn, System.IntPtr pData, System.UInt32 cbData, System.Int32 nSendFlags, out System.Int64 pOutMessageNumber)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SendMessages (System.Int32 nMessages, Steamworks.SteamNetworkingMessage_t[] pMessages, System.Int64[] pOutMessageNumberOrResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult FlushMessagesOnConnection (Steamworks.HSteamNetConnection hConn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ReceiveMessagesOnConnection (Steamworks.HSteamNetConnection hConn, System.IntPtr[] ppOutMessages, System.Int32 nMaxMessages)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConnectionInfo (Steamworks.HSteamNetConnection hConn, out Steamworks.SteamNetConnectionInfo_t pInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQuickConnectionStatus (Steamworks.HSteamNetConnection hConn, out Steamworks.SteamNetworkingQuickConnectionStatus pStats)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDetailedConnectionStatus (Steamworks.HSteamNetConnection hConn, out System.String pszBuf, System.Int32 cbBuf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetListenSocketAddress (Steamworks.HSteamListenSocket hSocket, out Steamworks.SteamNetworkingIPAddr address)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CreateSocketPair (out Steamworks.HSteamNetConnection pOutConnection1, out Steamworks.HSteamNetConnection pOutConnection2, System.Boolean bUseNetworkLoopback, Steamworks.SteamNetworkingIdentity pIdentity1, Steamworks.SteamNetworkingIdentity pIdentity2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetIdentity (out Steamworks.SteamNetworkingIdentity pIdentity)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability InitAuthentication ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability GetAuthenticationStatus (out Steamworks.SteamNetAuthenticationStatus_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetPollGroup CreatePollGroup ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroyPollGroup (Steamworks.HSteamNetPollGroup hPollGroup)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConnectionPollGroup (Steamworks.HSteamNetConnection hConn, Steamworks.HSteamNetPollGroup hPollGroup)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ReceiveMessagesOnPollGroup (Steamworks.HSteamNetPollGroup hPollGroup, System.IntPtr[] ppOutMessages, System.Int32 nMaxMessages)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReceivedRelayAuthTicket (System.IntPtr pvTicket, System.Int32 cbTicket, out Steamworks.SteamDatagramRelayAuthTicket pOutParsedTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 FindRelayAuthTicketForServer (Steamworks.SteamNetworkingIdentity identityGameServer, System.Int32 nRemoteVirtualPort, out Steamworks.SteamDatagramRelayAuthTicket pOutParsedTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectToHostedDedicatedServer (Steamworks.SteamNetworkingIdentity identityTarget, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt16 GetHostedDedicatedServerPort ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamNetworkingPOPID GetHostedDedicatedServerPOPID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult GetHostedDedicatedServerAddress (out Steamworks.SteamDatagramHostedAddress pRouting)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamListenSocket CreateHostedDedicatedServerListenSocket (System.Int32 nLocalVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult GetGameCoordinatorServerLogin (out Steamworks.SteamDatagramGameCoordinatorServerLogin pLoginInfo, out System.Int32 pcbSignedBlob, System.IntPtr pBlob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectP2PCustomSignaling (out Steamworks.ISteamNetworkingConnectionSignaling pSignaling, Steamworks.SteamNetworkingIdentity pPeerIdentity, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReceivedP2PCustomSignal (System.IntPtr pMsg, System.Int32 cbMsg, out Steamworks.ISteamNetworkingSignalingRecvContext pContext)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetCertificateRequest (out System.Int32 pcbBlob, System.IntPtr pBlob, out Steamworks.SteamNetworkingErrMsg errMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCertificate (System.IntPtr pCertificate, System.Int32 cbCertificate, out Steamworks.SteamNetworkingErrMsg errMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RunCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerNetworkingUtils 
	         {
                public static      System.IntPtr AllocateMessage (System.Int32 cbAllocateBuffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void InitRelayNetworkAccess ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability GetRelayNetworkStatus (out Steamworks.SteamRelayNetworkStatus_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetLocalPingLocation (out Steamworks.SteamNetworkPingLocation_t result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 EstimatePingTimeBetweenTwoLocations (Steamworks.SteamNetworkPingLocation_t location1, Steamworks.SteamNetworkPingLocation_t location2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 EstimatePingTimeFromLocalHost (Steamworks.SteamNetworkPingLocation_t remoteLocation)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ConvertPingLocationToString (Steamworks.SteamNetworkPingLocation_t location, out System.String pszBuf, System.Int32 cchBufSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ParsePingLocationString (System.String pszString, out Steamworks.SteamNetworkPingLocation_t result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CheckPingDataUpToDate (System.Single flMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPingToDataCenter (Steamworks.SteamNetworkingPOPID popID, out Steamworks.SteamNetworkingPOPID pViaRelayPoP)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDirectPingToPOP (Steamworks.SteamNetworkingPOPID popID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPOPCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPOPList (out Steamworks.SteamNetworkingPOPID list, System.Int32 nListSz)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamNetworkingMicroseconds GetLocalTimestamp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetDebugOutputFunction (Steamworks.ESteamNetworkingSocketsDebugOutputType eDetailLevel, Steamworks.FSteamNetworkingSocketsDebugOutput pfnFunc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConfigValue (Steamworks.ESteamNetworkingConfigValue eValue, Steamworks.ESteamNetworkingConfigScope eScopeType, System.IntPtr scopeObj, Steamworks.ESteamNetworkingConfigDataType eDataType, System.IntPtr pArg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingGetConfigValueResult GetConfigValue (Steamworks.ESteamNetworkingConfigValue eValue, Steamworks.ESteamNetworkingConfigScope eScopeType, System.IntPtr scopeObj, out Steamworks.ESteamNetworkingConfigDataType pOutDataType, System.IntPtr pResult, out System.UInt64 cbResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConfigValueInfo (Steamworks.ESteamNetworkingConfigValue eValue, System.IntPtr pOutName, out Steamworks.ESteamNetworkingConfigDataType pOutDataType, out Steamworks.ESteamNetworkingConfigScope pOutScope, out Steamworks.ESteamNetworkingConfigValue pOutNextValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingConfigValue GetFirstConfigValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SteamNetworkingIPAddr_ToString (Steamworks.SteamNetworkingIPAddr addr, out System.String buf, System.UInt32 cbBuf, System.Boolean bWithPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SteamNetworkingIPAddr_ParseString (out Steamworks.SteamNetworkingIPAddr pAddr, System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SteamNetworkingIdentity_ToString (Steamworks.SteamNetworkingIdentity identity, out System.String buf, System.UInt32 cbBuf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SteamNetworkingIdentity_ParseString (out Steamworks.SteamNetworkingIdentity pIdentity, System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerStats 
	         {
                public static      Steamworks.SteamAPICall_t RequestUserStats (Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Int32 pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Single pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserAchievement (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Boolean pbAchieved)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, System.Int32 nData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, System.Single fData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateUserAvgRateStat (Steamworks.CSteamID steamIDUser, System.String pchName, System.Single flCountThisSession, System.Double dSessionLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetUserAchievement (Steamworks.CSteamID steamIDUser, System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ClearUserAchievement (Steamworks.CSteamID steamIDUser, System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StoreUserStats (Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerUGC 
	         {
                public static      Steamworks.UGCQueryHandle_t CreateQueryUserUGCRequest (Steamworks.AccountID_t unAccountID, Steamworks.EUserUGCList eListType, Steamworks.EUGCMatchingUGCType eMatchingUGCType, Steamworks.EUserUGCListSortOrder eSortOrder, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.UInt32 unPage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryAllUGCRequest (Steamworks.EUGCQuery eQueryType, Steamworks.EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.UInt32 unPage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryAllUGCRequest (Steamworks.EUGCQuery eQueryType, Steamworks.EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.String pchCursor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryUGCDetailsRequest (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SendQueryUGCRequest (Steamworks.UGCQueryHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCResult (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out Steamworks.SteamUGCDetails_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumTags (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 indexTag, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCTagDisplayName (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 indexTag, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCPreviewURL (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out System.String pchURL, System.UInt32 cchURLSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCMetadata (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out System.String pchMetadata, System.UInt32 cchMetadatasize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCChildren (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 cMaxEntries)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCStatistic (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, Steamworks.EItemStatistic eStatType, out System.UInt64 pStatValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumAdditionalPreviews (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCAdditionalPreview (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 previewIndex, out System.String pchURLOrVideoID, System.UInt32 cchURLSize, out System.String pchOriginalFileName, System.UInt32 cchOriginalFileNameSize, out Steamworks.EItemPreviewType pPreviewType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumKeyValueTags (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 keyValueTagIndex, out System.String pchKey, System.UInt32 cchKeySize, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.String pchKey, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseQueryUGCRequest (Steamworks.UGCQueryHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredTag (Steamworks.UGCQueryHandle_t handle, System.String pTagName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredTagGroup (Steamworks.UGCQueryHandle_t handle, System.Collections.Generic.IList<System.String> pTagGroups)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddExcludedTag (Steamworks.UGCQueryHandle_t handle, System.String pTagName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnOnlyIDs (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnOnlyIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnKeyValueTags (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnKeyValueTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnLongDescription (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnLongDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnMetadata (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnChildren (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnChildren)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnAdditionalPreviews (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnAdditionalPreviews)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnTotalOnly (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnTotalOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnPlaytimeStats (Steamworks.UGCQueryHandle_t handle, System.UInt32 unDays)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLanguage (Steamworks.UGCQueryHandle_t handle, System.String pchLanguage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetAllowCachedResponse (Steamworks.UGCQueryHandle_t handle, System.UInt32 unMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCloudFileNameFilter (Steamworks.UGCQueryHandle_t handle, System.String pMatchCloudFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetMatchAnyTag (Steamworks.UGCQueryHandle_t handle, System.Boolean bMatchAnyTag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetSearchText (Steamworks.UGCQueryHandle_t handle, System.String pSearchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetRankedByTrendDays (Steamworks.UGCQueryHandle_t handle, System.UInt32 unDays)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.String pKey, System.String pValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestUGCDetails (Steamworks.PublishedFileId_t nPublishedFileID, System.UInt32 unMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CreateItem (Steamworks.AppId_t nConsumerAppId, Steamworks.EWorkshopFileType eFileType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCUpdateHandle_t StartItemUpdate (Steamworks.AppId_t nConsumerAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemTitle (Steamworks.UGCUpdateHandle_t handle, System.String pchTitle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemDescription (Steamworks.UGCUpdateHandle_t handle, System.String pchDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemUpdateLanguage (Steamworks.UGCUpdateHandle_t handle, System.String pchLanguage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemMetadata (Steamworks.UGCUpdateHandle_t handle, System.String pchMetaData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemVisibility (Steamworks.UGCUpdateHandle_t handle, Steamworks.ERemoteStoragePublishedFileVisibility eVisibility)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemTags (Steamworks.UGCUpdateHandle_t updateHandle, System.Collections.Generic.IList<System.String> pTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemContent (Steamworks.UGCUpdateHandle_t handle, System.String pszContentFolder)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemPreview (Steamworks.UGCUpdateHandle_t handle, System.String pszPreviewFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetAllowLegacyUpload (Steamworks.UGCUpdateHandle_t handle, System.Boolean bAllowLegacyUpload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveAllItemKeyValueTags (Steamworks.UGCUpdateHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveItemKeyValueTags (Steamworks.UGCUpdateHandle_t handle, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemKeyValueTag (Steamworks.UGCUpdateHandle_t handle, System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemPreviewFile (Steamworks.UGCUpdateHandle_t handle, System.String pszPreviewFile, Steamworks.EItemPreviewType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemPreviewVideo (Steamworks.UGCUpdateHandle_t handle, System.String pszVideoID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateItemPreviewFile (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index, System.String pszPreviewFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateItemPreviewVideo (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index, System.String pszVideoID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveItemPreview (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SubmitItemUpdate (Steamworks.UGCUpdateHandle_t handle, System.String pchChangeNote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EItemUpdateStatus GetItemUpdateProgress (Steamworks.UGCUpdateHandle_t handle, out System.UInt64 punBytesProcessed, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SetUserItemVote (Steamworks.PublishedFileId_t nPublishedFileID, System.Boolean bVoteUp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetUserItemVote (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddItemToFavorites (Steamworks.AppId_t nAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveItemFromFavorites (Steamworks.AppId_t nAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SubscribeItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UnsubscribeItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetNumSubscribedItems ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetSubscribedItems (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 cMaxEntries)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetItemState (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemInstallInfo (Steamworks.PublishedFileId_t nPublishedFileID, out System.UInt64 punSizeOnDisk, out System.String pchFolder, System.UInt32 cchFolderSize, out System.UInt32 punTimeStamp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDownloadInfo (Steamworks.PublishedFileId_t nPublishedFileID, out System.UInt64 punBytesDownloaded, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DownloadItem (Steamworks.PublishedFileId_t nPublishedFileID, System.Boolean bHighPriority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BInitWorkshopForGameServer (Steamworks.DepotId_t unWorkshopDepotID, System.String pszFolder)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SuspendDownloads (System.Boolean bSuspend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StartPlaytimeTracking (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StopPlaytimeTracking (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StopPlaytimeTrackingForAllItems ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddDependency (Steamworks.PublishedFileId_t nParentPublishedFileID, Steamworks.PublishedFileId_t nChildPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveDependency (Steamworks.PublishedFileId_t nParentPublishedFileID, Steamworks.PublishedFileId_t nChildPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddAppDependency (Steamworks.PublishedFileId_t nPublishedFileID, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveAppDependency (Steamworks.PublishedFileId_t nPublishedFileID, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetAppDependencies (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DeleteItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameServerUtils 
	         {
                public static      System.UInt32 GetSecondsSinceAppActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetSecondsSinceComputerActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EUniverse GetConnectedUniverse ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetServerRealTime ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetIPCountry ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetImageSize (System.Int32 iImage, out System.UInt32 pnWidth, out System.UInt32 pnHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetImageRGBA (System.Int32 iImage, System.Byte[] pubDest, System.Int32 nDestBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Byte GetCurrentBatteryPower ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.AppId_t GetAppID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetOverlayNotificationPosition (Steamworks.ENotificationPosition eNotificationPosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsAPICallCompleted (Steamworks.SteamAPICall_t hSteamAPICall, out System.Boolean pbFailed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamAPICallFailure GetAPICallFailureReason (Steamworks.SteamAPICall_t hSteamAPICall)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAPICallResult (Steamworks.SteamAPICall_t hSteamAPICall, System.IntPtr pCallback, System.Int32 cubCallback, System.Int32 iCallbackExpected, out System.Boolean pbFailed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetIPCCallCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetWarningMessageHook (Steamworks.SteamAPIWarningMessageHook_t pFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsOverlayEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BOverlayNeedsPresent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CheckFileSignature (System.String szFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ShowGamepadTextInput (Steamworks.EGamepadTextInputMode eInputMode, Steamworks.EGamepadTextInputLineMode eLineInputMode, System.String pchDescription, System.UInt32 unCharMax, System.String pchExistingText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetEnteredGamepadTextLength ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetEnteredGamepadTextInput (out System.String pchText, System.UInt32 cchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetSteamUILanguage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamRunningInVR ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetOverlayNotificationInset (System.Int32 nHorizontalInset, System.Int32 nVerticalInset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamInBigPictureMode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartVRDashboard ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsVRHeadsetStreamingEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetVRHeadsetStreamingEnabled (System.Boolean bEnabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamChinaLauncher ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InitFilterText (System.UInt32 unFilterOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 FilterText (Steamworks.ETextFilteringContext eContext, Steamworks.CSteamID sourceSteamID, System.String pchInputMessage, out System.String pchOutFilteredText, System.UInt32 nByteSizeOutFilteredText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamIPv6ConnectivityState GetIPv6ConnectivityState (Steamworks.ESteamIPv6ConnectivityProtocol eProtocol)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamHTMLSurface 
	         {
                public static      System.Boolean Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CreateBrowser (System.String pchUserAgent, System.String pchUserCSS)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RemoveBrowser (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadURL (Steamworks.HHTMLBrowser unBrowserHandle, System.String pchURL, System.String pchPostData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetSize (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 unWidth, System.UInt32 unHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StopLoad (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Reload (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GoBack (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GoForward (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddHeader (Steamworks.HHTMLBrowser unBrowserHandle, System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ExecuteJavascript (Steamworks.HHTMLBrowser unBrowserHandle, System.String pchScript)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MouseUp (Steamworks.HHTMLBrowser unBrowserHandle, Steamworks.EHTMLMouseButton eMouseButton)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MouseDown (Steamworks.HHTMLBrowser unBrowserHandle, Steamworks.EHTMLMouseButton eMouseButton)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MouseDoubleClick (Steamworks.HHTMLBrowser unBrowserHandle, Steamworks.EHTMLMouseButton eMouseButton)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MouseMove (Steamworks.HHTMLBrowser unBrowserHandle, System.Int32 x, System.Int32 y)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MouseWheel (Steamworks.HHTMLBrowser unBrowserHandle, System.Int32 nDelta)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void KeyDown (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 nNativeKeyCode, Steamworks.EHTMLKeyModifiers eHTMLKeyModifiers, System.Boolean bIsSystemKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void KeyUp (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 nNativeKeyCode, Steamworks.EHTMLKeyModifiers eHTMLKeyModifiers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void KeyChar (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 cUnicodeChar, Steamworks.EHTMLKeyModifiers eHTMLKeyModifiers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetHorizontalScroll (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 nAbsolutePixelScroll)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetVerticalScroll (Steamworks.HHTMLBrowser unBrowserHandle, System.UInt32 nAbsolutePixelScroll)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetKeyFocus (Steamworks.HHTMLBrowser unBrowserHandle, System.Boolean bHasKeyFocus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ViewSource (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CopyToClipboard (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PasteFromClipboard (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Find (Steamworks.HHTMLBrowser unBrowserHandle, System.String pchSearchStr, System.Boolean bCurrentlyInFind, System.Boolean bReverse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StopFind (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetLinkAtPosition (Steamworks.HHTMLBrowser unBrowserHandle, System.Int32 x, System.Int32 y)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetCookie (System.String pchHostname, System.String pchKey, System.String pchValue, System.String pchPath, System.UInt32 nExpires, System.Boolean bSecure, System.Boolean bHTTPOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetPageScaleFactor (Steamworks.HHTMLBrowser unBrowserHandle, System.Single flZoom, System.Int32 nPointX, System.Int32 nPointY)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetBackgroundMode (Steamworks.HHTMLBrowser unBrowserHandle, System.Boolean bBackgroundMode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetDPIScalingFactor (Steamworks.HHTMLBrowser unBrowserHandle, System.Single flDPIScaling)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OpenDeveloperTools (Steamworks.HHTMLBrowser unBrowserHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AllowStartRequest (Steamworks.HHTMLBrowser unBrowserHandle, System.Boolean bAllowed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void JSDialogResponse (Steamworks.HHTMLBrowser unBrowserHandle, System.Boolean bResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void FileLoadDialogResponse (Steamworks.HHTMLBrowser unBrowserHandle, System.IntPtr pchSelectedFiles)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamHTTP 
	         {
                public static      Steamworks.HTTPRequestHandle CreateHTTPRequest (Steamworks.EHTTPMethod eHTTPRequestMethod, System.String pchAbsoluteURL)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestContextValue (Steamworks.HTTPRequestHandle hRequest, System.UInt64 ulContextValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestNetworkActivityTimeout (Steamworks.HTTPRequestHandle hRequest, System.UInt32 unTimeoutSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestHeaderValue (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, System.String pchHeaderValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestGetOrPostParameter (Steamworks.HTTPRequestHandle hRequest, System.String pchParamName, System.String pchParamValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendHTTPRequest (Steamworks.HTTPRequestHandle hRequest, out Steamworks.SteamAPICall_t pCallHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendHTTPRequestAndStreamResponse (Steamworks.HTTPRequestHandle hRequest, out Steamworks.SteamAPICall_t pCallHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeferHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean PrioritizeHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseHeaderSize (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, out System.UInt32 unResponseHeaderSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseHeaderValue (Steamworks.HTTPRequestHandle hRequest, System.String pchHeaderName, System.Byte[] pHeaderValueBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseBodySize (Steamworks.HTTPRequestHandle hRequest, out System.UInt32 unBodySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPResponseBodyData (Steamworks.HTTPRequestHandle hRequest, System.Byte[] pBodyDataBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPStreamingResponseBodyData (Steamworks.HTTPRequestHandle hRequest, System.UInt32 cOffset, System.Byte[] pBodyDataBuffer, System.UInt32 unBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseHTTPRequest (Steamworks.HTTPRequestHandle hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPDownloadProgressPct (Steamworks.HTTPRequestHandle hRequest, out System.Single pflPercentOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestRawPostBody (Steamworks.HTTPRequestHandle hRequest, System.String pchContentType, System.Byte[] pubBody, System.UInt32 unBodyLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HTTPCookieContainerHandle CreateCookieContainer (System.Boolean bAllowResponsesToModify)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseCookieContainer (Steamworks.HTTPCookieContainerHandle hCookieContainer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCookie (Steamworks.HTTPCookieContainerHandle hCookieContainer, System.String pchHost, System.String pchUrl, System.String pchCookie)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestCookieContainer (Steamworks.HTTPRequestHandle hRequest, Steamworks.HTTPCookieContainerHandle hCookieContainer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestUserAgentInfo (Steamworks.HTTPRequestHandle hRequest, System.String pchUserAgentInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestRequiresVerifiedCertificate (Steamworks.HTTPRequestHandle hRequest, System.Boolean bRequireVerifiedCertificate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetHTTPRequestAbsoluteTimeoutMS (Steamworks.HTTPRequestHandle hRequest, System.UInt32 unMilliseconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetHTTPRequestWasTimedOut (Steamworks.HTTPRequestHandle hRequest, out System.Boolean pbWasTimedOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamInput 
	         {
                public static      System.Boolean Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RunFrame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetConnectedControllers (Steamworks.InputHandle_t[] handlesOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputActionSetHandle_t GetActionSetHandle (System.String pszActionSetName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateActionSet (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t actionSetHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputActionSetHandle_t GetCurrentActionSet (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ActivateActionSetLayer (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t actionSetLayerHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeactivateActionSetLayer (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t actionSetLayerHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeactivateAllActionSetLayers (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetActiveActionSetLayers (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t[] handlesOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputDigitalActionHandle_t GetDigitalActionHandle (System.String pszActionName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputDigitalActionData_t GetDigitalActionData (Steamworks.InputHandle_t inputHandle, Steamworks.InputDigitalActionHandle_t digitalActionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDigitalActionOrigins (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t actionSetHandle, Steamworks.InputDigitalActionHandle_t digitalActionHandle, Steamworks.EInputActionOrigin[] originsOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputAnalogActionHandle_t GetAnalogActionHandle (System.String pszActionName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputAnalogActionData_t GetAnalogActionData (Steamworks.InputHandle_t inputHandle, Steamworks.InputAnalogActionHandle_t analogActionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAnalogActionOrigins (Steamworks.InputHandle_t inputHandle, Steamworks.InputActionSetHandle_t actionSetHandle, Steamworks.InputAnalogActionHandle_t analogActionHandle, Steamworks.EInputActionOrigin[] originsOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetGlyphForActionOrigin (Steamworks.EInputActionOrigin eOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetStringForActionOrigin (Steamworks.EInputActionOrigin eOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StopAnalogActionMomentum (Steamworks.InputHandle_t inputHandle, Steamworks.InputAnalogActionHandle_t eAction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputMotionData_t GetMotionData (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TriggerVibration (Steamworks.InputHandle_t inputHandle, System.UInt16 usLeftSpeed, System.UInt16 usRightSpeed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLEDColor (Steamworks.InputHandle_t inputHandle, System.Byte nColorR, System.Byte nColorG, System.Byte nColorB, System.UInt32 nFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TriggerHapticPulse (Steamworks.InputHandle_t inputHandle, Steamworks.ESteamControllerPad eTargetPad, System.UInt16 usDurationMicroSec)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TriggerRepeatedHapticPulse (Steamworks.InputHandle_t inputHandle, Steamworks.ESteamControllerPad eTargetPad, System.UInt16 usDurationMicroSec, System.UInt16 usOffMicroSec, System.UInt16 unRepeat, System.UInt32 nFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ShowBindingPanel (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamInputType GetInputTypeForHandle (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.InputHandle_t GetControllerForGamepadIndex (System.Int32 nIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetGamepadIndexForController (Steamworks.InputHandle_t ulinputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetStringForXboxOrigin (Steamworks.EXboxOrigin eOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetGlyphForXboxOrigin (Steamworks.EXboxOrigin eOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EInputActionOrigin GetActionOriginFromXboxOrigin (Steamworks.InputHandle_t inputHandle, Steamworks.EXboxOrigin eOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EInputActionOrigin TranslateActionOrigin (Steamworks.ESteamInputType eDestinationInputType, Steamworks.EInputActionOrigin eSourceOrigin)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetDeviceBindingRevision (Steamworks.InputHandle_t inputHandle, out System.Int32 pMajor, out System.Int32 pMinor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetRemotePlaySessionID (Steamworks.InputHandle_t inputHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamInventory 
	         {
                public static      Steamworks.EResult GetResultStatus (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetResultItems (Steamworks.SteamInventoryResult_t resultHandle, Steamworks.SteamItemDetails_t[] pOutItemsArray, System.UInt32 punOutItemsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetResultItemProperty (Steamworks.SteamInventoryResult_t resultHandle, System.UInt32 unItemIndex, System.String pchPropertyName, out System.String pchValueBuffer, System.UInt32 punValueBufferSizeOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetResultTimestamp (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CheckResultSteamID (Steamworks.SteamInventoryResult_t resultHandle, Steamworks.CSteamID steamIDExpected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DestroyResult (Steamworks.SteamInventoryResult_t resultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAllItems (out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemsByID (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t[] pInstanceIDs, System.UInt32 unCountInstanceIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SerializeResult (Steamworks.SteamInventoryResult_t resultHandle, System.Byte[] pOutBuffer, out System.UInt32 punOutBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeserializeResult (out Steamworks.SteamInventoryResult_t pOutResultHandle, System.Byte[] pBuffer, System.UInt32 unBufferSize, System.Boolean bRESERVED_MUST_BE_FALSE)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GenerateItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32[] punArrayQuantity, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GrantPromoItems (out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddPromoItem (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t itemDef)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddPromoItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ConsumeItem (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t itemConsume, System.UInt32 unQuantity)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ExchangeItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t[] pArrayGenerate, System.UInt32[] punArrayGenerateQuantity, System.UInt32 unArrayGenerateLength, Steamworks.SteamItemInstanceID_t[] pArrayDestroy, System.UInt32[] punArrayDestroyQuantity, System.UInt32 unArrayDestroyLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TransferItemQuantity (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemInstanceID_t itemIdSource, System.UInt32 unQuantity, Steamworks.SteamItemInstanceID_t itemIdDest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SendItemDropHeartbeat ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TriggerItemDrop (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.SteamItemDef_t dropListDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TradeItems (out Steamworks.SteamInventoryResult_t pResultHandle, Steamworks.CSteamID steamIDTradePartner, Steamworks.SteamItemInstanceID_t[] pArrayGive, System.UInt32[] pArrayGiveQuantity, System.UInt32 nArrayGiveLength, Steamworks.SteamItemInstanceID_t[] pArrayGet, System.UInt32[] pArrayGetQuantity, System.UInt32 nArrayGetLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LoadItemDefinitions ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDefinitionIDs (Steamworks.SteamItemDef_t[] pItemDefIDs, System.UInt32 punItemDefIDsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDefinitionProperty (Steamworks.SteamItemDef_t iDefinition, System.String pchPropertyName, out System.String pchValueBuffer, System.UInt32 punValueBufferSizeOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetEligiblePromoItemDefinitionIDs (Steamworks.CSteamID steamID, Steamworks.SteamItemDef_t[] pItemDefIDs, System.UInt32 punItemDefIDsArraySize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StartPurchase (Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt32[] punArrayQuantity, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestPrices ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetNumItemsWithPrices ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemsWithPrices (Steamworks.SteamItemDef_t[] pArrayItemDefs, System.UInt64[] pCurrentPrices, System.UInt64[] pBasePrices, System.UInt32 unArrayLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemPrice (Steamworks.SteamItemDef_t iDefinition, out System.UInt64 pCurrentPrice, out System.UInt64 pBasePrice)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamInventoryUpdateHandle_t StartUpdateProperties ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.String pchPropertyValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Int64 nValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetProperty (Steamworks.SteamInventoryUpdateHandle_t handle, Steamworks.SteamItemInstanceID_t nItemID, System.String pchPropertyName, System.Single flValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SubmitUpdateProperties (Steamworks.SteamInventoryUpdateHandle_t handle, out Steamworks.SteamInventoryResult_t pResultHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InspectItem (out Steamworks.SteamInventoryResult_t pResultHandle, System.String pchItemToken)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamMatchmaking 
	         {
                public static      System.Int32 GetFavoriteGameCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetFavoriteGame (System.Int32 iGame, out Steamworks.AppId_t pnAppID, out System.UInt32 pnIP, out System.UInt16 pnConnPort, out System.UInt16 pnQueryPort, out System.UInt32 punFlags, out System.UInt32 pRTime32LastPlayedOnServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 AddFavoriteGame (Steamworks.AppId_t nAppID, System.UInt32 nIP, System.UInt16 nConnPort, System.UInt16 nQueryPort, System.UInt32 unFlags, System.UInt32 rTime32LastPlayedOnServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveFavoriteGame (Steamworks.AppId_t nAppID, System.UInt32 nIP, System.UInt16 nConnPort, System.UInt16 nQueryPort, System.UInt32 unFlags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestLobbyList ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListStringFilter (System.String pchKeyToMatch, System.String pchValueToMatch, Steamworks.ELobbyComparison eComparisonType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListNumericalFilter (System.String pchKeyToMatch, System.Int32 nValueToMatch, Steamworks.ELobbyComparison eComparisonType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListNearValueFilter (System.String pchKeyToMatch, System.Int32 nValueToBeCloseTo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListFilterSlotsAvailable (System.Int32 nSlotsAvailable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListDistanceFilter (Steamworks.ELobbyDistanceFilter eLobbyDistanceFilter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListResultCountFilter (System.Int32 cMaxResults)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddRequestLobbyListCompatibleMembersFilter (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetLobbyByIndex (System.Int32 iLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CreateLobby (Steamworks.ELobbyType eLobbyType, System.Int32 cMaxMembers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t JoinLobby (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LeaveLobby (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InviteUserToLobby (Steamworks.CSteamID steamIDLobby, Steamworks.CSteamID steamIDInvitee)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetNumLobbyMembers (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetLobbyMemberByIndex (Steamworks.CSteamID steamIDLobby, System.Int32 iMember)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetLobbyData (Steamworks.CSteamID steamIDLobby, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLobbyData (Steamworks.CSteamID steamIDLobby, System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLobbyDataCount (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetLobbyDataByIndex (Steamworks.CSteamID steamIDLobby, System.Int32 iLobbyData, out System.String pchKey, System.Int32 cchKeyBufferSize, out System.String pchValue, System.Int32 cchValueBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeleteLobbyData (Steamworks.CSteamID steamIDLobby, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetLobbyMemberData (Steamworks.CSteamID steamIDLobby, Steamworks.CSteamID steamIDUser, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLobbyMemberData (Steamworks.CSteamID steamIDLobby, System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendLobbyChatMsg (Steamworks.CSteamID steamIDLobby, System.Byte[] pvMsgBody, System.Int32 cubMsgBody)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLobbyChatEntry (Steamworks.CSteamID steamIDLobby, System.Int32 iChatID, out Steamworks.CSteamID pSteamIDUser, System.Byte[] pvData, System.Int32 cubData, out Steamworks.EChatEntryType peChatEntryType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RequestLobbyData (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetLobbyGameServer (Steamworks.CSteamID steamIDLobby, System.UInt32 unGameServerIP, System.UInt16 unGameServerPort, Steamworks.CSteamID steamIDGameServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetLobbyGameServer (Steamworks.CSteamID steamIDLobby, out System.UInt32 punGameServerIP, out System.UInt16 punGameServerPort, out Steamworks.CSteamID psteamIDGameServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLobbyMemberLimit (Steamworks.CSteamID steamIDLobby, System.Int32 cMaxMembers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLobbyMemberLimit (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLobbyType (Steamworks.CSteamID steamIDLobby, Steamworks.ELobbyType eLobbyType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLobbyJoinable (Steamworks.CSteamID steamIDLobby, System.Boolean bLobbyJoinable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetLobbyOwner (Steamworks.CSteamID steamIDLobby)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLobbyOwner (Steamworks.CSteamID steamIDLobby, Steamworks.CSteamID steamIDNewOwner)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLinkedLobby (Steamworks.CSteamID steamIDLobby, Steamworks.CSteamID steamIDLobbyDependent)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamMatchmakingServers 
	         {
                public static      Steamworks.HServerListRequest RequestInternetServerList (Steamworks.AppId_t iApp, Steamworks.MatchMakingKeyValuePair_t[] ppchFilters, System.UInt32 nFilters, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerListRequest RequestLANServerList (Steamworks.AppId_t iApp, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerListRequest RequestFriendsServerList (Steamworks.AppId_t iApp, Steamworks.MatchMakingKeyValuePair_t[] ppchFilters, System.UInt32 nFilters, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerListRequest RequestFavoritesServerList (Steamworks.AppId_t iApp, Steamworks.MatchMakingKeyValuePair_t[] ppchFilters, System.UInt32 nFilters, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerListRequest RequestHistoryServerList (Steamworks.AppId_t iApp, Steamworks.MatchMakingKeyValuePair_t[] ppchFilters, System.UInt32 nFilters, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerListRequest RequestSpectatorServerList (Steamworks.AppId_t iApp, Steamworks.MatchMakingKeyValuePair_t[] ppchFilters, System.UInt32 nFilters, Steamworks.ISteamMatchmakingServerListResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReleaseRequest (Steamworks.HServerListRequest hServerListRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.gameserveritem_t GetServerDetails (Steamworks.HServerListRequest hRequest, System.Int32 iServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CancelQuery (Steamworks.HServerListRequest hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RefreshQuery (Steamworks.HServerListRequest hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsRefreshing (Steamworks.HServerListRequest hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetServerCount (Steamworks.HServerListRequest hRequest)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RefreshServer (Steamworks.HServerListRequest hRequest, System.Int32 iServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerQuery PingServer (System.UInt32 unIP, System.UInt16 usPort, Steamworks.ISteamMatchmakingPingResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerQuery PlayerDetails (System.UInt32 unIP, System.UInt16 usPort, Steamworks.ISteamMatchmakingPlayersResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HServerQuery ServerRules (System.UInt32 unIP, System.UInt16 usPort, Steamworks.ISteamMatchmakingRulesResponse pRequestServersResponse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CancelServerQuery (Steamworks.HServerQuery hServerQuery)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamGameSearch 
	         {
                public static      Steamworks.EGameSearchErrorCode_t AddGameSearchParams (System.String pchKeyToFind, System.String pchValuesToFind)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t SearchForGameWithLobby (Steamworks.CSteamID steamIDLobby, System.Int32 nPlayerMin, System.Int32 nPlayerMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t SearchForGameSolo (System.Int32 nPlayerMin, System.Int32 nPlayerMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t AcceptGame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t DeclineGame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t RetrieveConnectionDetails (Steamworks.CSteamID steamIDHost, out System.String pchConnectionDetails, System.Int32 cubConnectionDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t EndGameSearch ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t SetGameHostParams (System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t SetConnectionDetails (System.String pchConnectionDetails, System.Int32 cubConnectionDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t RequestPlayersForGame (System.Int32 nPlayerMin, System.Int32 nPlayerMax, System.Int32 nMaxTeamSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t HostConfirmGameStart (System.UInt64 ullUniqueGameID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t CancelRequestPlayersForGame ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t SubmitPlayerResult (System.UInt64 ullUniqueGameID, Steamworks.CSteamID steamIDPlayer, Steamworks.EPlayerResult_t EPlayerResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EGameSearchErrorCode_t EndGame (System.UInt64 ullUniqueGameID)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamParties 
	         {
                public static      System.UInt32 GetNumActiveBeacons ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.PartyBeaconID_t GetBeaconByIndex (System.UInt32 unIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetBeaconDetails (Steamworks.PartyBeaconID_t ulBeaconID, out Steamworks.CSteamID pSteamIDBeaconOwner, out Steamworks.SteamPartyBeaconLocation_t pLocation, out System.String pchMetadata, System.Int32 cchMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t JoinParty (Steamworks.PartyBeaconID_t ulBeaconID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetNumAvailableBeaconLocations (out System.UInt32 puNumLocations)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAvailableBeaconLocations (Steamworks.SteamPartyBeaconLocation_t[] pLocationList, System.UInt32 uMaxNumLocations)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CreateBeacon (System.UInt32 unOpenSlots, Steamworks.SteamPartyBeaconLocation_t pBeaconLocation, System.String pchConnectString, System.String pchMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void OnReservationCompleted (Steamworks.PartyBeaconID_t ulBeacon, Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CancelReservation (Steamworks.PartyBeaconID_t ulBeacon, Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t ChangeNumOpenSlots (Steamworks.PartyBeaconID_t ulBeacon, System.UInt32 unOpenSlots)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroyBeacon (Steamworks.PartyBeaconID_t ulBeacon)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetBeaconLocationData (Steamworks.SteamPartyBeaconLocation_t BeaconLocation, Steamworks.ESteamPartyBeaconLocationData eData, out System.String pchDataStringOut, System.Int32 cchDataStringOut)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamMusic 
	         {
                public static      System.Boolean BIsEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsPlaying ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.AudioPlayback_Status GetPlaybackStatus ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Play ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Pause ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlayPrevious ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PlayNext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetVolume (System.Single flVolume)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetVolume ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamMusicRemote 
	         {
                public static      System.Boolean RegisterSteamMusicRemote (System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeregisterSteamMusicRemote ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsCurrentMusicRemote ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BActivationSuccess (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetDisplayName (System.String pchDisplayName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetPNGIcon_64x64 (System.Byte[] pvBuffer, System.UInt32 cbBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnablePlayPrevious (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnablePlayNext (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnableShuffled (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnableLooped (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnableQueue (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EnablePlaylists (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePlaybackStatus (Steamworks.AudioPlayback_Status nStatus)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateShuffled (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateLooped (System.Boolean bValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateVolume (System.Single flValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CurrentEntryWillChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CurrentEntryIsAvailable (System.Boolean bAvailable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateCurrentEntryText (System.String pchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateCurrentEntryElapsedSeconds (System.Int32 nValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateCurrentEntryCoverArt (System.Byte[] pvBuffer, System.UInt32 cbBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CurrentEntryDidChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean QueueWillChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ResetQueueEntries ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetQueueEntry (System.Int32 nID, System.Int32 nPosition, System.String pchEntryText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCurrentQueueEntry (System.Int32 nID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean QueueDidChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean PlaylistWillChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ResetPlaylistEntries ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetPlaylistEntry (System.Int32 nID, System.Int32 nPosition, System.String pchEntryText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCurrentPlaylistEntry (System.Int32 nID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean PlaylistDidChange ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamNetworking 
	         {
                public static      System.Boolean SendP2PPacket (Steamworks.CSteamID steamIDRemote, System.Byte[] pubData, System.UInt32 cubData, Steamworks.EP2PSend eP2PSendType, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsP2PPacketAvailable (out System.UInt32 pcubMsgSize, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReadP2PPacket (System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out Steamworks.CSteamID psteamIDRemote, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AcceptP2PSessionWithUser (Steamworks.CSteamID steamIDRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseP2PSessionWithUser (Steamworks.CSteamID steamIDRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseP2PChannelWithUser (Steamworks.CSteamID steamIDRemote, System.Int32 nChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetP2PSessionState (Steamworks.CSteamID steamIDRemote, out Steamworks.P2PSessionState_t pConnectionState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AllowP2PPacketRelay (System.Boolean bAllow)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetListenSocket_t CreateListenSocket (System.Int32 nVirtualP2PPort, Steamworks.SteamIPAddress_t nIP, System.UInt16 nPort, System.Boolean bAllowUseOfPacketRelay)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetSocket_t CreateP2PConnectionSocket (Steamworks.CSteamID steamIDTarget, System.Int32 nVirtualPort, System.Int32 nTimeoutSec, System.Boolean bAllowUseOfPacketRelay)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SNetSocket_t CreateConnectionSocket (Steamworks.SteamIPAddress_t nIP, System.UInt16 nPort, System.Int32 nTimeoutSec)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroySocket (Steamworks.SNetSocket_t hSocket, System.Boolean bNotifyRemoteEnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroyListenSocket (Steamworks.SNetListenSocket_t hSocket, System.Boolean bNotifyRemoteEnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SendDataOnSocket (Steamworks.SNetSocket_t hSocket, System.Byte[] pubData, System.UInt32 cubData, System.Boolean bReliable)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsDataAvailableOnSocket (Steamworks.SNetSocket_t hSocket, out System.UInt32 pcubMsgSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RetrieveDataFromSocket (Steamworks.SNetSocket_t hSocket, System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsDataAvailable (Steamworks.SNetListenSocket_t hListenSocket, out System.UInt32 pcubMsgSize, out Steamworks.SNetSocket_t phSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RetrieveData (Steamworks.SNetListenSocket_t hListenSocket, System.Byte[] pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out Steamworks.SNetSocket_t phSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetSocketInfo (Steamworks.SNetSocket_t hSocket, out Steamworks.CSteamID pSteamIDRemote, out System.Int32 peSocketStatus, out Steamworks.SteamIPAddress_t punIPRemote, out System.UInt16 punPortRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetListenSocketInfo (Steamworks.SNetListenSocket_t hListenSocket, out Steamworks.SteamIPAddress_t pnIP, out System.UInt16 pnPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESNetSocketConnectionType GetSocketConnectionType (Steamworks.SNetSocket_t hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetMaxPacketSize (Steamworks.SNetSocket_t hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamNetworkingMessages 
	         {
                public static      Steamworks.EResult SendMessageToUser (Steamworks.SteamNetworkingIdentity identityRemote, System.IntPtr pubData, System.UInt32 cubData, System.Int32 nSendFlags, System.Int32 nRemoteChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ReceiveMessagesOnChannel (System.Int32 nLocalChannel, System.IntPtr[] ppOutMessages, System.Int32 nMaxMessages)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AcceptSessionWithUser (Steamworks.SteamNetworkingIdentity identityRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseSessionWithUser (Steamworks.SteamNetworkingIdentity identityRemote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseChannelWithUser (Steamworks.SteamNetworkingIdentity identityRemote, System.Int32 nLocalChannel)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingConnectionState GetSessionConnectionInfo (Steamworks.SteamNetworkingIdentity identityRemote, out Steamworks.SteamNetConnectionInfo_t pConnectionInfo, out Steamworks.SteamNetworkingQuickConnectionStatus pQuickStatus)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamNetworkingSockets 
	         {
                public static      Steamworks.HSteamListenSocket CreateListenSocketIP (Steamworks.SteamNetworkingIPAddr localAddress, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectByIPAddress (Steamworks.SteamNetworkingIPAddr address, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamListenSocket CreateListenSocketP2P (System.Int32 nLocalVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectP2P (Steamworks.SteamNetworkingIdentity identityRemote, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult AcceptConnection (Steamworks.HSteamNetConnection hConn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseConnection (Steamworks.HSteamNetConnection hPeer, System.Int32 nReason, System.String pszDebug, System.Boolean bEnableLinger)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CloseListenSocket (Steamworks.HSteamListenSocket hSocket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConnectionUserData (Steamworks.HSteamNetConnection hPeer, System.Int64 nUserData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int64 GetConnectionUserData (Steamworks.HSteamNetConnection hPeer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetConnectionName (Steamworks.HSteamNetConnection hPeer, System.String pszName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConnectionName (Steamworks.HSteamNetConnection hPeer, out System.String pszName, System.Int32 nMaxLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult SendMessageToConnection (Steamworks.HSteamNetConnection hConn, System.IntPtr pData, System.UInt32 cbData, System.Int32 nSendFlags, out System.Int64 pOutMessageNumber)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SendMessages (System.Int32 nMessages, Steamworks.SteamNetworkingMessage_t[] pMessages, System.Int64[] pOutMessageNumberOrResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult FlushMessagesOnConnection (Steamworks.HSteamNetConnection hConn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ReceiveMessagesOnConnection (Steamworks.HSteamNetConnection hConn, System.IntPtr[] ppOutMessages, System.Int32 nMaxMessages)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConnectionInfo (Steamworks.HSteamNetConnection hConn, out Steamworks.SteamNetConnectionInfo_t pInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQuickConnectionStatus (Steamworks.HSteamNetConnection hConn, out Steamworks.SteamNetworkingQuickConnectionStatus pStats)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDetailedConnectionStatus (Steamworks.HSteamNetConnection hConn, out System.String pszBuf, System.Int32 cbBuf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetListenSocketAddress (Steamworks.HSteamListenSocket hSocket, out Steamworks.SteamNetworkingIPAddr address)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CreateSocketPair (out Steamworks.HSteamNetConnection pOutConnection1, out Steamworks.HSteamNetConnection pOutConnection2, System.Boolean bUseNetworkLoopback, Steamworks.SteamNetworkingIdentity pIdentity1, Steamworks.SteamNetworkingIdentity pIdentity2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetIdentity (out Steamworks.SteamNetworkingIdentity pIdentity)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability InitAuthentication ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability GetAuthenticationStatus (out Steamworks.SteamNetAuthenticationStatus_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetPollGroup CreatePollGroup ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DestroyPollGroup (Steamworks.HSteamNetPollGroup hPollGroup)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConnectionPollGroup (Steamworks.HSteamNetConnection hConn, Steamworks.HSteamNetPollGroup hPollGroup)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 ReceiveMessagesOnPollGroup (Steamworks.HSteamNetPollGroup hPollGroup, System.IntPtr[] ppOutMessages, System.Int32 nMaxMessages)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReceivedRelayAuthTicket (System.IntPtr pvTicket, System.Int32 cbTicket, out Steamworks.SteamDatagramRelayAuthTicket pOutParsedTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 FindRelayAuthTicketForServer (Steamworks.SteamNetworkingIdentity identityGameServer, System.Int32 nRemoteVirtualPort, out Steamworks.SteamDatagramRelayAuthTicket pOutParsedTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectToHostedDedicatedServer (Steamworks.SteamNetworkingIdentity identityTarget, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt16 GetHostedDedicatedServerPort ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamNetworkingPOPID GetHostedDedicatedServerPOPID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult GetHostedDedicatedServerAddress (out Steamworks.SteamDatagramHostedAddress pRouting)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamListenSocket CreateHostedDedicatedServerListenSocket (System.Int32 nLocalVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EResult GetGameCoordinatorServerLogin (out Steamworks.SteamDatagramGameCoordinatorServerLogin pLoginInfo, out System.Int32 pcbSignedBlob, System.IntPtr pBlob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HSteamNetConnection ConnectP2PCustomSignaling (out Steamworks.ISteamNetworkingConnectionSignaling pSignaling, Steamworks.SteamNetworkingIdentity pPeerIdentity, System.Int32 nRemoteVirtualPort, System.Int32 nOptions, Steamworks.SteamNetworkingConfigValue_t[] pOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReceivedP2PCustomSignal (System.IntPtr pMsg, System.Int32 cbMsg, out Steamworks.ISteamNetworkingSignalingRecvContext pContext)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetCertificateRequest (out System.Int32 pcbBlob, System.IntPtr pBlob, out Steamworks.SteamNetworkingErrMsg errMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCertificate (System.IntPtr pCertificate, System.Int32 cbCertificate, out Steamworks.SteamNetworkingErrMsg errMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RunCallbacks ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamNetworkingUtils 
	         {
                public static      System.IntPtr AllocateMessage (System.Int32 cbAllocateBuffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void InitRelayNetworkAccess ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingAvailability GetRelayNetworkStatus (out Steamworks.SteamRelayNetworkStatus_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single GetLocalPingLocation (out Steamworks.SteamNetworkPingLocation_t result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 EstimatePingTimeBetweenTwoLocations (Steamworks.SteamNetworkPingLocation_t location1, Steamworks.SteamNetworkPingLocation_t location2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 EstimatePingTimeFromLocalHost (Steamworks.SteamNetworkPingLocation_t remoteLocation)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ConvertPingLocationToString (Steamworks.SteamNetworkPingLocation_t location, out System.String pszBuf, System.Int32 cchBufSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ParsePingLocationString (System.String pszString, out Steamworks.SteamNetworkPingLocation_t result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CheckPingDataUpToDate (System.Single flMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPingToDataCenter (Steamworks.SteamNetworkingPOPID popID, out Steamworks.SteamNetworkingPOPID pViaRelayPoP)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetDirectPingToPOP (Steamworks.SteamNetworkingPOPID popID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPOPCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPOPList (out Steamworks.SteamNetworkingPOPID list, System.Int32 nListSz)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamNetworkingMicroseconds GetLocalTimestamp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetDebugOutputFunction (Steamworks.ESteamNetworkingSocketsDebugOutputType eDetailLevel, Steamworks.FSteamNetworkingSocketsDebugOutput pfnFunc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetConfigValue (Steamworks.ESteamNetworkingConfigValue eValue, Steamworks.ESteamNetworkingConfigScope eScopeType, System.IntPtr scopeObj, Steamworks.ESteamNetworkingConfigDataType eDataType, System.IntPtr pArg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingGetConfigValueResult GetConfigValue (Steamworks.ESteamNetworkingConfigValue eValue, Steamworks.ESteamNetworkingConfigScope eScopeType, System.IntPtr scopeObj, out Steamworks.ESteamNetworkingConfigDataType pOutDataType, System.IntPtr pResult, out System.UInt64 cbResult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetConfigValueInfo (Steamworks.ESteamNetworkingConfigValue eValue, System.IntPtr pOutName, out Steamworks.ESteamNetworkingConfigDataType pOutDataType, out Steamworks.ESteamNetworkingConfigScope pOutScope, out Steamworks.ESteamNetworkingConfigValue pOutNextValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamNetworkingConfigValue GetFirstConfigValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SteamNetworkingIPAddr_ToString (Steamworks.SteamNetworkingIPAddr addr, out System.String buf, System.UInt32 cbBuf, System.Boolean bWithPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SteamNetworkingIPAddr_ParseString (out Steamworks.SteamNetworkingIPAddr pAddr, System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SteamNetworkingIdentity_ToString (Steamworks.SteamNetworkingIdentity identity, out System.String buf, System.UInt32 cbBuf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SteamNetworkingIdentity_ParseString (out Steamworks.SteamNetworkingIdentity pIdentity, System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamParentalSettings 
	         {
                public static      System.Boolean BIsParentalLockEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsParentalLockLocked ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsAppBlocked (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsAppInBlockList (Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsFeatureBlocked (Steamworks.EParentalFeature eFeature)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsFeatureInBlockList (Steamworks.EParentalFeature eFeature)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamRemotePlay 
	         {
                public static      System.UInt32 GetSessionCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.RemotePlaySessionID_t GetSessionID (System.Int32 iSessionIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetSessionSteamID (Steamworks.RemotePlaySessionID_t unSessionID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetSessionClientName (Steamworks.RemotePlaySessionID_t unSessionID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamDeviceFormFactor GetSessionClientFormFactor (Steamworks.RemotePlaySessionID_t unSessionID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BGetSessionClientResolution (Steamworks.RemotePlaySessionID_t unSessionID, out System.Int32 pnResolutionX, out System.Int32 pnResolutionY)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BSendRemotePlayTogetherInvite (Steamworks.CSteamID steamIDFriend)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamRemoteStorage 
	         {
                public static      System.Boolean FileWrite (System.String pchFile, System.Byte[] pvData, System.Int32 cubData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 FileRead (System.String pchFile, System.Byte[] pvData, System.Int32 cubDataToRead)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t FileWriteAsync (System.String pchFile, System.Byte[] pvData, System.UInt32 cubData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t FileReadAsync (System.String pchFile, System.UInt32 nOffset, System.UInt32 cubToRead)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileReadAsyncComplete (Steamworks.SteamAPICall_t hReadCall, System.Byte[] pvBuffer, System.UInt32 cubToRead)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileForget (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileDelete (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t FileShare (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetSyncPlatforms (System.String pchFile, Steamworks.ERemoteStoragePlatform eRemoteStoragePlatform)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCFileWriteStreamHandle_t FileWriteStreamOpen (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileWriteStreamWriteChunk (Steamworks.UGCFileWriteStreamHandle_t writeHandle, System.Byte[] pvData, System.Int32 cubData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileWriteStreamClose (Steamworks.UGCFileWriteStreamHandle_t writeHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileWriteStreamCancel (Steamworks.UGCFileWriteStreamHandle_t writeHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileExists (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FilePersisted (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFileSize (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int64 GetFileTimestamp (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ERemoteStoragePlatform GetSyncPlatforms (System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetFileCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetFileNameAndSize (System.Int32 iFile, out System.Int32 pnFileSizeInBytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQuota (out System.UInt64 pnTotalBytes, out System.UInt64 puAvailableBytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsCloudEnabledForAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsCloudEnabledForApp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetCloudEnabledForApp (System.Boolean bEnabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UGCDownload (Steamworks.UGCHandle_t hContent, System.UInt32 unPriority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUGCDownloadProgress (Steamworks.UGCHandle_t hContent, out System.Int32 pnBytesDownloaded, out System.Int32 pnBytesExpected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUGCDetails (Steamworks.UGCHandle_t hContent, out Steamworks.AppId_t pnAppID, out System.String ppchName, out System.Int32 pnFileSizeInBytes, out Steamworks.CSteamID pSteamIDOwner)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 UGCRead (Steamworks.UGCHandle_t hContent, System.Byte[] pvData, System.Int32 cubDataToRead, System.UInt32 cOffset, Steamworks.EUGCReadAction eAction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetCachedUGCCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCHandle_t GetCachedUGCHandle (System.Int32 iCachedContent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t PublishWorkshopFile (System.String pchFile, System.String pchPreviewFile, Steamworks.AppId_t nConsumerAppId, System.String pchTitle, System.String pchDescription, Steamworks.ERemoteStoragePublishedFileVisibility eVisibility, System.Collections.Generic.IList<System.String> pTags, Steamworks.EWorkshopFileType eWorkshopFileType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileFile (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.String pchFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFilePreviewFile (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.String pchPreviewFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileTitle (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.String pchTitle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileDescription (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.String pchDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileVisibility (Steamworks.PublishedFileUpdateHandle_t updateHandle, Steamworks.ERemoteStoragePublishedFileVisibility eVisibility)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileTags (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.Collections.Generic.IList<System.String> pTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CommitPublishedFileUpdate (Steamworks.PublishedFileUpdateHandle_t updateHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetPublishedFileDetails (Steamworks.PublishedFileId_t unPublishedFileId, System.UInt32 unMaxSecondsOld)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DeletePublishedFile (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumerateUserPublishedFiles (System.UInt32 unStartIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SubscribePublishedFile (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumerateUserSubscribedFiles (System.UInt32 unStartIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UnsubscribePublishedFile (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdatePublishedFileSetChangeDescription (Steamworks.PublishedFileUpdateHandle_t updateHandle, System.String pchChangeDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetPublishedItemVoteDetails (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UpdateUserPublishedItemVote (Steamworks.PublishedFileId_t unPublishedFileId, System.Boolean bVoteUp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetUserPublishedItemVoteDetails (Steamworks.PublishedFileId_t unPublishedFileId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumerateUserSharedWorkshopFiles (Steamworks.CSteamID steamId, System.UInt32 unStartIndex, System.Collections.Generic.IList<System.String> pRequiredTags, System.Collections.Generic.IList<System.String> pExcludedTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t PublishVideo (Steamworks.EWorkshopVideoProvider eVideoProvider, System.String pchVideoAccount, System.String pchVideoIdentifier, System.String pchPreviewFile, Steamworks.AppId_t nConsumerAppId, System.String pchTitle, System.String pchDescription, Steamworks.ERemoteStoragePublishedFileVisibility eVisibility, System.Collections.Generic.IList<System.String> pTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SetUserPublishedFileAction (Steamworks.PublishedFileId_t unPublishedFileId, Steamworks.EWorkshopFileAction eAction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumeratePublishedFilesByUserAction (Steamworks.EWorkshopFileAction eAction, System.UInt32 unStartIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t EnumeratePublishedWorkshopFiles (Steamworks.EWorkshopEnumerationType eEnumerationType, System.UInt32 unStartIndex, System.UInt32 unCount, System.UInt32 unDays, System.Collections.Generic.IList<System.String> pTags, System.Collections.Generic.IList<System.String> pUserTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UGCDownloadToLocation (Steamworks.UGCHandle_t hContent, System.String pchLocation, System.UInt32 unPriority)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamScreenshots 
	         {
                public static      Steamworks.ScreenshotHandle WriteScreenshot (System.Byte[] pubRGB, System.UInt32 cubRGB, System.Int32 nWidth, System.Int32 nHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ScreenshotHandle AddScreenshotToLibrary (System.String pchFilename, System.String pchThumbnailFilename, System.Int32 nWidth, System.Int32 nHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TriggerScreenshot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void HookScreenshots (System.Boolean bHook)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLocation (Steamworks.ScreenshotHandle hScreenshot, System.String pchLocation)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TagUser (Steamworks.ScreenshotHandle hScreenshot, Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean TagPublishedFile (Steamworks.ScreenshotHandle hScreenshot, Steamworks.PublishedFileId_t unPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsScreenshotsHooked ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ScreenshotHandle AddVRScreenshotToLibrary (Steamworks.EVRScreenshotType eType, System.String pchFilename, System.String pchVRFilename)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamUGC 
	         {
                public static      Steamworks.UGCQueryHandle_t CreateQueryUserUGCRequest (Steamworks.AccountID_t unAccountID, Steamworks.EUserUGCList eListType, Steamworks.EUGCMatchingUGCType eMatchingUGCType, Steamworks.EUserUGCListSortOrder eSortOrder, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.UInt32 unPage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryAllUGCRequest (Steamworks.EUGCQuery eQueryType, Steamworks.EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.UInt32 unPage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryAllUGCRequest (Steamworks.EUGCQuery eQueryType, Steamworks.EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, Steamworks.AppId_t nCreatorAppID, Steamworks.AppId_t nConsumerAppID, System.String pchCursor)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCQueryHandle_t CreateQueryUGCDetailsRequest (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SendQueryUGCRequest (Steamworks.UGCQueryHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCResult (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out Steamworks.SteamUGCDetails_t pDetails)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumTags (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 indexTag, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCTagDisplayName (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 indexTag, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCPreviewURL (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out System.String pchURL, System.UInt32 cchURLSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCMetadata (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, out System.String pchMetadata, System.UInt32 cchMetadatasize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCChildren (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 cMaxEntries)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCStatistic (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, Steamworks.EItemStatistic eStatType, out System.UInt64 pStatValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumAdditionalPreviews (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCAdditionalPreview (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 previewIndex, out System.String pchURLOrVideoID, System.UInt32 cchURLSize, out System.String pchOriginalFileName, System.UInt32 cchOriginalFileNameSize, out Steamworks.EItemPreviewType pPreviewType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetQueryUGCNumKeyValueTags (Steamworks.UGCQueryHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.UInt32 keyValueTagIndex, out System.String pchKey, System.UInt32 cchKeySize, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetQueryUGCKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.UInt32 index, System.String pchKey, out System.String pchValue, System.UInt32 cchValueSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ReleaseQueryUGCRequest (Steamworks.UGCQueryHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredTag (Steamworks.UGCQueryHandle_t handle, System.String pTagName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredTagGroup (Steamworks.UGCQueryHandle_t handle, System.Collections.Generic.IList<System.String> pTagGroups)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddExcludedTag (Steamworks.UGCQueryHandle_t handle, System.String pTagName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnOnlyIDs (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnOnlyIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnKeyValueTags (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnKeyValueTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnLongDescription (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnLongDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnMetadata (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnChildren (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnChildren)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnAdditionalPreviews (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnAdditionalPreviews)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnTotalOnly (Steamworks.UGCQueryHandle_t handle, System.Boolean bReturnTotalOnly)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetReturnPlaytimeStats (Steamworks.UGCQueryHandle_t handle, System.UInt32 unDays)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetLanguage (Steamworks.UGCQueryHandle_t handle, System.String pchLanguage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetAllowCachedResponse (Steamworks.UGCQueryHandle_t handle, System.UInt32 unMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetCloudFileNameFilter (Steamworks.UGCQueryHandle_t handle, System.String pMatchCloudFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetMatchAnyTag (Steamworks.UGCQueryHandle_t handle, System.Boolean bMatchAnyTag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetSearchText (Steamworks.UGCQueryHandle_t handle, System.String pSearchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetRankedByTrendDays (Steamworks.UGCQueryHandle_t handle, System.UInt32 unDays)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddRequiredKeyValueTag (Steamworks.UGCQueryHandle_t handle, System.String pKey, System.String pValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestUGCDetails (Steamworks.PublishedFileId_t nPublishedFileID, System.UInt32 unMaxAgeSeconds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CreateItem (Steamworks.AppId_t nConsumerAppId, Steamworks.EWorkshopFileType eFileType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.UGCUpdateHandle_t StartItemUpdate (Steamworks.AppId_t nConsumerAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemTitle (Steamworks.UGCUpdateHandle_t handle, System.String pchTitle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemDescription (Steamworks.UGCUpdateHandle_t handle, System.String pchDescription)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemUpdateLanguage (Steamworks.UGCUpdateHandle_t handle, System.String pchLanguage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemMetadata (Steamworks.UGCUpdateHandle_t handle, System.String pchMetaData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemVisibility (Steamworks.UGCUpdateHandle_t handle, Steamworks.ERemoteStoragePublishedFileVisibility eVisibility)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemTags (Steamworks.UGCUpdateHandle_t updateHandle, System.Collections.Generic.IList<System.String> pTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemContent (Steamworks.UGCUpdateHandle_t handle, System.String pszContentFolder)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetItemPreview (Steamworks.UGCUpdateHandle_t handle, System.String pszPreviewFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetAllowLegacyUpload (Steamworks.UGCUpdateHandle_t handle, System.Boolean bAllowLegacyUpload)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveAllItemKeyValueTags (Steamworks.UGCUpdateHandle_t handle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveItemKeyValueTags (Steamworks.UGCUpdateHandle_t handle, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemKeyValueTag (Steamworks.UGCUpdateHandle_t handle, System.String pchKey, System.String pchValue)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemPreviewFile (Steamworks.UGCUpdateHandle_t handle, System.String pszPreviewFile, Steamworks.EItemPreviewType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean AddItemPreviewVideo (Steamworks.UGCUpdateHandle_t handle, System.String pszVideoID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateItemPreviewFile (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index, System.String pszPreviewFile)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateItemPreviewVideo (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index, System.String pszVideoID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean RemoveItemPreview (Steamworks.UGCUpdateHandle_t handle, System.UInt32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SubmitItemUpdate (Steamworks.UGCUpdateHandle_t handle, System.String pchChangeNote)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EItemUpdateStatus GetItemUpdateProgress (Steamworks.UGCUpdateHandle_t handle, out System.UInt64 punBytesProcessed, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SetUserItemVote (Steamworks.PublishedFileId_t nPublishedFileID, System.Boolean bVoteUp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetUserItemVote (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddItemToFavorites (Steamworks.AppId_t nAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveItemFromFavorites (Steamworks.AppId_t nAppId, Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t SubscribeItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UnsubscribeItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetNumSubscribedItems ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetSubscribedItems (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 cMaxEntries)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetItemState (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemInstallInfo (Steamworks.PublishedFileId_t nPublishedFileID, out System.UInt64 punSizeOnDisk, out System.String pchFolder, System.UInt32 cchFolderSize, out System.UInt32 punTimeStamp)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetItemDownloadInfo (Steamworks.PublishedFileId_t nPublishedFileID, out System.UInt64 punBytesDownloaded, out System.UInt64 punBytesTotal)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DownloadItem (Steamworks.PublishedFileId_t nPublishedFileID, System.Boolean bHighPriority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BInitWorkshopForGameServer (Steamworks.DepotId_t unWorkshopDepotID, System.String pszFolder)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SuspendDownloads (System.Boolean bSuspend)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StartPlaytimeTracking (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StopPlaytimeTracking (Steamworks.PublishedFileId_t[] pvecPublishedFileID, System.UInt32 unNumPublishedFileIDs)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t StopPlaytimeTrackingForAllItems ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddDependency (Steamworks.PublishedFileId_t nParentPublishedFileID, Steamworks.PublishedFileId_t nChildPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveDependency (Steamworks.PublishedFileId_t nParentPublishedFileID, Steamworks.PublishedFileId_t nChildPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AddAppDependency (Steamworks.PublishedFileId_t nPublishedFileID, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RemoveAppDependency (Steamworks.PublishedFileId_t nPublishedFileID, Steamworks.AppId_t nAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetAppDependencies (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DeleteItem (Steamworks.PublishedFileId_t nPublishedFileID)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamUser 
	         {
                public static      Steamworks.HSteamUser GetHSteamUser ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BLoggedOn ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.CSteamID GetSteamID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 InitiateGameConnection (System.Byte[] pAuthBlob, System.Int32 cbMaxAuthBlob, Steamworks.CSteamID steamIDGameServer, System.UInt32 unIPServer, System.UInt16 usPortServer, System.Boolean bSecure)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TerminateGameConnection (System.UInt32 unIPServer, System.UInt16 usPortServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void TrackAppUsageEvent (Steamworks.CGameID gameID, System.Int32 eAppUsageEvent, System.String pchExtraInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserDataFolder (out System.String pchBuffer, System.Int32 cubBuffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartVoiceRecording ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StopVoiceRecording ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EVoiceResult GetAvailableVoice (out System.UInt32 pcbCompressed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EVoiceResult GetVoice (System.Boolean bWantCompressed, System.Byte[] pDestBuffer, System.UInt32 cbDestBufferSize, out System.UInt32 nBytesWritten)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EVoiceResult DecompressVoice (System.Byte[] pCompressed, System.UInt32 cbCompressed, System.Byte[] pDestBuffer, System.UInt32 cbDestBufferSize, out System.UInt32 nBytesWritten, System.UInt32 nDesiredSampleRate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetVoiceOptimalSampleRate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.HAuthTicket GetAuthSessionTicket (System.Byte[] pTicket, System.Int32 cbMaxTicket, out System.UInt32 pcbTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EBeginAuthSessionResult BeginAuthSession (System.Byte[] pAuthTicket, System.Int32 cbAuthTicket, Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndAuthSession (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CancelAuthTicket (Steamworks.HAuthTicket hAuthTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EUserHasLicenseForAppResult UserHasLicenseForApp (Steamworks.CSteamID steamID, Steamworks.AppId_t appID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsBehindNAT ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AdvertiseGame (Steamworks.CSteamID steamIDGameServer, System.UInt32 unIPServer, System.UInt16 usPortServer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestEncryptedAppTicket (System.Byte[] pDataToInclude, System.Int32 cbDataToInclude)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetEncryptedAppTicket (System.Byte[] pTicket, System.Int32 cbMaxTicket, out System.UInt32 pcbTicket)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetGameBadgeLevel (System.Int32 nSeries, System.Boolean bFoil)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetPlayerSteamLevel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestStoreAuthURL (System.String pchRedirectURL)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsPhoneVerified ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsTwoFactorEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsPhoneIdentifying ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BIsPhoneRequiringVerification ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetMarketEligibility ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetDurationControl ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BSetDurationControlOnlineState (Steamworks.EDurationControlOnlineState eNewState)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamUserStats 
	         {
                public static      System.Boolean RequestCurrentStats ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetStat (System.String pchName, out System.Int32 pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetStat (System.String pchName, out System.Single pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetStat (System.String pchName, System.Int32 nData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetStat (System.String pchName, System.Single fData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean UpdateAvgRateStat (System.String pchName, System.Single flCountThisSession, System.Double dSessionLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAchievement (System.String pchName, out System.Boolean pbAchieved)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean SetAchievement (System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ClearAchievement (System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAchievementAndUnlockTime (System.String pchName, out System.Boolean pbAchieved, out System.UInt32 punUnlockTime)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean StoreStats ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetAchievementIcon (System.String pchName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetAchievementDisplayAttribute (System.String pchName, System.String pchKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IndicateAchievementProgress (System.String pchName, System.UInt32 nCurProgress, System.UInt32 nMaxProgress)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetNumAchievements ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetAchievementName (System.UInt32 iAchievement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestUserStats (Steamworks.CSteamID steamIDUser)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Int32 pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserStat (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Single pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserAchievement (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Boolean pbAchieved)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetUserAchievementAndUnlockTime (Steamworks.CSteamID steamIDUser, System.String pchName, out System.Boolean pbAchieved, out System.UInt32 punUnlockTime)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ResetAllStats (System.Boolean bAchievementsToo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t FindOrCreateLeaderboard (System.String pchLeaderboardName, Steamworks.ELeaderboardSortMethod eLeaderboardSortMethod, Steamworks.ELeaderboardDisplayType eLeaderboardDisplayType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t FindLeaderboard (System.String pchLeaderboardName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetLeaderboardName (Steamworks.SteamLeaderboard_t hSteamLeaderboard)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetLeaderboardEntryCount (Steamworks.SteamLeaderboard_t hSteamLeaderboard)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ELeaderboardSortMethod GetLeaderboardSortMethod (Steamworks.SteamLeaderboard_t hSteamLeaderboard)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ELeaderboardDisplayType GetLeaderboardDisplayType (Steamworks.SteamLeaderboard_t hSteamLeaderboard)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DownloadLeaderboardEntries (Steamworks.SteamLeaderboard_t hSteamLeaderboard, Steamworks.ELeaderboardDataRequest eLeaderboardDataRequest, System.Int32 nRangeStart, System.Int32 nRangeEnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t DownloadLeaderboardEntriesForUsers (Steamworks.SteamLeaderboard_t hSteamLeaderboard, Steamworks.CSteamID[] prgUsers, System.Int32 cUsers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetDownloadedLeaderboardEntry (Steamworks.SteamLeaderboardEntries_t hSteamLeaderboardEntries, System.Int32 index, out Steamworks.LeaderboardEntry_t pLeaderboardEntry, System.Int32[] pDetails, System.Int32 cDetailsMax)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t UploadLeaderboardScore (Steamworks.SteamLeaderboard_t hSteamLeaderboard, Steamworks.ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, System.Int32 nScore, System.Int32[] pScoreDetails, System.Int32 cScoreDetailsCount)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t AttachLeaderboardUGC (Steamworks.SteamLeaderboard_t hSteamLeaderboard, Steamworks.UGCHandle_t hUGC)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t GetNumberOfCurrentPlayers ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestGlobalAchievementPercentages ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetMostAchievedAchievementInfo (out System.String pchName, System.UInt32 unNameBufLen, out System.Single pflPercent, out System.Boolean pbAchieved)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetNextMostAchievedAchievementInfo (System.Int32 iIteratorPrevious, out System.String pchName, System.UInt32 unNameBufLen, out System.Single pflPercent, out System.Boolean pbAchieved)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAchievementAchievedPercent (System.String pchName, out System.Single pflPercent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t RequestGlobalStats (System.Int32 nHistoryDays)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetGlobalStat (System.String pchStatName, out System.Int64 pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetGlobalStat (System.String pchStatName, out System.Double pData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetGlobalStatHistory (System.String pchStatName, System.Int64[] pData, System.UInt32 cubData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 GetGlobalStatHistory (System.String pchStatName, System.Double[] pData, System.UInt32 cubData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAchievementProgressLimits (System.String pchName, out System.Int32 pnMinProgress, out System.Int32 pnMaxProgress)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAchievementProgressLimits (System.String pchName, out System.Single pfMinProgress, out System.Single pfMaxProgress)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamUtils 
	         {
                public static      System.UInt32 GetSecondsSinceAppActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetSecondsSinceComputerActive ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.EUniverse GetConnectedUniverse ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetServerRealTime ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetIPCountry ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetImageSize (System.Int32 iImage, out System.UInt32 pnWidth, out System.UInt32 pnHeight)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetImageRGBA (System.Int32 iImage, System.Byte[] pubDest, System.Int32 nDestBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Byte GetCurrentBatteryPower ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.AppId_t GetAppID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetOverlayNotificationPosition (Steamworks.ENotificationPosition eNotificationPosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsAPICallCompleted (Steamworks.SteamAPICall_t hSteamAPICall, out System.Boolean pbFailed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamAPICallFailure GetAPICallFailureReason (Steamworks.SteamAPICall_t hSteamAPICall)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetAPICallResult (Steamworks.SteamAPICall_t hSteamAPICall, System.IntPtr pCallback, System.Int32 cubCallback, System.Int32 iCallbackExpected, out System.Boolean pbFailed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetIPCCallCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetWarningMessageHook (Steamworks.SteamAPIWarningMessageHook_t pFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsOverlayEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean BOverlayNeedsPresent ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.SteamAPICall_t CheckFileSignature (System.String szFileName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean ShowGamepadTextInput (Steamworks.EGamepadTextInputMode eInputMode, Steamworks.EGamepadTextInputLineMode eLineInputMode, System.String pchDescription, System.UInt32 unCharMax, System.String pchExistingText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.UInt32 GetEnteredGamepadTextLength ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetEnteredGamepadTextInput (out System.String pchText, System.UInt32 cchText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetSteamUILanguage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamRunningInVR ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetOverlayNotificationInset (System.Int32 nHorizontalInset, System.Int32 nVerticalInset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamInBigPictureMode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartVRDashboard ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsVRHeadsetStreamingEnabled ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetVRHeadsetStreamingEnabled (System.Boolean bEnabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsSteamChinaLauncher ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean InitFilterText (System.UInt32 unFilterOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 FilterText (Steamworks.ETextFilteringContext eContext, Steamworks.CSteamID sourceSteamID, System.String pchInputMessage, out System.String pchOutFilteredText, System.UInt32 nByteSizeOutFilteredText)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Steamworks.ESteamIPv6ConnectivityState GetIPv6ConnectivityState (Steamworks.ESteamIPv6ConnectivityProtocol eProtocol)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public abstract class SteamVideo 
	         {
                public static      void GetVideoURL (Steamworks.AppId_t unVideoAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsBroadcasting (out System.Int32 pnNumViewers)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetOPFSettings (Steamworks.AppId_t unVideoAppID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean GetOPFStringForApp (Steamworks.AppId_t unVideoAppID, out System.String pchBuffer, System.Int32 pnBufferSize)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public class gameserveritem_t 
	         {
                public       System.String GetGameDir ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetGameDir (System.String dir)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetMap ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetMap (System.String map)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetGameDescription ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetGameDescription (System.String desc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetServerName ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetServerName (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetGameTags ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetGameTags (System.String tags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public gameserveritem_t ()  {
                throw new System.NotImplementedException();
            }
                            public  Steamworks.servernetadr_t m_NetAdr;
                                    public  System.Int32 m_nPing;
                                    public  System.Boolean m_bHadSuccessfulResponse;
                                    public  System.Boolean m_bDoNotRefresh;
                                    public  System.UInt32 m_nAppID;
                                    public  System.Int32 m_nPlayers;
                                    public  System.Int32 m_nMaxPlayers;
                                    public  System.Int32 m_nBotPlayers;
                                    public  System.Boolean m_bPassword;
                                    public  System.Boolean m_bSecure;
                                    public  System.UInt32 m_ulTimeLastPlayed;
                                    public  System.Int32 m_nServerVersion;
                                    public  Steamworks.CSteamID m_steamID;
                }

            }
                 namespace  Steamworks {
              public struct servernetadr_t 
	         {
                public       void Init (System.UInt32 ip, System.UInt16 usQueryPort, System.UInt16 usConnectionPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt16 GetQueryPort ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetQueryPort (System.UInt16 usPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt16 GetConnectionPort ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetConnectionPort (System.UInt16 usPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetIP ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIP (System.UInt32 unIP)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetConnectionAddressString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetQueryAddressString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ToString (System.UInt32 unIP, System.UInt16 usPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.servernetadr_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.servernetadr_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
             public delegate void SteamAPIWarningMessageHook_t ();
    
            }
                 namespace  Steamworks {
             public delegate void SteamAPI_CheckCallbackRegistered_t ();
    
            }
                 namespace  Steamworks {
              public struct CGameID 
	 			: System.IEquatable<Steamworks.CGameID>,System.IComparable<Steamworks.CGameID>  
                    {
                public       System.Boolean IsSteamApp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsMod ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsShortcut ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsP2PFile ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.AppId_t AppID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.CGameID.EGameIDType Type ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 ModID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Set (System.UInt64 GameID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.CGameID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.CGameID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CGameID (System.UInt64 GameID)  {
                throw new System.NotImplementedException();
            }
                     public CGameID (Steamworks.AppId_t nAppID)  {
                throw new System.NotImplementedException();
            }
                     public CGameID (Steamworks.AppId_t nAppID, System.UInt32 nModID)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_GameID;
                     public enum  EGameIDType {
                k_EGameIDTypeApp,
                        k_EGameIDTypeGameMod,
                        k_EGameIDTypeShortcut,
                        k_EGameIDTypeP2P,
                }
    }

            }
                 namespace  Steamworks {
              public struct CSteamID 
	 			: System.IEquatable<Steamworks.CSteamID>,System.IComparable<Steamworks.CSteamID>  
                    {
                public       void Set (Steamworks.AccountID_t unAccountID, Steamworks.EUniverse eUniverse, Steamworks.EAccountType eAccountType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void InstancedSet (Steamworks.AccountID_t unAccountID, System.UInt32 unInstance, Steamworks.EUniverse eUniverse, Steamworks.EAccountType eAccountType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CreateBlankAnonLogon (Steamworks.EUniverse eUniverse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CreateBlankAnonUserLogon (Steamworks.EUniverse eUniverse)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BBlankAnonAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BGameServerAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BPersistentGameServerAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BAnonGameServerAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BContentServerAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BClanAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BChatAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsLobby ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BIndividualAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BAnonAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BAnonUserAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean BConsoleUserAccount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetAccountID (Steamworks.AccountID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetAccountInstance (System.UInt32 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetEAccountType (Steamworks.EAccountType other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetEUniverse (Steamworks.EUniverse other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.AccountID_t GetAccountID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetUnAccountInstance ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.EAccountType GetEAccountType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.EUniverse GetEUniverse ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.CSteamID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.CSteamID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CSteamID (Steamworks.AccountID_t unAccountID, Steamworks.EUniverse eUniverse, Steamworks.EAccountType eAccountType)  {
                throw new System.NotImplementedException();
            }
                     public CSteamID (Steamworks.AccountID_t unAccountID, System.UInt32 unAccountInstance, Steamworks.EUniverse eUniverse, Steamworks.EAccountType eAccountType)  {
                throw new System.NotImplementedException();
            }
                     public CSteamID (System.UInt64 ulSteamID)  {
                throw new System.NotImplementedException();
            }
                     static CSteamID ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamID;
                                    public static Steamworks.CSteamID Nil;
                                    public static Steamworks.CSteamID OutofDateGS;
                                    public static Steamworks.CSteamID LanModeGS;
                                    public static Steamworks.CSteamID NotInitYetGS;
                                    public static Steamworks.CSteamID NonSteamGS;
                }

            }
                 namespace  Steamworks {
              public struct HAuthTicket 
	 			: System.IEquatable<Steamworks.HAuthTicket>,System.IComparable<Steamworks.HAuthTicket>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HAuthTicket other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HAuthTicket other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HAuthTicket (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HAuthTicket ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HAuthTicket;
                                    public static Steamworks.HAuthTicket Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamDatagramHostedAddress 
	         {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  System.Int32 m_cbSize;
                                    public  System.Byte[] m_data;
                }

            }
                 namespace  Steamworks {
              public struct SteamDatagramRelayAuthTicket 
	         {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public struct FriendsGroupID_t 
	 			: System.IEquatable<Steamworks.FriendsGroupID_t>,System.IComparable<Steamworks.FriendsGroupID_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.FriendsGroupID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.FriendsGroupID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FriendsGroupID_t (System.Int16 value)  {
                throw new System.NotImplementedException();
            }
                     static FriendsGroupID_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int16 m_FriendsGroupID;
                                    public static Steamworks.FriendsGroupID_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HHTMLBrowser 
	 			: System.IEquatable<Steamworks.HHTMLBrowser>,System.IComparable<Steamworks.HHTMLBrowser>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HHTMLBrowser other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HHTMLBrowser other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HHTMLBrowser (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HHTMLBrowser ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HHTMLBrowser;
                                    public static Steamworks.HHTMLBrowser Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HTTPCookieContainerHandle 
	 			: System.IEquatable<Steamworks.HTTPCookieContainerHandle>,System.IComparable<Steamworks.HTTPCookieContainerHandle>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HTTPCookieContainerHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HTTPCookieContainerHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HTTPCookieContainerHandle (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HTTPCookieContainerHandle ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HTTPCookieContainerHandle;
                                    public static Steamworks.HTTPCookieContainerHandle Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HTTPRequestHandle 
	 			: System.IEquatable<Steamworks.HTTPRequestHandle>,System.IComparable<Steamworks.HTTPRequestHandle>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HTTPRequestHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HTTPRequestHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HTTPRequestHandle (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HTTPRequestHandle ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HTTPRequestHandle;
                                    public static Steamworks.HTTPRequestHandle Invalid;
                }

            }
                 namespace  Steamworks {
              public struct InputActionSetHandle_t 
	 			: System.IEquatable<Steamworks.InputActionSetHandle_t>,System.IComparable<Steamworks.InputActionSetHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.InputActionSetHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.InputActionSetHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InputActionSetHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_InputActionSetHandle;
                }

            }
                 namespace  Steamworks {
              public struct InputAnalogActionHandle_t 
	 			: System.IEquatable<Steamworks.InputAnalogActionHandle_t>,System.IComparable<Steamworks.InputAnalogActionHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.InputAnalogActionHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.InputAnalogActionHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InputAnalogActionHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_InputAnalogActionHandle;
                }

            }
                 namespace  Steamworks {
              public struct InputDigitalActionHandle_t 
	 			: System.IEquatable<Steamworks.InputDigitalActionHandle_t>,System.IComparable<Steamworks.InputDigitalActionHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.InputDigitalActionHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.InputDigitalActionHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InputDigitalActionHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_InputDigitalActionHandle;
                }

            }
                 namespace  Steamworks {
              public struct InputHandle_t 
	 			: System.IEquatable<Steamworks.InputHandle_t>,System.IComparable<Steamworks.InputHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.InputHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.InputHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InputHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_InputHandle;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryResult_t 
	 			: System.IEquatable<Steamworks.SteamInventoryResult_t>,System.IComparable<Steamworks.SteamInventoryResult_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamInventoryResult_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamInventoryResult_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamInventoryResult_t (System.Int32 value)  {
                throw new System.NotImplementedException();
            }
                     static SteamInventoryResult_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 m_SteamInventoryResult;
                                    public static Steamworks.SteamInventoryResult_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamInventoryUpdateHandle_t 
	 			: System.IEquatable<Steamworks.SteamInventoryUpdateHandle_t>,System.IComparable<Steamworks.SteamInventoryUpdateHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamInventoryUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamInventoryUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamInventoryUpdateHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static SteamInventoryUpdateHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamInventoryUpdateHandle;
                                    public static Steamworks.SteamInventoryUpdateHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamItemDef_t 
	 			: System.IEquatable<Steamworks.SteamItemDef_t>,System.IComparable<Steamworks.SteamItemDef_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamItemDef_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamItemDef_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamItemDef_t (System.Int32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 m_SteamItemDef;
                }

            }
                 namespace  Steamworks {
              public struct SteamItemInstanceID_t 
	 			: System.IEquatable<Steamworks.SteamItemInstanceID_t>,System.IComparable<Steamworks.SteamItemInstanceID_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamItemInstanceID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamItemInstanceID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamItemInstanceID_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static SteamItemInstanceID_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamItemInstanceID;
                                    public static Steamworks.SteamItemInstanceID_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HServerListRequest 
	 			: System.IEquatable<Steamworks.HServerListRequest>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HServerListRequest other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HServerListRequest (System.IntPtr value)  {
                throw new System.NotImplementedException();
            }
                     static HServerListRequest ()  {
                throw new System.NotImplementedException();
            }
                            public  System.IntPtr m_HServerListRequest;
                                    public static Steamworks.HServerListRequest Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HServerQuery 
	 			: System.IEquatable<Steamworks.HServerQuery>,System.IComparable<Steamworks.HServerQuery>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HServerQuery other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HServerQuery other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HServerQuery (System.Int32 value)  {
                throw new System.NotImplementedException();
            }
                     static HServerQuery ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 m_HServerQuery;
                                    public static Steamworks.HServerQuery Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SNetListenSocket_t 
	 			: System.IEquatable<Steamworks.SNetListenSocket_t>,System.IComparable<Steamworks.SNetListenSocket_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SNetListenSocket_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SNetListenSocket_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SNetListenSocket_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_SNetListenSocket;
                }

            }
                 namespace  Steamworks {
              public struct SNetSocket_t 
	 			: System.IEquatable<Steamworks.SNetSocket_t>,System.IComparable<Steamworks.SNetSocket_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SNetSocket_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SNetSocket_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SNetSocket_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_SNetSocket;
                }

            }
                 namespace  Steamworks {
              public struct ISteamNetworkingConnectionSignaling 
	         {
                public       System.Boolean SendSignal (Steamworks.HSteamNetConnection hConn, Steamworks.SteamNetConnectionInfo_t info, System.IntPtr pMsg, System.Int32 cbMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
              public struct ISteamNetworkingSignalingRecvContext 
	         {
                public       System.IntPtr OnConnectRequest (Steamworks.HSteamNetConnection hConn, Steamworks.SteamNetworkingIdentity identityPeer, System.Int32 nLocalVirtualPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SendRejectionSignal (Steamworks.SteamNetworkingIdentity identityPeer, System.IntPtr pMsg, System.Int32 cbMsg)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Steamworks {
             public delegate void FSteamNetworkingSocketsDebugOutput ();
    
            }
                 namespace  Steamworks {
              public struct HSteamListenSocket 
	 			: System.IEquatable<Steamworks.HSteamListenSocket>,System.IComparable<Steamworks.HSteamListenSocket>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HSteamListenSocket other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HSteamListenSocket other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HSteamListenSocket (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HSteamListenSocket ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HSteamListenSocket;
                                    public static Steamworks.HSteamListenSocket Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HSteamNetConnection 
	 			: System.IEquatable<Steamworks.HSteamNetConnection>,System.IComparable<Steamworks.HSteamNetConnection>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HSteamNetConnection other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HSteamNetConnection other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HSteamNetConnection (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HSteamNetConnection ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HSteamNetConnection;
                                    public static Steamworks.HSteamNetConnection Invalid;
                }

            }
                 namespace  Steamworks {
              public struct HSteamNetPollGroup 
	 			: System.IEquatable<Steamworks.HSteamNetPollGroup>,System.IComparable<Steamworks.HSteamNetPollGroup>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HSteamNetPollGroup other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HSteamNetPollGroup other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HSteamNetPollGroup (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static HSteamNetPollGroup ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_HSteamNetPollGroup;
                                    public static Steamworks.HSteamNetPollGroup Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingConfigValue_t 
	         {
                            public  Steamworks.ESteamNetworkingConfigValue m_eValue;
                                    public  Steamworks.ESteamNetworkingConfigDataType m_eDataType;
                                    public  Steamworks.SteamNetworkingConfigValue_t.OptionValue m_val;
                     public struct OptionValue 
	         {
                            public  System.Int32 m_int32;
                                    public  System.Int64 m_int64;
                                    public  System.Single m_float;
                                    public  System.IntPtr m_string;
                                    public  System.IntPtr m_functionPtr;
                }
}

            }
                 namespace  Steamworks {
              public struct SteamNetworkingErrMsg 
	         {
                            public  System.Byte[] m_SteamNetworkingErrMsg;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingIPAddr 
	 			: System.IEquatable<Steamworks.SteamNetworkingIPAddr>  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsIPv6AllZeros ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIPv6 (System.Byte[] ipv6, System.UInt16 nPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIPv4 (System.UInt32 nIP, System.UInt16 nPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsIPv4 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetIPv4 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIPv6LocalHost (System.UInt16 nPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsLocalHost ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToString (out System.String buf, System.Boolean bWithPort)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ParseString (System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamNetworkingIPAddr x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  System.Byte[] m_ipv6;
                                    public  System.UInt16 m_port;
                                    public static System.Int32 k_cchMaxString;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingIdentity 
	 			: System.IEquatable<Steamworks.SteamNetworkingIdentity>  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsInvalid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSteamID (Steamworks.CSteamID steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.CSteamID GetSteamID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSteamID64 (System.UInt64 steamID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 GetSteamID64 ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetIPAddr (Steamworks.SteamNetworkingIPAddr addr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.SteamNetworkingIPAddr GetIPAddr ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetLocalHost ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsLocalHost ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SetGenericString (System.String pszString)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetGenericString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean SetGenericBytes (System.Byte[] data, System.UInt32 cbLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Byte[] GetGenericBytes (out System.Int32 cbLen)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamNetworkingIdentity x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ToString (out System.String buf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ParseString (System.String pszStr)  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  Steamworks.ESteamNetworkingIdentityType m_eType;
                                    public static System.Int32 k_cchMaxString;
                                    public static System.Int32 k_cchMaxGenericString;
                                    public static System.Int32 k_cbMaxGenericBytes;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingMessage_t 
	         {
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public  System.IntPtr m_pData;
                                    public  System.Int32 m_cbSize;
                                    public  Steamworks.HSteamNetConnection m_conn;
                                    public  Steamworks.SteamNetworkingIdentity m_identityPeer;
                                    public  System.Int64 m_nConnUserData;
                                    public  Steamworks.SteamNetworkingMicroseconds m_usecTimeReceived;
                                    public  System.Int64 m_nMessageNumber;
                                    public  System.Int32 m_nChannel;
                                    public  System.Int32 m_nFlags;
                                    public  System.Int64 m_nUserData;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingMicroseconds 
	 			: System.IEquatable<Steamworks.SteamNetworkingMicroseconds>,System.IComparable<Steamworks.SteamNetworkingMicroseconds>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamNetworkingMicroseconds other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamNetworkingMicroseconds other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamNetworkingMicroseconds (System.Int64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int64 m_SteamNetworkingMicroseconds;
                }

            }
                 namespace  Steamworks {
              public struct SteamNetworkingPOPID 
	 			: System.IEquatable<Steamworks.SteamNetworkingPOPID>,System.IComparable<Steamworks.SteamNetworkingPOPID>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamNetworkingPOPID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamNetworkingPOPID other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamNetworkingPOPID (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_SteamNetworkingPOPID;
                }

            }
                 namespace  Steamworks {
              public struct RemotePlaySessionID_t 
	 			: System.IEquatable<Steamworks.RemotePlaySessionID_t>,System.IComparable<Steamworks.RemotePlaySessionID_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.RemotePlaySessionID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.RemotePlaySessionID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RemotePlaySessionID_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_RemotePlaySessionID;
                }

            }
                 namespace  Steamworks {
              public struct PublishedFileId_t 
	 			: System.IEquatable<Steamworks.PublishedFileId_t>,System.IComparable<Steamworks.PublishedFileId_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.PublishedFileId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.PublishedFileId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PublishedFileId_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static PublishedFileId_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_PublishedFileId;
                                    public static Steamworks.PublishedFileId_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct PublishedFileUpdateHandle_t 
	 			: System.IEquatable<Steamworks.PublishedFileUpdateHandle_t>,System.IComparable<Steamworks.PublishedFileUpdateHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.PublishedFileUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.PublishedFileUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PublishedFileUpdateHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static PublishedFileUpdateHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_PublishedFileUpdateHandle;
                                    public static Steamworks.PublishedFileUpdateHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct UGCFileWriteStreamHandle_t 
	 			: System.IEquatable<Steamworks.UGCFileWriteStreamHandle_t>,System.IComparable<Steamworks.UGCFileWriteStreamHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.UGCFileWriteStreamHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.UGCFileWriteStreamHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UGCFileWriteStreamHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static UGCFileWriteStreamHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_UGCFileWriteStreamHandle;
                                    public static Steamworks.UGCFileWriteStreamHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct UGCHandle_t 
	 			: System.IEquatable<Steamworks.UGCHandle_t>,System.IComparable<Steamworks.UGCHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.UGCHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.UGCHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UGCHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static UGCHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_UGCHandle;
                                    public static Steamworks.UGCHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct ScreenshotHandle 
	 			: System.IEquatable<Steamworks.ScreenshotHandle>,System.IComparable<Steamworks.ScreenshotHandle>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.ScreenshotHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.ScreenshotHandle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ScreenshotHandle (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static ScreenshotHandle ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_ScreenshotHandle;
                                    public static Steamworks.ScreenshotHandle Invalid;
                }

            }
                 namespace  Steamworks {
              public struct AccountID_t 
	 			: System.IEquatable<Steamworks.AccountID_t>,System.IComparable<Steamworks.AccountID_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.AccountID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.AccountID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AccountID_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_AccountID;
                }

            }
                 namespace  Steamworks {
              public struct AppId_t 
	 			: System.IEquatable<Steamworks.AppId_t>,System.IComparable<Steamworks.AppId_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.AppId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.AppId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AppId_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static AppId_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_AppId;
                                    public static Steamworks.AppId_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct DepotId_t 
	 			: System.IEquatable<Steamworks.DepotId_t>,System.IComparable<Steamworks.DepotId_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.DepotId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.DepotId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DepotId_t (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                     static DepotId_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_DepotId;
                                    public static Steamworks.DepotId_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct ManifestId_t 
	 			: System.IEquatable<Steamworks.ManifestId_t>,System.IComparable<Steamworks.ManifestId_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.ManifestId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.ManifestId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ManifestId_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static ManifestId_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_ManifestId;
                                    public static Steamworks.ManifestId_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct PartyBeaconID_t 
	 			: System.IEquatable<Steamworks.PartyBeaconID_t>,System.IComparable<Steamworks.PartyBeaconID_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.PartyBeaconID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.PartyBeaconID_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PartyBeaconID_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static PartyBeaconID_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_PartyBeaconID;
                                    public static Steamworks.PartyBeaconID_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct RTime32 
	 			: System.IEquatable<Steamworks.RTime32>,System.IComparable<Steamworks.RTime32>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.RTime32 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.RTime32 other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RTime32 (System.UInt32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 m_RTime32;
                }

            }
                 namespace  Steamworks {
              public struct SiteId_t 
	 			: System.IEquatable<Steamworks.SiteId_t>,System.IComparable<Steamworks.SiteId_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SiteId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SiteId_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SiteId_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static SiteId_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SiteId;
                                    public static Steamworks.SiteId_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamAPICall_t 
	 			: System.IEquatable<Steamworks.SteamAPICall_t>,System.IComparable<Steamworks.SteamAPICall_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamAPICall_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamAPICall_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamAPICall_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static SteamAPICall_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamAPICall;
                                    public static Steamworks.SteamAPICall_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamIPAddress_t 
	         {
                public       System.Net.IPAddress ToIPAddress ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Steamworks.ESteamIPType GetIPType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsSet ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamIPAddress_t (System.Net.IPAddress iPAddress)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Steamworks {
              public struct UGCQueryHandle_t 
	 			: System.IEquatable<Steamworks.UGCQueryHandle_t>,System.IComparable<Steamworks.UGCQueryHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.UGCQueryHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.UGCQueryHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UGCQueryHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static UGCQueryHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_UGCQueryHandle;
                                    public static Steamworks.UGCQueryHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct UGCUpdateHandle_t 
	 			: System.IEquatable<Steamworks.UGCUpdateHandle_t>,System.IComparable<Steamworks.UGCUpdateHandle_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.UGCUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.UGCUpdateHandle_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UGCUpdateHandle_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                     static UGCUpdateHandle_t ()  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_UGCUpdateHandle;
                                    public static Steamworks.UGCUpdateHandle_t Invalid;
                }

            }
                 namespace  Steamworks {
              public struct SteamLeaderboardEntries_t 
	 			: System.IEquatable<Steamworks.SteamLeaderboardEntries_t>,System.IComparable<Steamworks.SteamLeaderboardEntries_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamLeaderboardEntries_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamLeaderboardEntries_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamLeaderboardEntries_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamLeaderboardEntries;
                }

            }
                 namespace  Steamworks {
              public struct SteamLeaderboard_t 
	 			: System.IEquatable<Steamworks.SteamLeaderboard_t>,System.IComparable<Steamworks.SteamLeaderboard_t>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.SteamLeaderboard_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.SteamLeaderboard_t other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SteamLeaderboard_t (System.UInt64 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt64 m_SteamLeaderboard;
                }

            }
                 namespace  Steamworks {
              public struct HSteamPipe 
	 			: System.IEquatable<Steamworks.HSteamPipe>,System.IComparable<Steamworks.HSteamPipe>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HSteamPipe other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HSteamPipe other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HSteamPipe (System.Int32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 m_HSteamPipe;
                }

            }
                 namespace  Steamworks {
              public struct HSteamUser 
	 			: System.IEquatable<Steamworks.HSteamUser>,System.IComparable<Steamworks.HSteamUser>  
                    {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (Steamworks.HSteamUser other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 CompareTo (Steamworks.HSteamUser other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public HSteamUser (System.Int32 value)  {
                throw new System.NotImplementedException();
            }
                            public  System.Int32 m_HSteamUser;
                }

            }
                 namespace  Satsuma {
              public sealed class AStar 
	         {
                public       void AddSource (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilReached (Satsuma.Node target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilReached (System.Func<Satsuma.Node, System.Boolean> isTarget)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Double GetDistance (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.IPath GetPath (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AStar (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Double> cost, System.Func<Satsuma.Node, System.Double> heuristic)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Node, System.Double> Heuristic
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class BellmanFord 
	         {
                public       System.Boolean Reached (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Double GetDistance (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc GetParentArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.IPath GetPath (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BellmanFord (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Double> cost, System.Collections.Generic.IEnumerable<Satsuma.Node> sources)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IPath NegativeCycle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<Satsuma.Node> ReachedNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class Bfs 
	         {
                public       void AddSource (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Step (System.Func<Satsuma.Node, System.Boolean> isTarget, out Satsuma.Node reachedTargetNode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilReached (Satsuma.Node target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilReached (System.Func<Satsuma.Node, System.Boolean> isTarget)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Reached (Satsuma.Node x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetLevel (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc GetParentArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.IPath GetPath (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Bfs (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<Satsuma.Node> ReachedNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class CompleteBipartiteGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       Satsuma.Node GetRedNode (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node GetBlueNode (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsRed (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc GetArc (Satsuma.Node u, Satsuma.Node v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes (Satsuma.CompleteBipartiteGraph.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CompleteBipartiteGraph (System.Int32 redNodeCount, System.Int32 blueNodeCount, Satsuma.Directedness directedness)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 RedNodeCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 BlueNodeCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean Directed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Color {
                Red,
                        Blue,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class CompleteGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       Satsuma.Node GetNode (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetNodeIndex (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc GetArc (Satsuma.Node u, Satsuma.Node v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CompleteGraph (System.Int32 nodeCount, Satsuma.Directedness directedness)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean Directed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class ConnectedComponents 
	         {
                     public ConnectedComponents (Satsuma.IGraph graph, Satsuma.ConnectedComponents.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                          public enum  Flags {
                None,
                        CreateComponents,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class Bipartition 
	         {
                     public Bipartition (Satsuma.IGraph graph, Satsuma.Bipartition.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean Bipartite
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                                          /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                          public enum  Flags {
                None,
                        CreateRedNodes,
                        CreateBlueNodes,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class TopologicalOrder 
	         {
                     public TopologicalOrder (Satsuma.IGraph graph, Satsuma.TopologicalOrder.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean Acyclic
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<Satsuma.Node> Order
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Flags {
                None,
                        CreateOrder,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class StrongComponents 
	         {
                     public StrongComponents (Satsuma.IGraph graph, Satsuma.StrongComponents.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                          public enum  Flags {
                None,
                        CreateComponents,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class BiEdgeConnectedComponents 
	         {
                     public BiEdgeConnectedComponents (Satsuma.IGraph graph, Satsuma.BiEdgeConnectedComponents.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                                          /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                          public enum  Flags {
                None,
                        CreateComponents,
                        CreateBridges,
                }
    }

            }
                 namespace  Satsuma {
              public class BiNodeConnectedComponents 
	         {
                     public BiNodeConnectedComponents (Satsuma.IGraph graph, Satsuma.BiNodeConnectedComponents.Flags flags)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                      public  System.Collections.Generic.Dictionary<Satsuma.Node, System.Int32> Cutvertices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Flags {
                None,
                        CreateComponents,
                        CreateCutvertices,
                }
    }

            }
                 namespace  Satsuma {
              public abstract class FindPathExtensions 
	         {
                public static      Satsuma.IPath FindPath (Satsuma.IGraph graph, System.Collections.Generic.IEnumerable<Satsuma.Node> source, System.Func<Satsuma.Node, System.Boolean> target, Satsuma.Dfs.Direction direction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.IPath FindPath (Satsuma.IGraph graph, Satsuma.Node source, Satsuma.Node target, Satsuma.Dfs.Direction direction)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Satsuma {
              public sealed class ContractedGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node Merge (Satsuma.Node u, Satsuma.Node v)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node Contract (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ContractedGraph (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public abstract class Dfs 
	         {
                public       void Run (Satsuma.IGraph graph, System.Collections.Generic.IEnumerable<Satsuma.Node> roots)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void Start (out Satsuma.Dfs.Direction direction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean NodeEnter (Satsuma.Node node, Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean NodeExit (Satsuma.Node node, Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Boolean BackArc (Satsuma.Node node, Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void StopSearch ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected Dfs ()  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Level
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Direction {
                Undirected,
                        Forward,
                        Backward,
                }
    }

            }
                 namespace  Satsuma {
              public enum  DijkstraMode {
                Sum,
                        Maximum,
                }
    
            }
                 namespace  Satsuma {
              public sealed class Dijkstra 
	         {
                public       void AddSource (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddSource (Satsuma.Node node, System.Double nodeCost)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node Step ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilFixed (Satsuma.Node target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node RunUntilFixed (System.Func<Satsuma.Node, System.Boolean> isTarget)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Reached (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Fixed (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Double GetDistance (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc GetParentArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.IPath GetPath (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Dijkstra (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Double> cost, Satsuma.DijkstraMode mode)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.DijkstraMode Mode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double NullCost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<Satsuma.Node> ReachedNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.IEnumerable<Satsuma.Node> FixedNodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public struct DisjointSetSet<T> 
	 			: System.IEquatable<Satsuma.DisjointSetSet<T>>  
                    {
                public       System.Boolean Equals (Satsuma.DisjointSetSet<T> other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DisjointSetSet (T representative)  {
                throw new System.NotImplementedException();
            }
         public  T Representative
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public interface IReadOnlyDisjointSet<T> 
	         {
                       Satsuma.DisjointSetSet<T> WhereIs (T element)  
                    ;
                           System.Collections.Generic.IEnumerable<T> Elements (Satsuma.DisjointSetSet<T> aSet)  
                    ;
            }

            }
                 namespace  Satsuma {
              public interface IDisjointSet<T> 
	 			: Satsuma.IReadOnlyDisjointSet<T>,Satsuma.IClearable  
                    {
                       Satsuma.DisjointSetSet<T> Union (Satsuma.DisjointSetSet<T> a, Satsuma.DisjointSetSet<T> b)  
                    ;
            }

            }
                 namespace  Satsuma {
              public sealed class DisjointSet<T> 
	 			: Satsuma.IDisjointSet<T>,Satsuma.IReadOnlyDisjointSet<T>,Satsuma.IClearable  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.DisjointSetSet<T> WhereIs (T element)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.DisjointSetSet<T> Union (Satsuma.DisjointSetSet<T> a, Satsuma.DisjointSetSet<T> b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<T> Elements (Satsuma.DisjointSetSet<T> aSet)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DisjointSet ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public struct Node 
	 			: System.IEquatable<Satsuma.Node>  
                    {
                public       System.Boolean Equals (Satsuma.Node other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Node (System.Int64 id)  {
                throw new System.NotImplementedException();
            }
         public  System.Int64 Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node Invalid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public struct Arc 
	 			: System.IEquatable<Satsuma.Arc>  
                    {
                public       System.Boolean Equals (Satsuma.Arc other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Arc (System.Int64 id)  {
                throw new System.NotImplementedException();
            }
         public  System.Int64 Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Arc Invalid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public enum  Directedness {
                Directed,
                        Undirected,
                }
    
            }
                 namespace  Satsuma {
              public interface IBuildableGraph 
	 			: Satsuma.IClearable  
                    {
                       Satsuma.Node AddNode ()  
                    ;
                           Satsuma.Arc AddArc (Satsuma.Node u, Satsuma.Node v, Satsuma.Directedness directedness)  
                    ;
            }

            }
                 namespace  Satsuma {
              public interface IDestroyableGraph 
	 			: Satsuma.IClearable  
                    {
                       System.Boolean DeleteNode (Satsuma.Node node)  
                    ;
                           System.Boolean DeleteArc (Satsuma.Arc arc)  
                    ;
            }

            }
                 namespace  Satsuma {
              public interface IArcLookup 
	         {
                       Satsuma.Node U (Satsuma.Arc arc)  
                    ;
                           Satsuma.Node V (Satsuma.Arc arc)  
                    ;
                           System.Boolean IsEdge (Satsuma.Arc arc)  
                    ;
            }

            }
                 namespace  Satsuma {
              public abstract class ArcLookupExtensions 
	         {
                public static      System.String ArcToString (Satsuma.IArcLookup graph, Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Node Other (Satsuma.IArcLookup graph, Satsuma.Arc arc, Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Node[] Nodes (Satsuma.IArcLookup graph, Satsuma.Arc arc, System.Boolean allowDuplicates)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Satsuma {
              public enum  ArcFilter {
                All,
                        Edge,
                        Forward,
                        Backward,
                }
    
            }
                 namespace  Satsuma {
              public interface IGraph 
	 			: Satsuma.IArcLookup  
                    {
                       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
                    ;
                           System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
                    ;
                           System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
                    ;
                           System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
                    ;
                           System.Int32 NodeCount ()  
                    ;
                           System.Int32 ArcCount (Satsuma.ArcFilter filter)  
                    ;
                           System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
                    ;
                           System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
                    ;
                           System.Boolean HasNode (Satsuma.Node node)  
                    ;
                           System.Boolean HasArc (Satsuma.Arc arc)  
                    ;
            }

            }
                 namespace  Satsuma {
              public sealed class CustomGraph 
	 			: Satsuma.Supergraph,Satsuma.IBuildableGraph,Satsuma.IClearable,Satsuma.IDestroyableGraph,Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                     public CustomGraph () : base(null) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public interface IMatching 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                       Satsuma.Arc MatchedArc (Satsuma.Node node)  
                    ;
               Satsuma.IGraph Graph
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class Matching 
	 			: Satsuma.IMatching,Satsuma.IGraph,Satsuma.IArcLookup,Satsuma.IClearable  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Enable (Satsuma.Arc arc, System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc MatchedArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Matching (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class MaximumMatching 
	 			: Satsuma.IClearable  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GreedyGrow (System.Int32 maxImprovements)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MaximumMatching (Satsuma.IGraph graph, System.Func<Satsuma.Node, System.Boolean> isRed)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Node, System.Boolean> IsRed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IMatching Matching
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class MinimumCostMatching 
	         {
                     public MinimumCostMatching (Satsuma.IGraph graph, System.Func<Satsuma.Node, System.Boolean> isRed, System.Func<Satsuma.Arc, System.Double> cost, System.Int32 minimumMatchingSize, System.Int32 maximumMatchingSize)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Node, System.Boolean> IsRed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 MinimumMatchingSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 MaximumMatchingSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IMatching Matching
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public enum  SimplexState {
                FirstPhase,
                        Infeasible,
                        SecondPhase,
                        Unbounded,
                        Optimal,
                }
    
            }
                 namespace  Satsuma {
              public sealed class NetworkSimplex 
	 			: Satsuma.IClearable  
                    {
                public       System.Int64 Flow (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Step ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NetworkSimplex (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Int64> lowerBound, System.Func<Satsuma.Arc, System.Int64> upperBound, System.Func<Satsuma.Node, System.Int64> supply, System.Func<Satsuma.Arc, System.Double> cost)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Int64> LowerBound
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Int64> UpperBound
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Node, System.Int64> Supply
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.SimplexState State
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Satsuma.Arc, System.Int64>> Forest
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.IEnumerable<Satsuma.Arc> UpperBoundArcs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public interface IPath 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                       Satsuma.Arc NextArc (Satsuma.Node node)  
                    ;
                           Satsuma.Arc PrevArc (Satsuma.Node node)  
                    ;
               Satsuma.Node FirstNode
                   
                 {
                                                get;
                                         }
                    Satsuma.Node LastNode
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Satsuma {
              public abstract class PathExtensions 
	         {
                public static      System.Boolean IsCycle (Satsuma.IPath path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Node NextNode (Satsuma.IPath path, Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Node PrevNode (Satsuma.IPath path, Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Satsuma {
              public sealed class Path 
	 			: Satsuma.IPath,Satsuma.IGraph,Satsuma.IArcLookup,Satsuma.IClearable  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Begin (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddFirst (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddLast (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reverse ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc NextArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc PrevArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Path (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node FirstNode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node LastNode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class PathGraph 
	 			: Satsuma.IPath,Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       Satsuma.Node GetNode (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetNodeIndex (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc NextArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Arc PrevArc (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PathGraph (System.Int32 nodeCount, Satsuma.PathGraph.Topology topology, Satsuma.Directedness directedness)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.Node FirstNode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Satsuma.Node LastNode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                      public enum  Topology {
                Path,
                        Cycle,
                }
    }

            }
                 namespace  Satsuma {
              public interface IFlow<TCapacity> 
	         {
                       TCapacity Flow (Satsuma.Arc arc)  
                    ;
               Satsuma.IGraph Graph
                   
                 {
                                                get;
                                         }
                    System.Func<Satsuma.Arc, TCapacity> Capacity
                   
                 {
                                                get;
                                         }
                    Satsuma.Node Source
                   
                 {
                                                get;
                                         }
                    Satsuma.Node Target
                   
                 {
                                                get;
                                         }
                    TCapacity FlowSize
                   
                 {
                                                get;
                                         }
                    System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Satsuma.Arc, TCapacity>> NonzeroArcs
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class Preflow 
	 			: Satsuma.IFlow<System.Double>  
                    {
                public       System.Double Flow (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Preflow (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Double> capacity, Satsuma.Node source, Satsuma.Node target)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Double> Capacity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node Source
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node Target
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double FlowSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Error
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Satsuma.Arc, System.Double>> NonzeroArcs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class IntegerPreflow 
	 			: Satsuma.IFlow<System.Int64>  
                    {
                public       System.Int64 Flow (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public IntegerPreflow (Satsuma.IGraph graph, System.Func<Satsuma.Arc, System.Int64> capacity, Satsuma.Node source, Satsuma.Node target)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, System.Int64> Capacity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node Source
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.Node Target
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int64 FlowSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Satsuma.Arc, System.Int64>> NonzeroArcs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public interface IReadOnlyPriorityQueue<TElement, TPriority> 
	         {
                       System.Boolean Contains (TElement element)  
                    ;
                           System.Boolean TryGetPriority (TElement element, out TPriority priority)  
                    ;
                           TElement Peek ()  
                    ;
                           TElement Peek (out TPriority priority)  
                    ;
               System.Int32 Count
                   
                 {
                                                get;
                                         }
                    System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TElement, TPriority>> Items
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Satsuma {
              public interface IPriorityQueue<TElement, TPriority> 
	 			: Satsuma.IReadOnlyPriorityQueue<TElement, TPriority>,Satsuma.IClearable  
                    {
                       System.Boolean Remove (TElement element)  
                    ;
                           System.Boolean Pop ()  
                    ;
            }

            }
                 namespace  Satsuma {
              public sealed class PriorityQueue<TElement, TPriority> 
	 			: Satsuma.IPriorityQueue<TElement, TPriority>,Satsuma.IReadOnlyPriorityQueue<TElement, TPriority>,Satsuma.IClearable where TPriority : System.IComparable<TPriority>
 
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Contains (TElement element)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean TryGetPriority (TElement element, out TPriority priority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Remove (TElement element)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TElement Peek ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TElement Peek (out TPriority priority)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Pop ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PriorityQueue ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TElement, TPriority>> Items
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class RedirectedGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RedirectedGraph (Satsuma.IGraph graph, System.Func<Satsuma.Arc, Satsuma.RedirectedGraph.Direction> getDirection)  {
                throw new System.NotImplementedException();
            }
             public enum  Direction {
                Forward,
                        Backward,
                        Edge,
                }
    }

            }
                 namespace  Satsuma {
              public sealed class ReverseGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public static      Satsuma.ArcFilter Reverse (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ReverseGraph (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public sealed class Prim<TCost> 
	         {
                     public Prim (Satsuma.IGraph graph, System.Func<Satsuma.Arc, TCost> cost)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, TCost> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                     }

            }
                 namespace  Satsuma {
              public sealed class Kruskal<TCost> 
	         {
                public       System.Boolean Step ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean AddArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Kruskal (Satsuma.IGraph graph, System.Func<Satsuma.Arc, TCost> cost, System.Func<Satsuma.Node, System.Int32> maxDegree)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Arc, TCost> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Node, System.Int32> MaxDegree
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                      /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimePropertyInfo.get_Signature()
   at System.Reflection.RuntimePropertyInfo.get_PropertyType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                      public  System.Collections.Generic.Dictionary<Satsuma.Node, System.Int32> Degree
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class Subgraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       void EnableAllNodes (System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void EnableAllArcs (System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Enable (Satsuma.Node node, System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Enable (Satsuma.Arc arc, System.Boolean enabled)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEnabled (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEnabled (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Subgraph (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public class Supergraph 
	 			: Satsuma.IBuildableGraph,Satsuma.IClearable,Satsuma.IDestroyableGraph,Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Satsuma.Node AddNode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Satsuma.Arc AddArc (Satsuma.Node u, Satsuma.Node v, Satsuma.Directedness directedness)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean DeleteNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean DeleteArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Supergraph (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
                     static Supergraph ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public abstract class TspUtils 
	         {
                public static      System.Double GetTourCost<TNode> (System.Collections.Generic.IEnumerable<TNode> tour, System.Func<TNode, TNode, System.Double> cost)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Satsuma {
              public interface ITsp<TNode> 
	         {
           System.Collections.Generic.IEnumerable<TNode> Tour
                   
                 {
                                                get;
                                         }
                    System.Double TourCost
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class CheapestLinkTsp<TNode> 
	 			: Satsuma.ITsp<TNode>  
                    {
                     public CheapestLinkTsp (System.Collections.Generic.IList<TNode> nodes, System.Func<TNode, TNode, System.Double> cost)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IList<TNode> Nodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<TNode, TNode, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<TNode> Tour
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Double TourCost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public enum  TspSelectionRule {
                Nearest,
                        Farthest,
                }
    
            }
                 namespace  Satsuma {
              public sealed class InsertionTsp<TNode> 
	 			: Satsuma.ITsp<TNode>  
                    {
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Insert (TNode node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Insert ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public InsertionTsp (System.Collections.Generic.IEnumerable<TNode> nodes, System.Func<TNode, TNode, System.Double> cost, Satsuma.TspSelectionRule selectionRule)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IEnumerable<TNode> Nodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<TNode, TNode, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.TspSelectionRule SelectionRule
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<TNode> Tour
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Double TourCost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class Opt2Tsp<TNode> 
	 			: Satsuma.ITsp<TNode>  
                    {
                public       System.Boolean Step ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Opt2Tsp (System.Func<TNode, TNode, System.Double> cost, System.Collections.Generic.IEnumerable<TNode> tour, System.Nullable<System.Double> tourCost)  {
                throw new System.NotImplementedException();
            }
         public  System.Func<TNode, TNode, System.Double> Cost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<TNode> Tour
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Double TourCost
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class HamiltonianCycle 
	         {
                     public HamiltonianCycle (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IPath Cycle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma {
              public sealed class UndirectedGraph 
	 			: Satsuma.IGraph,Satsuma.IArcLookup  
                    {
                public       Satsuma.Node U (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node V (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsEdge (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Node> Nodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerable<Satsuma.Arc> Arcs (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 NodeCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ArcCount (Satsuma.Node u, Satsuma.Node v, Satsuma.ArcFilter filter)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UndirectedGraph (Satsuma.IGraph graph)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma {
              public interface IClearable 
	         {
                       void Clear ()  
                    ;
            }

            }
                 namespace  Satsuma.Drawing {
              public struct PointD 
	 			: System.IEquatable<Satsuma.Drawing.PointD>  
                    {
                public       System.Boolean Equals (Satsuma.Drawing.PointD other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String ToString (System.IFormatProvider provider)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Drawing.PointD Add (Satsuma.Drawing.PointD a, Satsuma.Drawing.PointD b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Double Distance (Satsuma.Drawing.PointD other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PointD (System.Double x, System.Double y)  {
                throw new System.NotImplementedException();
            }
         public  System.Double X
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.Drawing {
              public sealed class ForceDirectedLayout 
	         {
                public       void Initialize (System.Func<Satsuma.Node, Satsuma.Drawing.PointD> initialPositions, System.Int32 seed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Step ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Run (System.Double minimumTemperature)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ForceDirectedLayout (Satsuma.IGraph graph, System.Func<Satsuma.Node, Satsuma.Drawing.PointD> initialPositions, System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<Satsuma.Node, Satsuma.Drawing.PointD> NodePositions
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<System.Double, System.Double> SpringForce
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<System.Double, System.Double> ElectricForce
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Func<Satsuma.Drawing.PointD, Satsuma.Drawing.PointD> ExternalForce
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Temperature
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double TemperatureAttenuation
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Double DefaultStartingTemperature;
                                    public static System.Double DefaultMinimumTemperature;
                                    public static System.Double DefaultTemperatureAttenuation;
                }

            }
                 namespace  Satsuma.IO {
              public sealed class SimpleGraphFormat 
	         {
                public       Satsuma.Node[] Load (System.IO.TextReader reader, Satsuma.Directedness directedness)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Node[] Load (System.String filename, Satsuma.Directedness directedness)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.IO.TextWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SimpleGraphFormat ()  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IList<System.Collections.Generic.Dictionary<Satsuma.Arc, System.String>> Extensions
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 StartIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.IO {
              public sealed class LemonGraphFormat 
	         {
                public       void Load (System.IO.TextReader reader, System.Nullable<Satsuma.Directedness> directedness)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.String filename, System.Nullable<Satsuma.Directedness> directedness)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.IO.TextWriter writer, System.Collections.Generic.IEnumerable<System.String> comment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.String filename, System.Collections.Generic.IEnumerable<System.String> comment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LemonGraphFormat ()  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<Satsuma.Node, System.String>> NodeMaps
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<Satsuma.Arc, System.String>> ArcMaps
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.String> Attributes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.IO.GraphML {
              public enum  PropertyDomain {
                All,
                        Node,
                        Arc,
                        Graph,
                }
    
            }
                 namespace  Satsuma.IO.GraphML {
              public abstract class GraphMLProperty 
	         {
                protected static      System.String DomainToGraphML (Satsuma.IO.GraphML.PropertyDomain domain)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      Satsuma.IO.GraphML.PropertyDomain ParseDomain (System.String s)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void LoadFromKeyElement (System.Xml.Linq.XElement xKey)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Xml.Linq.XElement GetKeyElement ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void ReadData (System.Xml.Linq.XElement x, System.Object key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Xml.Linq.XElement WriteData (System.Object key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected GraphMLProperty ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IO.GraphML.PropertyDomain Domain
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.IO.GraphML {
              public abstract class DictionaryProperty<T> 
	 			: Satsuma.IO.GraphML.GraphMLProperty,Satsuma.IClearable  
                    {
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean TryGetValue (System.Object key, out T result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void ReadData (System.Xml.Linq.XElement x, System.Object key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Xml.Linq.XElement WriteData (System.Object key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    T ReadValue (System.Xml.Linq.XElement x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    System.Xml.Linq.XElement WriteValue (T value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected DictionaryProperty ()  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean HasDefaultValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  T DefaultValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.Object, T> Values
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.IO.GraphML {
              public enum  StandardType {
                Bool,
                        Double,
                        Float,
                        Int,
                        Long,
                        String,
                }
    
            }
                 namespace  Satsuma.IO.GraphML {
              public sealed class StandardProperty<T> 
	 			: Satsuma.IO.GraphML.DictionaryProperty<T>,Satsuma.IClearable  
                    {
                public      override System.Xml.Linq.XElement GetKeyElement ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override T ReadValue (System.Xml.Linq.XElement x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override System.Xml.Linq.XElement WriteValue (T value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StandardProperty ()  {
                throw new System.NotImplementedException();
            }
                     static StandardProperty ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma.IO.GraphML {
              public enum  NodeShape {
                Rectangle,
                        RoundRect,
                        Ellipse,
                        Parallelogram,
                        Hexagon,
                        Triangle,
                        Rectangle3D,
                        Octagon,
                        Diamond,
                        Trapezoid,
                        Trapezoid2,
                }
    
            }
                 namespace  Satsuma.IO.GraphML {
              public sealed class NodeGraphics 
	         {
                public       System.Xml.Linq.XElement ToXml ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeGraphics ()  {
                throw new System.NotImplementedException();
            }
                     public NodeGraphics (System.Xml.Linq.XElement xData)  {
                throw new System.NotImplementedException();
            }
         public  System.Double X
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Satsuma.IO.GraphML.NodeShape Shape
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Satsuma.IO.GraphML {
              public sealed class NodeGraphicsProperty 
	 			: Satsuma.IO.GraphML.DictionaryProperty<Satsuma.IO.GraphML.NodeGraphics>,Satsuma.IClearable  
                    {
                public      override System.Xml.Linq.XElement GetKeyElement ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override Satsuma.IO.GraphML.NodeGraphics ReadValue (System.Xml.Linq.XElement x)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override System.Xml.Linq.XElement WriteValue (Satsuma.IO.GraphML.NodeGraphics value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeGraphicsProperty ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Satsuma.IO.GraphML {
              public sealed class GraphMLFormat 
	         {
                public       void RegisterPropertyLoader (System.Func<System.Xml.Linq.XElement, Satsuma.IO.GraphML.GraphMLProperty> loader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.Xml.Linq.XDocument doc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.Xml.XmlReader xml)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.IO.TextReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Load (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.IO.TextWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Save (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GraphMLFormat ()  {
                throw new System.NotImplementedException();
            }
                     static GraphMLFormat ()  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.IGraph Graph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IList<Satsuma.IO.GraphML.GraphMLProperty> Properties
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  PriorityQueueDemo {
              public class PriorityQueue<TPriority, TValue> 
	 			: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TPriority, TValue>>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TPriority, TValue>>,System.Collections.IEnumerable  
                    {
                public static      PriorityQueueDemo.PriorityQueue<TPriority, TValue> MergeQueues (PriorityQueueDemo.PriorityQueue<TPriority, TValue> pq1, PriorityQueueDemo.PriorityQueue<TPriority, TValue> pq2)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      PriorityQueueDemo.PriorityQueue<TPriority, TValue> MergeQueues (PriorityQueueDemo.PriorityQueue<TPriority, TValue> pq1, PriorityQueueDemo.PriorityQueue<TPriority, TValue> pq2, System.Collections.Generic.IComparer<TPriority> comparer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Enqueue (TPriority priority, TValue value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.KeyValuePair<TPriority, TValue> Dequeue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TValue DequeueValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.KeyValuePair<TPriority, TValue> Peek ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TValue PeekValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Add (System.Collections.Generic.KeyValuePair<TPriority, TValue> item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Contains (System.Collections.Generic.KeyValuePair<TPriority, TValue> item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void CopyTo (System.Collections.Generic.KeyValuePair<TPriority, TValue>[] array, System.Int32 arrayIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Remove (System.Collections.Generic.KeyValuePair<TPriority, TValue> item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TPriority, TValue>> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                       System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PriorityQueue ()  {
                throw new System.NotImplementedException();
            }
                     public PriorityQueue (System.Int32 capacity)  {
                throw new System.NotImplementedException();
            }
                     public PriorityQueue (System.Int32 capacity, System.Collections.Generic.IComparer<TPriority> comparer)  {
                throw new System.NotImplementedException();
            }
                     public PriorityQueue (System.Collections.Generic.IComparer<TPriority> comparer)  {
                throw new System.NotImplementedException();
            }
                     public PriorityQueue (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TPriority, TValue>> data)  {
                throw new System.NotImplementedException();
            }
                     public PriorityQueue (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TPriority, TValue>> data, System.Collections.Generic.IComparer<TPriority> comparer)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean IsEmpty
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsReadOnly
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public enum  ConnectionDrawMethod {
                Bezier,
                        StraightLine,
                }
    
            }
                 namespace  NodeEditorFramework {
              public abstract class ConnectionTypes 
	         {
                public static      System.Type GetType (System.String typeName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.TypeData GetTypeData (System.String typeName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.TypeData GetTypeData (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
         public  System.Type NullType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public class TypeData 
	         {
                public       System.Boolean isValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TypeData (System.Type type)  {
                throw new System.NotImplementedException();
            }
         public  System.String Identifier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Type Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Color Color
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Texture2D InKnobTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Texture2D OutKnobTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public interface IConnectionTypeDeclaration 
	         {
           System.String Identifier
                   
                 {
                                                get;
                                         }
                    System.Type Type
                   
                 {
                                                get;
                                         }
                    UnityEngine.Color Color
                   
                 {
                                                get;
                                         }
                    System.String InKnobTex
                   
                 {
                                                get;
                                         }
                    System.String OutKnobTex
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public class FloatType 
	 			: NodeEditorFramework.IConnectionTypeDeclaration  
                    {
                     public FloatType ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Identifier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Type Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Color Color
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String InKnobTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String OutKnobTex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public abstract class Node 
	 			: UnityEngine.ScriptableObject  
                    {
                protected       void InitBase ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Delete ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node Create (System.String nodeID, UnityEngine.Vector2 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node Create (System.String nodeID, UnityEngine.Vector2 position, NodeEditorFramework.NodeOutput connectingOutput)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    NodeEditorFramework.Node Create (UnityEngine.Vector2 pos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void NodeGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void DrawNodePropertyEditor ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Calculate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnDelete ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnAddInputConnection (NodeEditorFramework.NodeInput input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void OnAddOutputConnection (NodeEditorFramework.NodeOutput output)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    UnityEngine.ScriptableObject[] GetScriptableObjects ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void CopyScriptableObjects (System.Func<UnityEngine.ScriptableObject, UnityEngine.ScriptableObject> replaceSerializableObject)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SerializeInputsAndOutputs (System.Func<UnityEngine.ScriptableObject, UnityEngine.ScriptableObject> replaceSerializableObject)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void DrawNode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void DrawKnobs ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void DrawConnections ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean allInputsReady ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean hasUnassignedInputs ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean descendantsCalculated ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       System.Boolean isInput ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeOutput CreateOutput (System.String outputName, System.String outputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeOutput CreateOutput (System.String outputName, System.String outputType, NodeEditorFramework.NodeSide nodeSide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeOutput CreateOutput (System.String outputName, System.String outputType, NodeEditorFramework.NodeSide nodeSide, System.Single sidePosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void OutputKnob (System.Int32 outputIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeInput CreateInput (System.String inputName, System.String inputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeInput CreateInput (System.String inputName, System.String inputType, NodeEditorFramework.NodeSide nodeSide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       NodeEditorFramework.NodeInput CreateInput (System.String inputName, System.String inputType, NodeEditorFramework.NodeSide nodeSide, System.Single sidePosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void InputKnob (System.Int32 inputIdx)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      void ReassignOutputType (NodeEditorFramework.NodeOutput output, System.Type newOutputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      void ReassignInputType (NodeEditorFramework.NodeInput input, System.Type newInputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean isChildOf (NodeEditorFramework.Node otherNode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearCalculation ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected Node ()  {
                throw new System.NotImplementedException();
            }
         public  System.String GetID
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean AllowRecursion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean ContinueCalculation
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  UnityEngine.Rect rect;
                                    public  System.Collections.Generic.List<NodeEditorFramework.NodeKnob> nodeKnobs;
                                    public  System.Collections.Generic.List<NodeEditorFramework.NodeInput> Inputs;
                                    public  System.Collections.Generic.List<NodeEditorFramework.NodeOutput> Outputs;
                }

            }
                 namespace  NodeEditorFramework {
              public class NodeCanvas 
	 			: UnityEngine.ScriptableObject  
                    {
                public       void Validate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void BeforeSavingCanvas ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void AdditionalSaveMethods (System.String sceneCanvasName, NodeEditorFramework.NodeCanvas.CompleteLoadCallback onComplete)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String DrawAdditionalSettings (System.String sceneCanvasName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void UpdateSettings (System.String sceneCanvasName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeCanvas ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<NodeEditorFramework.Node> nodes;
                                    public  NodeEditorFramework.NodeEditorState[] editorStates;
                                    public  System.Boolean livesInScene;
                    public delegate void CompleteLoadCallback ();
    }

            }
                 namespace  NodeEditorFramework {
              public class NodeCanvasManager 
	         {
                public static      void GetAllCanvasTypes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void PopulateMenu (NodeEditorFramework.Utilities.GenericMenu menu, System.Action<System.Type> newNodeCanvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeCanvasManager ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Collections.Generic.Dictionary<System.Type, NodeEditorFramework.NodeCanvasTypeData> TypeOfCanvases;
                }

            }
                 namespace  NodeEditorFramework {
              public struct NodeCanvasTypeData 
	         {
                            public  System.String DisplayString;
                                    public  System.Type CanvasType;
                }

            }
                 namespace  NodeEditorFramework {
              public class NodeCanvasTypeAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public NodeCanvasTypeAttribute (System.String displayName)  {
                throw new System.NotImplementedException();
            }
                            public  System.String Name;
                }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditor 
	         {
                public static      void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RepaintClients ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void checkInit (System.Boolean GUIFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReInit (System.Boolean GUIFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CheckEditorPath ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawCanvas (NodeEditorFramework.NodeCanvas nodeCanvas, NodeEditorFramework.NodeEditorState editorState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node NodeAtPosition (UnityEngine.Vector2 canvasPos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node NodeAtPosition (UnityEngine.Vector2 canvasPos, out NodeEditorFramework.NodeKnob focusedKnob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node NodeAtPosition (NodeEditorFramework.NodeEditorState editorState, UnityEngine.Vector2 canvasPos, out NodeEditorFramework.NodeKnob focusedKnob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 ScreenToCanvasSpace (UnityEngine.Vector2 screenPos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 ScreenToCanvasSpace (NodeEditorFramework.NodeEditorState editorState, UnityEngine.Vector2 screenPos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RecalculateAll (NodeEditorFramework.NodeCanvas nodeCanvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RecalculateFrom (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartCalculation ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static NodeEditor ()  {
                throw new System.NotImplementedException();
            }
                            public static System.String editorPath;
                                    public static NodeEditorFramework.NodeCanvas curNodeCanvas;
                                    public static NodeEditorFramework.NodeEditorState curEditorState;
                                    public static System.Action ClientRepaints;
                                    public static System.Boolean initiated;
                                    public static System.Boolean InitiationError;
                                    public static System.Collections.Generic.List<NodeEditorFramework.Node> workList;
                }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorCallbackReceiver 
	 			: UnityEngine.MonoBehaviour  
                    {
                public   virtual    void OnEditorStartUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnLoadCanvas (NodeEditorFramework.NodeCanvas canvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnLoadEditorState (NodeEditorFramework.NodeEditorState editorState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnSaveCanvas (NodeEditorFramework.NodeCanvas canvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnSaveEditorState (NodeEditorFramework.NodeEditorState editorState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnAddNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnDeleteNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnMoveNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnAddNodeKnob (NodeEditorFramework.NodeKnob knob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnAddConnection (NodeEditorFramework.NodeInput input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void OnRemoveConnection (NodeEditorFramework.NodeInput input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     protected NodeEditorCallbackReceiver ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorCallbacks 
	         {
                public static      void SetupReceivers ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnEditorStartUp ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnLoadCanvas (NodeEditorFramework.NodeCanvas canvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnLoadEditorState (NodeEditorFramework.NodeEditorState editorState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnSaveCanvas (NodeEditorFramework.NodeCanvas canvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnSaveEditorState (NodeEditorFramework.NodeEditorState editorState)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnAddNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnDeleteNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnMoveNode (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnAddNodeKnob (NodeEditorFramework.NodeKnob nodeKnob)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnAddConnection (NodeEditorFramework.NodeInput input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void IssueOnRemoveConnection (NodeEditorFramework.NodeInput input)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static NodeEditorCallbacks ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Action OnEditorStartUp;
                                    public static System.Action<NodeEditorFramework.NodeCanvas> OnLoadCanvas;
                                    public static System.Action<NodeEditorFramework.NodeEditorState> OnLoadEditorState;
                                    public static System.Action<NodeEditorFramework.NodeCanvas> OnSaveCanvas;
                                    public static System.Action<NodeEditorFramework.NodeEditorState> OnSaveEditorState;
                                    public static System.Action<NodeEditorFramework.Node> OnAddNode;
                                    public static System.Action<NodeEditorFramework.Node> OnDeleteNode;
                                    public static System.Action<NodeEditorFramework.Node> OnMoveNode;
                                    public static System.Action<NodeEditorFramework.NodeKnob> OnAddNodeKnob;
                                    public static System.Action<NodeEditorFramework.NodeInput> OnAddConnection;
                                    public static System.Action<NodeEditorFramework.NodeInput> OnRemoveConnection;
                }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorGUI 
	         {
                public static      System.Boolean Init (System.Boolean GUIFunction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartNodeGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndNodeGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawConnection (UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Color col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawConnection (UnityEngine.Vector2 startPos, UnityEngine.Vector2 startDir, UnityEngine.Vector2 endPos, UnityEngine.Vector2 endDir, UnityEngine.Color col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawConnection (UnityEngine.Vector2 startPos, UnityEngine.Vector2 startDir, UnityEngine.Vector2 endPos, UnityEngine.Vector2 endDir, NodeEditorFramework.ConnectionDrawMethod drawMethod, UnityEngine.Color col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static NodeEditorGUI ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 knobSize;
                                    public static UnityEngine.Color NE_LightColor;
                                    public static UnityEngine.Color NE_TextColor;
                                    public static UnityEngine.Texture2D Background;
                                    public static UnityEngine.Texture2D AALineTex;
                                    public static UnityEngine.Texture2D GUIBox;
                                    public static UnityEngine.Texture2D GUIButton;
                                    public static UnityEngine.Texture2D GUIBoxSelection;
                                    public static UnityEngine.GUISkin nodeSkin;
                                    public static UnityEngine.GUISkin defaultSkin;
                                    public static UnityEngine.GUIStyle nodeLabel;
                                    public static UnityEngine.GUIStyle nodeLabelBold;
                                    public static UnityEngine.GUIStyle nodeLabelSelected;
                                    public static UnityEngine.GUIStyle nodeBox;
                                    public static UnityEngine.GUIStyle nodeBoxBold;
                }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorInputControls 
	         {
        }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorInputSystem 
	         {
                public static      void SetupInput ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void HandleInputEvents (NodeEditorFramework.NodeEditorState state)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void HandleLateInputEvents (NodeEditorFramework.NodeEditorState state)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  NodeEditorFramework {
              public class NodeEditorInputInfo 
	         {
                public       void SetAsCurrentEnvironment ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeEditorInputInfo (NodeEditorFramework.NodeEditorState EditorState)  {
                throw new System.NotImplementedException();
            }
                     public NodeEditorInputInfo (System.String Message, NodeEditorFramework.NodeEditorState EditorState)  {
                throw new System.NotImplementedException();
            }
                            public  System.String message;
                                    public  NodeEditorFramework.NodeEditorState editorState;
                                    public  UnityEngine.Event inputEvent;
                                    public  UnityEngine.Vector2 inputPos;
                }

            }
                 namespace  NodeEditorFramework {
              public class EventHandlerAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public EventHandlerAttribute (UnityEngine.EventType eventType, System.Int32 priorityValue)  {
                throw new System.NotImplementedException();
            }
                     public EventHandlerAttribute (System.Int32 priorityValue)  {
                throw new System.NotImplementedException();
            }
                     public EventHandlerAttribute (UnityEngine.EventType eventType)  {
                throw new System.NotImplementedException();
            }
                     public EventHandlerAttribute ()  {
                throw new System.NotImplementedException();
            }
         public  System.Nullable<UnityEngine.EventType> handledEvent
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 priority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public class HotkeyAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public HotkeyAttribute (UnityEngine.KeyCode handledKey)  {
                throw new System.NotImplementedException();
            }
                     public HotkeyAttribute (UnityEngine.KeyCode handledKey, UnityEngine.EventModifiers eventModifiers)  {
                throw new System.NotImplementedException();
            }
                     public HotkeyAttribute (UnityEngine.KeyCode handledKey, UnityEngine.EventType LimitEventType)  {
                throw new System.NotImplementedException();
            }
                     public HotkeyAttribute (UnityEngine.KeyCode handledKey, UnityEngine.EventType LimitEventType, System.Int32 priorityValue)  {
                throw new System.NotImplementedException();
            }
                     public HotkeyAttribute (UnityEngine.KeyCode handledKey, UnityEngine.EventModifiers eventModifiers, UnityEngine.EventType LimitEventType)  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.KeyCode handledHotKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<UnityEngine.EventModifiers> modifiers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<UnityEngine.EventType> limitingEventType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 priority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public enum  ContextType {
                Node,
                        Canvas,
                        Toolbar,
                }
    
            }
                 namespace  NodeEditorFramework {
              public class ContextEntryAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public ContextEntryAttribute (NodeEditorFramework.ContextType type, System.String path)  {
                throw new System.NotImplementedException();
            }
         public  NodeEditorFramework.ContextType contextType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String contextPath
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public class ContextFillerAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public ContextFillerAttribute (NodeEditorFramework.ContextType type)  {
                throw new System.NotImplementedException();
            }
         public  NodeEditorFramework.ContextType contextType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeEditorSaveManager 
	         {
                public static      System.String[] GetSceneSaves ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SaveSceneNodeCanvas (System.String saveName, NodeEditorFramework.NodeCanvas nodeCanvas, System.Boolean createWorkingCopy)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeCanvas LoadSceneNodeCanvas (System.String saveName, System.Boolean createWorkingCopy)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SaveNodeCanvas (System.String path, NodeEditorFramework.NodeCanvas nodeCanvas, System.Boolean createWorkingCopy)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeCanvas LoadNodeCanvas (System.String path, System.Boolean createWorkingCopy)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Compress (NodeEditorFramework.NodeCanvas nodeCanvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Uncompress (NodeEditorFramework.NodeCanvas nodeCanvas)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeCanvas CreateWorkingCopy (NodeEditorFramework.NodeCanvas nodeCanvas, System.Boolean editorStates)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeEditorState ExtractEditorState (NodeEditorFramework.NodeCanvas canvas, System.String stateName)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  NodeEditorFramework {
              public class NodeEditorState 
	 			: UnityEngine.ScriptableObject  
                    {
                     public NodeEditorState ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 zoomPos
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  NodeEditorFramework.NodeCanvas canvas;
                                    public  NodeEditorFramework.NodeEditorState parentEditor;
                                    public  System.Boolean drawing;
                                    public  NodeEditorFramework.Node selectedNode;
                                    public  NodeEditorFramework.Node focusedNode;
                                    public  NodeEditorFramework.NodeKnob focusedNodeKnob;
                                    public  UnityEngine.Vector2 panOffset;
                                    public  System.Single zoom;
                                    public  NodeEditorFramework.NodeOutput connectOutput;
                                    public  System.Boolean dragNode;
                                    public  System.Boolean panWindow;
                                    public  UnityEngine.Vector2 dragStart;
                                    public  UnityEngine.Vector2 dragPos;
                                    public  UnityEngine.Vector2 dragOffset;
                                    public  System.Boolean navigate;
                                    public  UnityEngine.Rect canvasRect;
                                    public  UnityEngine.Vector2 zoomPanAdjust;
                                    public  System.Collections.Generic.List<UnityEngine.Rect> ignoreInput;
                }

            }
                 namespace  NodeEditorFramework {
              public class NodeInput 
	 			: NodeEditorFramework.NodeKnob  
                    {
                public static      NodeEditorFramework.NodeInput Create (NodeEditorFramework.Node nodeBody, System.String inputName, System.String inputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeInput Create (NodeEditorFramework.Node nodeBody, System.String inputName, System.String inputType, NodeEditorFramework.NodeSide nodeSide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeInput Create (NodeEditorFramework.Node nodeBody, System.String inputName, System.String inputType, NodeEditorFramework.NodeSide nodeSide, System.Single sidePosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Delete ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void CopyScriptableObjects (System.Func<UnityEngine.ScriptableObject, UnityEngine.ScriptableObject> replaceSerializableObject)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void ReloadTexture ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object GetValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object GetValue (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetValue (System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetValue<T> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetValue<T> (T value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean TryApplyConnection (NodeEditorFramework.NodeOutput output)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean CanApplyConnection (NodeEditorFramework.NodeOutput output)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ApplyConnection (NodeEditorFramework.NodeOutput output)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveConnection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override NodeEditorFramework.Node GetNodeAcrossConnection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeInput ()  {
                throw new System.NotImplementedException();
            }
         public  NodeEditorFramework.NodeSide defaultSide
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsValueNull
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  NodeEditorFramework.NodeOutput connection;
                                    public  System.String typeID;
                }

            }
                 namespace  NodeEditorFramework {
              public enum  NodeSide {
                Bottom,
                        Right,
                        Top,
                        Left,
                }
    
            }
                 namespace  NodeEditorFramework {
              public class NodeKnob 
	 			: UnityEngine.ScriptableObject  
                    {
                protected       void InitBase (NodeEditorFramework.Node nodeBody, NodeEditorFramework.NodeSide nodeSide, System.Single nodeSidePosition, System.String knobName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void Delete ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected       void ReloadKnobTexture ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void ReloadTexture ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    UnityEngine.ScriptableObject[] GetScriptableObjects ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected   virtual    void CopyScriptableObjects (System.Func<UnityEngine.ScriptableObject, UnityEngine.ScriptableObject> replaceSerializableObject)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    void DrawKnob ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DisplayLayout ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DisplayLayout (UnityEngine.GUIStyle style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DisplayLayout (UnityEngine.GUIContent content)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DisplayLayout (UnityEngine.GUIContent content, UnityEngine.GUIStyle style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPosition (System.Single position, NodeEditorFramework.NodeSide nodeSide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPosition (System.Single position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPosition ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Rect GetGUIKnob ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Rect GetCanvasSpaceKnob ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 GetDirection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    NodeEditorFramework.Node GetNodeAcrossConnection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeKnob ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.GUIStyle defaultLabelStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  NodeEditorFramework.NodeSide defaultSide
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  NodeEditorFramework.Node body;
                                    protected  UnityEngine.Texture2D knobTexture;
                                    public  NodeEditorFramework.NodeSide side;
                                    public  System.Single sidePosition;
                                    public  System.Single sideOffset;
                }

            }
                 namespace  NodeEditorFramework {
              public class NodeOutput 
	 			: NodeEditorFramework.NodeKnob  
                    {
                public static      NodeEditorFramework.NodeOutput Create (NodeEditorFramework.Node nodeBody, System.String outputName, System.String outputType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeOutput Create (NodeEditorFramework.Node nodeBody, System.String outputName, System.String outputType, NodeEditorFramework.NodeSide nodeSide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeOutput Create (NodeEditorFramework.Node nodeBody, System.String outputName, System.String outputType, NodeEditorFramework.NodeSide nodeSide, System.Single sidePosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override void Delete ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void CopyScriptableObjects (System.Func<UnityEngine.ScriptableObject, UnityEngine.ScriptableObject> replaceSerializableObject)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected      override void ReloadTexture ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object GetValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Object GetValue (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetValue (System.Object Value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       T GetValue<T> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetValue<T> (T Value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ResetValue ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetDefault<T> ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Object GetDefault (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override NodeEditorFramework.Node GetNodeAcrossConnection ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NodeOutput ()  {
                throw new System.NotImplementedException();
            }
         public  NodeEditorFramework.NodeSide defaultSide
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.GUIStyle defaultLabelStyle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsValueNull
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Collections.Generic.List<NodeEditorFramework.NodeInput> connections;
                                    public  System.String typeID;
                                    public  System.Boolean calculationBlockade;
                }

            }
                 namespace  NodeEditorFramework {
              public abstract class NodeTypes 
	         {
                public static      void FetchNodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.NodeData getNodeData (NodeEditorFramework.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Node getDefaultNode (System.String nodeID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T getDefaultNode<T> () where T : NodeEditorFramework.Node
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<NodeEditorFramework.Node> getCompatibleNodes (NodeEditorFramework.NodeOutput nodeOutput)  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public static System.Collections.Generic.Dictionary<NodeEditorFramework.Node, NodeEditorFramework.NodeData> nodes;
                }

            }
                 namespace  NodeEditorFramework {
              public struct NodeData 
	         {
                     public NodeData (System.String name, System.Type[] types)  {
                throw new System.NotImplementedException();
            }
                            public  System.String adress;
                                    public  System.Type[] typeOfNodeCanvas;
                }

            }
                 namespace  NodeEditorFramework {
              public class NodeAttribute 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public NodeAttribute (System.Boolean HideNode, System.String ReplacedContextText, System.Type[] nodeCanvasTypes)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean hide
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String contextText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Type[] typeOfNodeCanvas;
                }

            }
                 namespace  NodeEditorFramework.Utilities {
              public abstract class GUIScaleUtility 
	         {
                public static      void CheckInit ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Init ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 BeginScale (UnityEngine.Rect rect, UnityEngine.Vector2 zoomPivot, System.Single zoom, System.Boolean adjustGUILayout)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndScale ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginNoClip ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void MoveClipsUp (System.Int32 count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void RestoreClips ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginNewLayout ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndNewLayout ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginIgnoreMatrix ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndIgnoreMatrix ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 Scale (UnityEngine.Vector2 pos, UnityEngine.Vector2 pivot, UnityEngine.Vector2 scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Rect Scale (UnityEngine.Rect rect, UnityEngine.Vector2 pivot, UnityEngine.Vector2 scale)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 ScaledToGUISpace (UnityEngine.Vector2 scaledPosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Rect ScaledToGUISpace (UnityEngine.Rect scaledRect)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 GUIToScaledSpace (UnityEngine.Vector2 guiPosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Rect GUIToScaledSpace (UnityEngine.Rect guiRect)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 GUIToScreenSpace (UnityEngine.Vector2 guiPosition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Rect GUIToScreenSpace (UnityEngine.Rect guiRect)  
        
            {
              throw new System.NotImplementedException();
            }
            
         public  UnityEngine.Rect getTopRect
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Rect getTopRectScreenSpace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<UnityEngine.Rect> currentRectStack
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Vector2 getCurrentScale
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  NodeEditorFramework.Utilities {
              public abstract class OverlayGUI 
	         {
                public static      System.Boolean HasPopupControl ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void StartOverlayGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void EndOverlayGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                            public static NodeEditorFramework.Utilities.PopupMenu currentPopup;
                }

            }
                 namespace  NodeEditorFramework.Utilities {
              public class PopupMenu 
	         {
                public       void SetupGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Show (UnityEngine.Vector2 pos, System.Single MinWidth)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddItem (UnityEngine.GUIContent content, System.Boolean on, NodeEditorFramework.Utilities.PopupMenu.MenuFunctionData func, System.Object userData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddItem (UnityEngine.GUIContent content, System.Boolean on, NodeEditorFramework.Utilities.PopupMenu.MenuFunction func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddSeparator (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Draw ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PopupMenu ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Collections.Generic.List<NodeEditorFramework.Utilities.PopupMenu.MenuItem> menuItems;
                                    public  System.Single minWidth;
                                    public static UnityEngine.GUIStyle backgroundStyle;
                                    public static UnityEngine.Texture2D expandRight;
                                    public static System.Single itemHeight;
                                    public static UnityEngine.GUIStyle selectedLabel;
                    public delegate void MenuFunction ();
        public delegate void MenuFunctionData ();
         public class MenuItem 
	         {
                public       void Execute ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MenuItem ()  {
                throw new System.NotImplementedException();
            }
                     public MenuItem (System.String _path, UnityEngine.GUIContent _content, System.Boolean _group)  {
                throw new System.NotImplementedException();
            }
                     public MenuItem (System.String _path, UnityEngine.GUIContent _content, NodeEditorFramework.Utilities.PopupMenu.MenuFunction _func)  {
                throw new System.NotImplementedException();
            }
                     public MenuItem (System.String _path, UnityEngine.GUIContent _content, NodeEditorFramework.Utilities.PopupMenu.MenuFunctionData _func, System.Object _userData)  {
                throw new System.NotImplementedException();
            }
                            public  System.String path;
                                    public  UnityEngine.GUIContent content;
                                    public  NodeEditorFramework.Utilities.PopupMenu.MenuFunction func;
                                    public  NodeEditorFramework.Utilities.PopupMenu.MenuFunctionData funcData;
                                    public  System.Object userData;
                                    public  System.Boolean separator;
                                    public  System.Boolean group;
                                    public  UnityEngine.Rect groupPos;
                                    public  System.Collections.Generic.List<NodeEditorFramework.Utilities.PopupMenu.MenuItem> subItems;
                }
}

            }
                 namespace  NodeEditorFramework.Utilities {
              public class GenericMenu 
	         {
                public       void ShowAsContext ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Show (UnityEngine.Vector2 pos, System.Single MinWidth)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddItem (UnityEngine.GUIContent content, System.Boolean on, NodeEditorFramework.Utilities.PopupMenu.MenuFunctionData func, System.Object userData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddItem (UnityEngine.GUIContent content, System.Boolean on, NodeEditorFramework.Utilities.PopupMenu.MenuFunction func)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddSeparator (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GenericMenu ()  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  NodeEditorFramework.Utilities {
              public abstract class RTEditorGUI 
	         {
                public static      UnityEngine.Rect PrefixLabel (UnityEngine.Rect totalPos, UnityEngine.GUIContent label, UnityEngine.GUIStyle style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Rect PrefixLabel (UnityEngine.Rect totalPos, System.Single percentage, UnityEngine.GUIContent label, UnityEngine.GUIStyle style)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Space ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Space (System.Single pixels)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Seperator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Seperator (UnityEngine.Rect rect)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void BeginChangeCheck ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean EndChangeCheck ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Foldout (System.Boolean foldout, System.String content, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Foldout (System.Boolean foldout, System.String content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Foldout (System.Boolean foldout, UnityEngine.GUIContent content, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Foldout (System.Boolean foldout, UnityEngine.GUIContent content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Toggle (System.Boolean toggle, System.String content, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Toggle (System.Boolean toggle, System.String content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Toggle (System.Boolean toggle, UnityEngine.GUIContent content, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Toggle (System.Boolean toggle, UnityEngine.GUIContent content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String TextField (UnityEngine.GUIContent label, System.String text, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 OptionSlider (UnityEngine.GUIContent label, System.Int32 selected, System.String[] selectableOptions, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 OptionSlider (UnityEngine.GUIContent label, System.Int32 selected, System.String[] selectableOptions, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 MathPowerSlider (UnityEngine.GUIContent label, System.Int32 baseValue, System.Int32 value, System.Int32 minPow, System.Int32 maxPow, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 MathPowerSliderRaw (UnityEngine.GUIContent label, System.Int32 baseValue, System.Int32 power, System.Int32 minPow, System.Int32 maxPow, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntSlider (System.String label, System.Int32 value, System.Int32 minValue, System.Int32 maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntSlider (UnityEngine.GUIContent label, System.Int32 value, System.Int32 minValue, System.Int32 maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntSlider (System.Int32 value, System.Int32 minValue, System.Int32 maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntField (System.String label, System.Int32 value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntField (UnityEngine.GUIContent label, System.Int32 value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 IntField (System.Int32 value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single Slider (System.Single value, System.Single minValue, System.Single maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single Slider (System.String label, System.Single value, System.Single minValue, System.Single maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single Slider (UnityEngine.GUIContent label, System.Single value, System.Single minValue, System.Single maxValue, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single FloatField (System.String label, System.Single value, UnityEngine.GUILayoutOption[] fieldOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single FloatField (UnityEngine.GUIContent label, System.Single value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single FloatField (System.Single value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single FloatField (UnityEngine.Rect pos, System.Single value, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Single ForceParse (System.String str)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T ObjectField<T> (T obj, System.Boolean allowSceneObjects) where T : UnityEngine.Object
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T ObjectField<T> (System.String label, T obj, System.Boolean allowSceneObjects) where T : UnityEngine.Object
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T ObjectField<T> (UnityEngine.GUIContent label, T obj, System.Boolean allowSceneObjects, UnityEngine.GUILayoutOption[] options) where T : UnityEngine.Object
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Enum EnumPopup (System.Enum selected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Enum EnumPopup (System.String label, System.Enum selected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Enum EnumPopup (UnityEngine.GUIContent label, System.Enum selected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 Popup (UnityEngine.GUIContent label, System.Int32 selected, System.String[] displayedOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 Popup (System.String label, System.Int32 selected, System.String[] displayedOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Int32 Popup (System.Int32 selected, System.String[] displayedOptions)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawTexture (UnityEngine.Texture texture, System.Int32 texSize, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawTexture (UnityEngine.Texture texture, System.Int32 texSize, UnityEngine.GUIStyle style, System.Int32 shuffleRed, System.Int32 shuffleGreen, System.Int32 shuffleBlue, System.Int32 shuffleAlpha, UnityEngine.GUILayoutOption[] options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawBezier (UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Vector2 startTan, UnityEngine.Vector2 endTan, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawBezier (UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Vector2 startTan, UnityEngine.Vector2 endTan, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Int32 segmentCount, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawBezier (UnityEngine.Rect clippingRect, UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Vector2 startTan, UnityEngine.Vector2 endTan, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Int32 segmentCount, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawPolygonLine (UnityEngine.Vector2[] points, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawPolygonLine (UnityEngine.Rect clippingRect, UnityEngine.Vector2[] points, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLine (UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DrawLine (UnityEngine.Rect clippingRect, UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, UnityEngine.Color col, UnityEngine.Texture2D tex, System.Single width)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetLine (UnityEngine.Rect clippingRect, UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, System.Single width, System.Boolean noClip)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D ColorToTex (System.Int32 pxSize, UnityEngine.Color col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D Tint (UnityEngine.Texture2D tex, UnityEngine.Color color)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D RotateTextureCCW (UnityEngine.Texture2D tex, System.Int32 quarterSteps)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static RTEditorGUI ()  {
                throw new System.NotImplementedException();
            }
         public  System.Single textFieldHeight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public static System.Single labelWidth;
                                    public static System.Single fieldWidth;
                                    public static System.Single indent;
                }

            }
                 namespace  NodeEditorFramework.Utilities {
              public abstract class ResourceManager 
	         {
                public static      void SetDefaultResourcePath (System.String defaultResourcePath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String PreparePath (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T[] LoadResources<T> (System.String path) where T : UnityEngine.Object
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T LoadResource<T> (System.String path) where T : UnityEngine.Object
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D LoadTexture (System.String texPath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D GetTintedTexture (System.String texPath, UnityEngine.Color col)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void AddTextureToMemory (System.String texturePath, UnityEngine.Texture2D texture, System.String[] modifications)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Utilities.ResourceManager.MemoryTexture FindInMemory (UnityEngine.Texture2D tex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean HasInMemory (System.String texturePath, System.String[] modifications)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      NodeEditorFramework.Utilities.ResourceManager.MemoryTexture GetMemoryTexture (System.String texturePath, System.String[] modifications)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Texture2D GetTexture (System.String texturePath, System.String[] modifications)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static ResourceManager ()  {
                throw new System.NotImplementedException();
            }
             public class MemoryTexture 
	         {
                     public MemoryTexture (System.String texPath, UnityEngine.Texture2D tex, System.String[] mods)  {
                throw new System.NotImplementedException();
            }
                            public  System.String path;
                                    public  UnityEngine.Texture2D texture;
                                    public  System.String[] modifications;
                }
}

            }
                 namespace  NodeEditorFramework.Standard {
              public class RTCanvasCalculator 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void AssureCanvas ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadCanvas (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CalculateCanvas ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<NodeEditorFramework.Node> getInputNodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<NodeEditorFramework.Node> getOutputNodes ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RTCanvasCalculator ()  {
                throw new System.NotImplementedException();
            }
         public  NodeEditorFramework.NodeCanvas canvas
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String canvasPath;
                }

            }
                 namespace  NodeEditorFramework.Standard {
              public class RuntimeNodeEditor 
	 			: UnityEngine.MonoBehaviour  
                    {
                public       void Start ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Update ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void OnGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SideGUI ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SaveSceneNodeCanvas (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadSceneNodeCanvas (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadNodeCanvas (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void NewNodeCanvas ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RuntimeNodeEditor ()  {
                throw new System.NotImplementedException();
            }
                            public  System.String canvasPath;
                                    public  NodeEditorFramework.NodeCanvas canvas;
                                    public  System.Boolean screenSize;
                                    public  UnityEngine.Rect specifiedRootRect;
                                    public  UnityEngine.Rect specifiedCanvasRect;
                }

            }
                 namespace  MIConvexHull {
              public abstract class ConvexHull 
	         {
                public static      MIConvexHull.ConvexHull<TVertex, TFace> Create<TVertex, TFace> (System.Collections.Generic.IList<TVertex> data, System.Double PlaneDistanceTolerance) where TVertex : MIConvexHull.IVertex
where TFace : MIConvexHull.ConvexFace<TVertex, TFace>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.ConvexHull<TVertex, MIConvexHull.DefaultConvexFace<TVertex>> Create<TVertex> (System.Collections.Generic.IList<TVertex> data, System.Double PlaneDistanceTolerance) where TVertex : MIConvexHull.IVertex
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.ConvexHull<MIConvexHull.DefaultVertex, MIConvexHull.DefaultConvexFace<MIConvexHull.DefaultVertex>> Create (System.Collections.Generic.IList<System.Double[]> data, System.Double PlaneDistanceTolerance)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  MIConvexHull {
              public class ConvexHull<TVertex, TFace> 
	         {
                public static      MIConvexHull.ConvexHull<TVertex, TFace> Create (System.Collections.Generic.IList<TVertex> data, System.Double PlaneDistanceTolerance)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  MIConvexHull {
              public abstract class ConvexFace<TVertex, TFace> 
	         {
                     protected ConvexFace ()  {
                throw new System.NotImplementedException();
            }
         public  TFace[] Adjacency
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  TVertex[] Vertices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double[] Normal
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  MIConvexHull {
              public class DefaultConvexFace<TVertex> 
	 			: MIConvexHull.ConvexFace<TVertex, MIConvexHull.DefaultConvexFace<TVertex>> where TVertex : MIConvexHull.IVertex
 
                    {
                     public DefaultConvexFace ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  MIConvexHull {
              public interface IVertex 
	         {
           System.Double[] Position
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  MIConvexHull {
              public class DefaultVertex 
	 			: MIConvexHull.IVertex  
                    {
                     public DefaultVertex ()  {
                throw new System.NotImplementedException();
            }
         public  System.Double[] Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  MIConvexHull {
              public interface ITriangulation<TVertex, TCell> 
	         {
           System.Collections.Generic.IEnumerable<TCell> Cells
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  MIConvexHull {
              public abstract class Triangulation 
	         {
                public static      MIConvexHull.ITriangulation<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>> CreateDelaunay<TVertex> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.ITriangulation<MIConvexHull.DefaultVertex, MIConvexHull.DefaultTriangulationCell<MIConvexHull.DefaultVertex>> CreateDelaunay (System.Collections.Generic.IList<System.Double[]> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.ITriangulation<TVertex, TFace> CreateDelaunay<TVertex, TFace> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
where TFace : MIConvexHull.TriangulationCell<TVertex, TFace>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<TVertex, TCell, TEdge> CreateVoronoi<TVertex, TCell, TEdge> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.TriangulationCell<TVertex, TCell>
where TEdge : MIConvexHull.VoronoiEdge<TVertex, TCell>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>, MIConvexHull.VoronoiEdge<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>>> CreateVoronoi<TVertex> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<MIConvexHull.DefaultVertex, MIConvexHull.DefaultTriangulationCell<MIConvexHull.DefaultVertex>, MIConvexHull.VoronoiEdge<MIConvexHull.DefaultVertex, MIConvexHull.DefaultTriangulationCell<MIConvexHull.DefaultVertex>>> CreateVoronoi (System.Collections.Generic.IList<System.Double[]> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<TVertex, TCell, MIConvexHull.VoronoiEdge<TVertex, TCell>> CreateVoronoi<TVertex, TCell> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.TriangulationCell<TVertex, TCell>
 
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  MIConvexHull {
              public class DelaunayTriangulation<TVertex, TCell> 
	 			: MIConvexHull.ITriangulation<TVertex, TCell> where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.TriangulationCell<TVertex, TCell>
 
                    {
                public static      MIConvexHull.DelaunayTriangulation<TVertex, TCell> Create (System.Collections.Generic.IList<TVertex> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     DelaunayTriangulation ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IEnumerable<TCell> Cells
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  MIConvexHull {
              public abstract class TriangulationCell<TVertex, TCell> 
	 			: MIConvexHull.ConvexFace<TVertex, TCell> where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.ConvexFace<TVertex, TCell>
 
                    {
                     protected TriangulationCell ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  MIConvexHull {
              public class DefaultTriangulationCell<TVertex> 
	 			: MIConvexHull.TriangulationCell<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>> where TVertex : MIConvexHull.IVertex
 
                    {
                     public DefaultTriangulationCell ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  MIConvexHull {
              public class VoronoiEdge<TVertex, TCell> 
	         {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public VoronoiEdge ()  {
                throw new System.NotImplementedException();
            }
                     public VoronoiEdge (TCell source, TCell target)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  MIConvexHull {
              public abstract class VoronoiMesh 
	         {
                public static      MIConvexHull.VoronoiMesh<TVertex, TCell, TEdge> Create<TVertex, TCell, TEdge> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.TriangulationCell<TVertex, TCell>
where TEdge : MIConvexHull.VoronoiEdge<TVertex, TCell>
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>, MIConvexHull.VoronoiEdge<TVertex, MIConvexHull.DefaultTriangulationCell<TVertex>>> Create<TVertex> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<MIConvexHull.DefaultVertex, MIConvexHull.DefaultTriangulationCell<MIConvexHull.DefaultVertex>, MIConvexHull.VoronoiEdge<MIConvexHull.DefaultVertex, MIConvexHull.DefaultTriangulationCell<MIConvexHull.DefaultVertex>>> Create (System.Collections.Generic.IList<System.Double[]> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.VoronoiMesh<TVertex, TCell, MIConvexHull.VoronoiEdge<TVertex, TCell>> Create<TVertex, TCell> (System.Collections.Generic.IList<TVertex> data) where TVertex : MIConvexHull.IVertex
where TCell : MIConvexHull.TriangulationCell<TVertex, TCell>
 
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  MIConvexHull {
              public class VoronoiMesh<TVertex, TCell, TEdge> 
	         {
                public static      MIConvexHull.VoronoiMesh<TVertex, TCell, TEdge> Create (System.Collections.Generic.IList<TVertex> data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     VoronoiMesh ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.IEnumerable<TCell> Vertices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.IEnumerable<TEdge> Edges
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  VoronoiTree {
              public class PowerDiagramSite 
	 			: MIConvexHull.TriangulationCell<VoronoiTree.PowerDiagram.DualSite2d, VoronoiTree.PowerDiagramSite>  
                    {
                public       VoronoiTree.PowerDiagram.DualSite3d ToDualSite ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PowerDiagramSite ()  {
                throw new System.NotImplementedException();
            }
                     public PowerDiagramSite (UnityEngine.Vector2 pos)  {
                throw new System.NotImplementedException();
            }
                     public PowerDiagramSite (System.Single x, System.Single y)  {
                throw new System.NotImplementedException();
            }
                     public PowerDiagramSite (System.UInt32 siteId, UnityEngine.Vector2 pos, System.Single siteWeight)  {
                throw new System.NotImplementedException();
            }
         public  System.Boolean dummy
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Vector2 Circumcenter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector2 Centroid
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Single weight;
                                    public  System.Single currentWeight;
                                    public  System.Single previousWeightAdaption;
                                    public  System.Int32 id;
                                    public  UnityEngine.Vector2 position;
                                    public  Delaunay.Geo.Polygon poly;
                                    public  System.Collections.Generic.List<VoronoiTree.PowerDiagramSite> neighbours;
                }

            }
                 namespace  VoronoiTree {
              public class PowerDiagram 
	         {
                public       System.Collections.Generic.List<VoronoiTree.PowerDiagramSite> GetSites ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ComputePowerDiagram (System.Int32 maxIterations, System.Single threashold)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ComputeVD ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ComputeVD3d ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Delaunay.Geo.Polygon PolyForRandomPoints (System.Collections.Generic.List<UnityEngine.Vector2> verts)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      MIConvexHull.ConvexHull<VoronoiTree.PowerDiagram.DualSite3d, VoronoiTree.PowerDiagram.ConvexFaceExt<VoronoiTree.PowerDiagram.DualSite3d>> CreateHull (System.Collections.Generic.IList<VoronoiTree.PowerDiagram.DualSite3d> data, System.Double PlaneDistanceTolerance)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PowerDiagram (Delaunay.Geo.Polygon polyBounds, System.Collections.Generic.IEnumerable<VoronoiTree.PowerDiagramSite> newSites)  {
                throw new System.NotImplementedException();
            }
         public  MIConvexHull.VoronoiMesh<VoronoiTree.PowerDiagram.DualSite2d, VoronoiTree.PowerDiagramSite, MIConvexHull.VoronoiEdge<VoronoiTree.PowerDiagram.DualSite2d, VoronoiTree.PowerDiagramSite>> voronoiMesh
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 completedIterations
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static Delaunay.Geo.Winding ForcedWinding;
                     public class ConvexFaceExt<TVertex> 
	 			: MIConvexHull.ConvexFace<TVertex, VoronoiTree.PowerDiagram.ConvexFaceExt<TVertex>> where TVertex : MIConvexHull.IVertex
 
                    {
                public       UnityEngine.Vector2 GetDualPoint ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ConvexFaceExt ()  {
                throw new System.NotImplementedException();
            }
         public  TVertex vertex0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  TVertex vertex1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  TVertex vertex2
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.ConvexFaceExt<TVertex> edge0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.ConvexFaceExt<TVertex> edge1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.ConvexFaceExt<TVertex> edge2
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector2 Circumcenter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }
     public class TriangulationCellExt<TVertex> 
	 			: MIConvexHull.TriangulationCell<TVertex, VoronoiTree.PowerDiagram.TriangulationCellExt<TVertex>> where TVertex : MIConvexHull.IVertex
 
                    {
                     public TriangulationCellExt ()  {
                throw new System.NotImplementedException();
            }
         public  TVertex Vertex0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  TVertex Vertex1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  TVertex Vertex2
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.TriangulationCellExt<TVertex> Edge0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.TriangulationCellExt<TVertex> Edge1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagram.TriangulationCellExt<TVertex> Edge2
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }
     public class DualSite2d 
	 			: MIConvexHull.IVertex  
                    {
                     public DualSite2d (VoronoiTree.PowerDiagramSite site)  {
                throw new System.NotImplementedException();
            }
         public  System.Double[] Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  VoronoiTree.PowerDiagramSite site
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean visited
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class DualSite3d 
	 			: MIConvexHull.IVertex  
                    {
                     public DualSite3d ()  {
                throw new System.NotImplementedException();
            }
                     public DualSite3d (System.Double _x, System.Double _y, System.Double _z)  {
                throw new System.NotImplementedException();
            }
                     public DualSite3d (UnityEngine.Vector3 pos)  {
                throw new System.NotImplementedException();
            }
                     public DualSite3d (System.Double _x, System.Double _y, System.Double _z, VoronoiTree.PowerDiagramSite _originalSite)  {
                throw new System.NotImplementedException();
            }
         public  System.Double[] Position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  UnityEngine.Vector3 coord
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  VoronoiTree.PowerDiagramSite site
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean visited
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  VoronoiTree {
              public class Diagram 
	         {
                public       void UpdateWeights (System.Collections.Generic.List<VoronoiTree.Diagram.Site> sites)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<VoronoiTree.Diagram.Site> ComputePowerDiagram (System.Collections.Generic.List<VoronoiTree.Diagram.Site> sites, System.Int32 maxIterations)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetIdxForNode (System.UInt32 nodeID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.UInt32> GetNodeIdsForTopEdgeCells ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsTopEdgeCell (System.Int32 cell)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Diagram ()  {
                throw new System.NotImplementedException();
            }
                     public Diagram (UnityEngine.Rect bounds, System.Collections.Generic.IEnumerable<VoronoiTree.Diagram.Site> sites)  {
                throw new System.NotImplementedException();
            }
         public  Delaunay.Voronoi diagram
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 completeIterations
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Int32 siteIndex;
                                    public static System.Int32 maxPowerIterations;
                                    public static System.Single maxPowerError;
                     public class Site 
	         {
                     public Site ()  {
                throw new System.NotImplementedException();
            }
                     public Site (System.UInt32 id, UnityEngine.Vector2 pos, System.Single weight)  {
                throw new System.NotImplementedException();
            }
                            public  System.UInt32 id;
                                    public  System.Single weight;
                                    public  System.Single currentWeight;
                                    public  System.Single previousWeightAdaption;
                                    public  UnityEngine.Vector2 position;
                                    public  Delaunay.Geo.Polygon poly;
                                        /* System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Signature..ctor(IRuntimeFieldInfo fieldHandle, RuntimeType declaringType)
   at System.Reflection.RtFieldInfo.get_FieldType()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenTopLevelClass(TypeInfo type)*/
                        }
}

            }
                 namespace  VoronoiTree {
              public class Leaf 
	 			: VoronoiTree.Node  
                    {
                public       void GetIntersectingSites (Delaunay.Geo.LineSegment edge, System.Collections.Generic.List<VoronoiTree.Diagram.Site> intersectingSites)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Leaf ()  {
                throw new System.NotImplementedException();
            }
                     public Leaf (VoronoiTree.Diagram.Site site, VoronoiTree.Tree parent)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  VoronoiTree {
              public class Node 
	         {
                public       void SetParent (VoronoiTree.Tree newParent)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetNeighbour (System.UInt32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<VoronoiTree.Node> GetNeighbors ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<VoronoiTree.Node, Delaunay.Geo.LineSegment>> GetNeighborsByEdge ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetSibling (System.UInt32 siteId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<VoronoiTree.Node> GetSiblings ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PlaceSites (System.Collections.Generic.List<VoronoiTree.Diagram.Site> sites, System.Int32 seed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ComputeNode (System.Collections.Generic.List<VoronoiTree.Diagram.Site> diagramSites)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ComputeNodePD (System.Collections.Generic.List<VoronoiTree.Diagram.Site> diagramSites, System.Int32 maxIters, System.Single threshold)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset (System.Collections.Generic.List<VoronoiTree.Diagram.Site> sites)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetTags (TagSet originalTags)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddTagToNeighbors (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Node ()  {
                throw new System.NotImplementedException();
            }
                     public Node (VoronoiTree.Node.NodeType type)  {
                throw new System.NotImplementedException();
            }
                     protected Node (VoronoiTree.Diagram.Site site, VoronoiTree.Node.NodeType type, VoronoiTree.Tree parent)  {
                throw new System.NotImplementedException();
            }
         public  VoronoiTree.Tree parent
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  VoronoiTree.PowerDiagram debug_LastPD
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  VoronoiTree.Node.NodeType type;
                                    public  VoronoiTree.Node.VisitedType visited;
                                    public  LoggerSSF log;
                                    public  VoronoiTree.Diagram.Site site;
                                    public  TagSet tags;
                                    public  System.Collections.Generic.Dictionary<Tag, System.Int32> minDistanceToTag;
                                    public static System.Int32 maxDepth;
                                    public static System.UInt32 maxIndex;
                     public enum  NodeType {
                Unknown,
                        Internal,
                        Leaf,
                }
         public enum  VisitedType {
                NotVisited,
                        VisitedSuccess,
                        MissingData,
                        Error,
                }
         public class SplitCommand 
	         {
                     public SplitCommand ()  {
                throw new System.NotImplementedException();
            }
                            public  VoronoiTree.Node.SplitCommand.SplitType splitType;
                                    public  TagSet dontCopyTags;
                                    public  TagSet moveTags;
                                    public  System.Int32 minChildCount;
                                    public  VoronoiTree.Node.SplitCommand.NodeTypeOverride typeOverride;
                                    public  System.Action<VoronoiTree.Tree, VoronoiTree.Node.SplitCommand> SplitFunction;
                     public enum  SplitType {
                KeepParentAsCentroid,
                        ChildrenDuplicateParent,
                        ChildrenChosenFromLayer,
                }
        public delegate void NodeTypeOverride ();
    }
}

            }
                 namespace  VoronoiTree {
              public class Tree 
	 			: VoronoiTree.Node  
                    {
                public       void SetSeed (System.Int32 seed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetChildByID (System.UInt32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 ChildCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Tree GetChildContainingLeaf (VoronoiTree.Leaf leaf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetChild (System.Int32 childIndex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddChild (VoronoiTree.Node child)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node AddSite (VoronoiTree.Diagram.Site site, VoronoiTree.Node.NodeType type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ComputeChildrenRecursive (System.Int32 depth, System.Boolean pd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ComputeChildren (System.Int32 seed, System.Boolean place, System.Boolean pd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 Count ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Reset ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 MaxDepth (System.Int32 depth)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RelaxRecursive (System.Int32 depth, System.Int32 iterations, System.Single minEnergy, System.Boolean pd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single Relax (System.Int32 depth, System.Int32 relaxDepth, System.Boolean pd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetNodeForPoint (UnityEngine.Vector2 point, System.Boolean stopAtFirstChild)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Node GetNodeForSite (VoronoiTree.Diagram.Site target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetIntersectingLeafSites (Delaunay.Geo.LineSegment edge, System.Collections.Generic.List<VoronoiTree.Diagram.Site> intersectingSites)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetIntersectingLeafNodes (Delaunay.Geo.LineSegment edge, System.Collections.Generic.List<VoronoiTree.Leaf> intersectingNodes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Tree ReplaceLeafWithTree (VoronoiTree.Leaf leaf)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       VoronoiTree.Leaf ReplaceTreeWithLeaf (VoronoiTree.Tree tree)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ForceLowestToLeaf ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Collapse ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void VisitAll (System.Action<VoronoiTree.Node> action)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<VoronoiTree.Node> ImmediateChildren ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetLeafNodes (System.Collections.Generic.List<VoronoiTree.Node> nodes, VoronoiTree.Tree.LeafNodeTest test)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetInternalNodes (System.Collections.Generic.List<VoronoiTree.Tree> nodes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ResetParentPointer ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddTagToChildren (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetNodesWithTag (Tag tag, System.Collections.Generic.List<VoronoiTree.Node> nodes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void GetNodesWithoutTag (Tag tag, System.Collections.Generic.List<VoronoiTree.Node> nodes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Tree ()  {
                throw new System.NotImplementedException();
            }
                     public Tree (System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
                     public Tree (VoronoiTree.Diagram.Site site, VoronoiTree.Tree parent, System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
                     public Tree (VoronoiTree.Diagram.Site site, System.Collections.Generic.List<VoronoiTree.Node> children, VoronoiTree.Tree parent, System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
         public  SeededRandom myRandom
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected  System.Collections.Generic.List<VoronoiTree.Node> children;
                                    public  System.Boolean dontRelaxChildren;
                    public delegate void LeafNodeTest ();
    }

            }
                 namespace  ObjectCloner {
              public abstract class SerializingCloner 
	         {
                public static      T Copy<T> (T obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  LibNoiseDotNet.Graphics.Tools.Noise.Modifier {
              public class Scale2d 
	 			: LibNoiseDotNet.Graphics.Tools.Noise.ModifierModule,LibNoiseDotNet.Graphics.Tools.Noise.IModule,LibNoiseDotNet.Graphics.Tools.Noise.IModule3D  
                    {
                public   virtual    System.Single GetValue (System.Single x, System.Single y, System.Single z)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Scale2d ()  {
                throw new System.NotImplementedException();
            }
                     public Scale2d (LibNoiseDotNet.Graphics.Tools.Noise.IModule source)  {
                throw new System.NotImplementedException();
            }
                     public Scale2d (LibNoiseDotNet.Graphics.Tools.Noise.IModule source, UnityEngine.Vector2 scale)  {
                throw new System.NotImplementedException();
            }
         public  UnityEngine.Vector2 Scale
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     protected  UnityEngine.Vector2 _scale;
                                    public static System.Single DEFAULT_SCALE;
                }

            }
                 namespace  ProcGen {
              public class Node 
	         {
                public       void SetNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetType (System.String newtype)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetSubworld ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetBiome ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetFeature ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPosition (UnityEngine.Vector2 newPos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Node ()  {
                throw new System.NotImplementedException();
            }
                     public Node (System.String type)  {
                throw new System.NotImplementedException();
            }
                     public Node (ProcGen.Node other)  {
                throw new System.NotImplementedException();
            }
                     public Node (Satsuma.Node node, System.String type, UnityEngine.Vector2 position)  {
                throw new System.NotImplementedException();
            }
         public  System.String type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  UnityEngine.Vector2 position
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  TagSet tags;
                                    public  Tag templateTag;
                                    public  TagSet featureSpecificTags;
                                    public  TagSet biomeSpecificTags;
                }

            }
                 namespace  ProcGen {
              public class Arc 
	         {
                public       void SetArc (Satsuma.Arc arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetType (System.String type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Arc ()  {
                throw new System.NotImplementedException();
            }
                     public Arc (System.String type)  {
                throw new System.NotImplementedException();
            }
                     public Arc (Satsuma.Arc arc, System.String type)  {
                throw new System.NotImplementedException();
            }
         public  Satsuma.Arc arc
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String type;
                                    public  TagSet tags;
                }

            }
                 namespace  ProcGen {
              public class Graph<N, A> 
	         {
                public       void SetSeed (System.Int32 seed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       N AddNode (System.String type, UnityEngine.Vector2 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Remove (N n)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       A AddArc (N nodeA, N nodeB, System.String type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       N FindNodeByID (System.UInt32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       A FindArcByID (System.UInt32 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       N FindNode (System.Predicate<N> pred)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       A FindArc (System.Predicate<A> pred)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<A> GetArcs (N node0)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       A GetArc (N node0, N node1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<N> GetNodes (A arc)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetDistanceToTagSetFromNode (N node, TagSet tagset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetDistanceToTagFromNode (N node, Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.Dictionary<System.UInt32, System.Int32> GetDistanceToTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<N> GetNodesWithAtLeastOneTag (TagSet tagset)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<N> GetNodesWithTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<A> GetArcsWithTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Satsuma.Drawing.PointD GetForceForBoundry (Satsuma.Drawing.PointD particle, Delaunay.Geo.Polygon bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Satsuma.Drawing.PointD GetPositionForNode (Satsuma.Node node)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetInitialNodePositions (Delaunay.Geo.Polygon bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Layout (Delaunay.Geo.Polygon bounds)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Graph (System.Int32 seed)  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<N> nodes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.List<A> arcs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Satsuma.CustomGraph baseGraph
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.Collections.Generic.List<N> nodeList;
                                    public  System.Collections.Generic.List<A> arcList;
                }

            }
                 namespace  ProcGen {
              public class River 
	 			: ProcGen.Path  
                    {
                public       void AddSection (ProcGen.Node t0, ProcGen.Node t1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 SourcePosition ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 SinkPosition ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public River ()  {
                throw new System.NotImplementedException();
            }
                     public River (ProcGen.Node t0, ProcGen.Node t1, System.String element, System.String backgroundElement, System.Single temperature, System.Single maxMass, System.Single flowIn, System.Single flowOut, System.Single widthCenter, System.Single widthBorder)  {
                throw new System.NotImplementedException();
            }
                     public River (ProcGen.River other, System.Boolean copySections)  {
                throw new System.NotImplementedException();
            }
         public  System.String element
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String backgroundElement
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single widthCenter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single widthBorder
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single temperature
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single maxMass
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single flowIn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single flowOut
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class SampleDescriber 
	         {
                     public SampleDescriber ()  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.SampleDescriber.PointSelectionMethod selectMethod
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax density
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single avoidRadius
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  PointGenerator.SampleBehaviour sampleBehaviour
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean doAvoidPoints
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean dontRelaxChildren
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax blobSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  PointSelectionMethod {
                RandomPoints,
                        Centroid,
                }
         public class Override 
	         {
                public       void ModMultiplyMass (System.Single mult)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Override ()  {
                throw new System.NotImplementedException();
            }
                     public Override (System.Nullable<System.Single> massOverride, System.Nullable<System.Single> massMultiplier, System.Nullable<System.Single> temperatureOverride, System.Nullable<System.Single> temperatureMultiplier, System.String diseaseOverride, System.Nullable<System.Int32> diseaseAmountOverride)  {
                throw new System.NotImplementedException();
            }
         public  System.Nullable<System.Single> massOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Single> massMultiplier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Single> temperatureOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Single> temperatureMultiplier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String diseaseOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Int32> diseaseAmountOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  ProcGen {
              public class SubWorld 
	 			: ProcGen.SampleDescriber  
                    {
                public       void EnforceTemplateSpawnRuleSelfConsistency ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SubWorld ()  {
                throw new System.NotImplementedException();
            }
         public  System.String nameKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String descriptionKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String utilityKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String biomeNoise
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String overrideNoise
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String densityNoise
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String borderOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 borderOverridePriority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax borderSizeOverride
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Temperature.Range temperatureRange
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Feature centralFeature
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.Feature> features
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.SampleDescriber.Override overrides
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> tags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 minChildCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean singleChildCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 extraBiomeChildren
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.WeightedBiome> biomes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Int32> featureTemplates
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.TemplateSpawnRules> subworldTemplateRules
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 iterations
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single minEnergy
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.SubWorld.ZoneType zoneType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.SampleDescriber> samplers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single pdWeight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  ZoneType {
                FrozenWastes,
                        CrystalCaverns,
                        BoggyMarsh,
                        Sandstone,
                        ToxicJungle,
                        MagmaCore,
                        OilField,
                        Space,
                        Ocean,
                        Rust,
                        Forest,
                        Radioactive,
                        Swamp,
                        Wasteland,
                        RocketInterior,
                        Metallic,
                        Barren,
                        Moo,
                }
    }

            }
                 namespace  ProcGen {
              public class ElementChoiceGroup<T> 
	         {
                     public ElementChoiceGroup ()  {
                throw new System.NotImplementedException();
            }
                     public ElementChoiceGroup (System.Collections.Generic.List<T> choices, ProcGen.Room.Selection selectionMethod)  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Room.Selection selectionMethod
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<T> choices
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class Room 
	 			: ProcGen.SampleDescriber  
                    {
                public       void ResetMobs (SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.WeightedMob GetNextMob (SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Room ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Room.Shape shape
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Room.Selection mobselection
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.WeightedMob> mobs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Shape {
                Circle,
                        Oval,
                        Blob,
                        Line,
                        Square,
                        TallThin,
                        ShortWide,
                        Template,
                        PhysicalLayout,
                        Splat,
                }
         public enum  Selection {
                None,
                        OneOfEach,
                        NOfEach,
                        Weighted,
                        WeightedBucket,
                        WeightedResample,
                        PickOneWeighted,
                        HorizontalSlice,
                }
    }

            }
                 namespace  ProcGen {
              public class Mob 
	 			: ProcGen.SampleDescriber  
                    {
                     public Mob ()  {
                throw new System.NotImplementedException();
            }
                     public Mob (ProcGen.Mob.Location location)  {
                throw new System.NotImplementedException();
            }
         public  System.String prefabName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Mob.Location location
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Location {
                Floor,
                        Ceiling,
                        Air,
                        BackWall,
                        NearWater,
                        NearLiquid,
                        Solid,
                        Water,
                        ShallowLiquid,
                        Surface,
                        LiquidFloor,
                        AnyFloor,
                }
    }

            }
                 namespace  ProcGen {
              public class MobReference 
	         {
                     public MobReference ()  {
                throw new System.NotImplementedException();
            }
         public  System.String type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public abstract class Util 
	         {
                    /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                        /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public static      System.Collections.Generic.List<Vector2I> StaggerLine (UnityEngine.Vector2 p0, UnityEngine.Vector2 p1, System.Int32 numberOfBreaks, SeededRandom rand, System.Single staggerRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Vector2I> GetLine (UnityEngine.Vector2 p0, UnityEngine.Vector2 p1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<UnityEngine.Vector2> GetCircle (UnityEngine.Vector2 center, System.Int32 radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Vector2I> GetFilledCircle (UnityEngine.Vector2 center, System.Single radius)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 RandomInUnitCircle (System.Random rng)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Vector2I> GetBlob (UnityEngine.Vector2 center, System.Single radius, System.Random rng)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<Vector2I> GetSplat (UnityEngine.Vector2 center, System.Single radius, System.Random rng)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Method 'System.Collections.Generic.HashSet`1<T>.System.Collections.Generic.ICollection<T>.Add(!0)' is security transparent, but is a member of a security critical type.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public static      System.Collections.Generic.List<Vector2I> GetFilledRectangle (UnityEngine.Vector2 center, System.Single width, System.Single height, SeededRandom rand, System.Single jitterMaxStep, System.Single jitterRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetRandom<T> (T[] tArray, SeededRandom rand)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T GetRandom<T> (System.Collections.Generic.List<T> tList, SeededRandom rand)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  ProcGen {
              public interface IWeighted 
	         {
           System.Single weight
                   
                 {
                                                get;
                                                    set;
                                         }
                 }

            }
                 namespace  ProcGen {
              public abstract class WeightedRandom 
	         {
                public static      T Choose<T> (System.Collections.Generic.List<T> list, SeededRandom rand) where T : ProcGen.IWeighted
 
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  ProcGen {
              public class WeightedName 
	 			: ProcGen.IWeighted  
                    {
                     public WeightedName ()  {
                throw new System.NotImplementedException();
            }
                     public WeightedName (System.String name, System.Single weight)  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String overrideName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WeightedSubworldName 
	 			: ProcGen.IWeighted  
                    {
                     public WeightedSubworldName ()  {
                throw new System.NotImplementedException();
            }
                     public WeightedSubworldName (System.String name, System.Single weight)  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String overrideName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single overridePower
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 minCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 maxCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 priority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WeightedSimHash 
	 			: ProcGen.IWeighted  
                    {
                     public WeightedSimHash ()  {
                throw new System.NotImplementedException();
            }
                     public WeightedSimHash (System.String elementHash, System.Single weight, ProcGen.SampleDescriber.Override overrides)  {
                throw new System.NotImplementedException();
            }
         public  System.String element
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.SampleDescriber.Override overrides
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public struct MinMax 
	         {
                public       System.Single GetRandomValueWithinRange (SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetAverage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Mod (ProcGen.MinMax mod)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MinMax (System.Single min, System.Single max)  {
                throw new System.NotImplementedException();
            }
         public  System.Single min
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single max
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public struct MinMaxI 
	         {
                public       System.Int32 GetRandomValueWithinRange (SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetAverage ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Mod (ProcGen.MinMaxI mod)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MinMaxI (System.Int32 min, System.Int32 max)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 min
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 max
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public struct ChangeFloats 
	         {
         public  ProcGen.ChangeFloats.ChangeType change
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  ChangeType {
                NoChange,
                        OverrideRange,
                        OverrideSet,
                        TakeNoiseVal,
                }
    }

            }
                 namespace  ProcGen {
              public class FeatureConverter 
	         {
                     public FeatureConverter ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.FeatureConverter.Shape shape
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax size
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax density
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ChangeFloats mass
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ChangeFloats temperature
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Shape {
                Circle,
                        Oval,
                        Blob,
                        Square,
                        Rectangle,
                        Line,
                }
    }

            }
                 namespace  ProcGen {
              public class Feature 
	         {
                     public Feature ()  {
                throw new System.NotImplementedException();
            }
         public  System.String type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> tags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> excludesTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class Temperature 
	         {
                     public Temperature ()  {
                throw new System.NotImplementedException();
            }
         public  System.Single min
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single max
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Range {
                ExtremelyCold,
                        VeryCold,
                        Cold,
                        Chilly,
                        Cool,
                        Mild,
                        Room,
                        HumanWarm,
                        HumanHot,
                        Hot,
                        VeryHot,
                        ExtremelyHot,
                }
    }

            }
                 namespace  ProcGen {
              public class WeightedMob 
	 			: ProcGen.IWeighted  
                    {
                     public WeightedMob ()  {
                throw new System.NotImplementedException();
            }
                     public WeightedMob (System.String tag, System.Single weight)  {
                throw new System.NotImplementedException();
            }
         public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String tag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WeightedBiome 
	 			: ProcGen.IWeighted  
                    {
                     public WeightedBiome ()  {
                throw new System.NotImplementedException();
            }
                     public WeightedBiome (System.String name, System.Single weight)  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> tags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public struct Segment 
	         {
                public       System.Collections.Generic.List<ProcGen.Segment> Stagger (SeededRandom rnd, System.Single maxDistance, System.Single staggerRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Segment (UnityEngine.Vector2 e0, UnityEngine.Vector2 e1)  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Vector2 e0;
                                    public  UnityEngine.Vector2 e1;
                }

            }
                 namespace  ProcGen {
              public class Path 
	         {
                public       void AddSegment (ProcGen.Segment segment)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AddSegment (UnityEngine.Vector2 e0, UnityEngine.Vector2 e1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Stagger (SeededRandom rnd, System.Single maxDistance, System.Single staggerRange)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Path ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.List<ProcGen.Segment> pathElements;
                }

            }
                 namespace  ProcGen {
              public abstract class SettingsCache 
	         {
                public static      System.String GetAbsoluteContentPath (System.String dlcId, System.String optionalSubpath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String RewriteWorldgenPath (System.String scopePath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String RewriteWorldgenPathYaml (System.String scopePath)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetScope (System.String dlcId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetDlcIdAndPath (System.String scopePath, out System.String dlcId, out System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GuessScopedPath (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CloneInToNewWorld (ProcGen.MutatedWorldData worldData)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetCachedFeatureNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ProcGen.FeatureSettings GetCachedFeature (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetCachedTraitNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<ProcGen.WorldTrait> GetCachedTraits ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ProcGen.WorldTrait GetCachedTrait (System.String name, System.Boolean assertMissingTrait)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      ProcGen.SubWorld GetCachedSubWorld (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadFeatures (System.Collections.Generic.Dictionary<System.String, System.Int32> features, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadSubworlds (System.Collections.Generic.List<ProcGen.WeightedSubworldName> subworlds, System.String prefix, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadWorldTraits (System.String path, System.String prefix, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LoadWorldTrait (Klei.FileHandle file, System.String path, System.String prefix, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetWorldNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetClusterNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean LoadFiles (System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.List<System.String> GetRandomTraits (System.Int32 seed, ProcGen.World world)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static SettingsCache ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.LevelLayerSettings layers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ComposableDictionary<System.String, ProcGen.River> rivers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ComposableDictionary<System.String, ProcGen.Room> rooms
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ComposableDictionary<ProcGen.Temperature.Range, ProcGen.Temperature> temperatures
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ComposableDictionary<System.String, System.Collections.Generic.List<ProcGen.WeightedSimHash>> borders
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.DefaultSettings defaults
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MobSettings mobs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static ProcGen.ClusterLayouts clusterLayouts;
                                    public static ProcGen.Worlds worlds;
                                    public static System.Collections.Generic.Dictionary<System.String, ProcGen.SubWorld> subworlds;
                                    public static ProcGen.TerrainElementBandSettings biomes;
                                    public static ProcGen.Noise.NoiseTreeFiles noise;
                }

            }
                 namespace  ProcGen {
              public class WorldGenSettings 
	         {
                public       BaseLocation GetBaseLocation ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.String> GetOverworldAddTags ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.String> GetDefaultMoveTags ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<ProcGen.StartingWorldElementSetting> GetDefaultStartingElements ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String[] GetTraitIDs ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean GetBoolSetting (System.String target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetStringSetting (System.String target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetFloatSetting (System.String target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetIntSetting (System.String target)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       E GetEnumSetting<E> (System.String target) where E : struct
 
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasFeature (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.FeatureSettings GetFeature (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.FeatureSettings TryGetFeature (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasSubworld (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.SubWorld GetSubWorld (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.SubWorld TryGetSubWorld (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<ProcGen.WeightedSubWorld> GetSubworldsForWorld (System.Collections.Generic.List<ProcGen.WeightedSubworldName> subworldList)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasMob (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Mob GetMob (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ElementBandConfiguration GetElementBandForBiome (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WorldGenSettings (System.String worldName, System.Collections.Generic.List<System.String> traits, System.Boolean assertMissingTraits)  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.World world
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String ClusterDefaultName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class ComposableDictionary<Key, Value> 
	 			: IMerge<ProcGen.ComposableDictionary<Key, Value>>  
                    {
                public       void Add (Key key, Value value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Add (System.Collections.Generic.KeyValuePair<Key, Value> pair)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Remove (Key key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ContainsKey (Key key)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean TryGetValue (Key key, out Value value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<Key, Value>> GetEnumerator ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    ProcGen.ComposableDictionary<Key, Value> Merge (ProcGen.ComposableDictionary<Key, Value> other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ComposableDictionary ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.Dictionary<Key, Value> add
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<Key> remove
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.ICollection<Key> Keys
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Collections.Generic.ICollection<Value> Values
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean IsReadOnly
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class TerrainElementBandSettings 
	         {
                public       System.String[] GetNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TerrainElementBandSettings ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.Dictionary<System.String, ElementBandConfiguration> BiomeBackgroundElementBandConfigurations
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class BiomeSettings 
	 			: IMerge<ProcGen.BiomeSettings>  
                    {
                public       System.String[] GetNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    ProcGen.BiomeSettings Merge (ProcGen.BiomeSettings other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public BiomeSettings ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.ComposableDictionary<System.String, ElementBandConfiguration> TerrainBiomeLookupTable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class FeatureSettings 
	         {
                public       System.Boolean HasGroup (System.String item)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.WeightedSimHash GetOneWeightedSimHash (System.String item, SeededRandom rnd)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.WeightedSimHash GetWeightedSimHashAtChoice (System.String item, System.Single percentage)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FeatureSettings ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Room.Shape shape
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.Int32> borders
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax blobSize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String forceBiome
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> biomeTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.MobReference> internalMobs
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> tags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.ElementChoiceGroup<ProcGen.WeightedSimHash>> ElementChoiceGroups
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class LevelLayerSettings 
	 			: IMerge<ProcGen.LevelLayerSettings>  
                    {
                public   virtual    ProcGen.LevelLayerSettings Merge (ProcGen.LevelLayerSettings other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LevelLayerSettings ()  {
                throw new System.NotImplementedException();
            }
         public  LevelLayer LevelLayers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WeightedSubWorld 
	 			: ProcGen.IWeighted  
                    {
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WeightedSubWorld (System.Single weight, ProcGen.SubWorld subWorld, System.Single overridePower, System.Int32 minCount, System.Int32 maxCount, System.Int32 priority)  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.SubWorld subWorld
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single weight
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single overridePower
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 minCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 maxCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 priority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WorldDisplayInfo 
	         {
                     public WorldDisplayInfo ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  ProcGen {
              public class WorldTrait 
	         {
                public       System.Boolean IsValid (ProcGen.World world, System.Boolean logErrors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WorldTrait ()  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String description
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String colorHex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> forbiddenDLCIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> exclusiveWith
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> exclusiveWithTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> traitTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax startingBasePositionHorizontalMod
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax startingBasePositionVerticalMod
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.WeightedSubworldName> additionalSubworldFiles
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.AllowedCellsFilter> additionalUnknownCellFilters
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.TemplateSpawnRules> additionalWorldTemplateRules
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Int32> globalFeatureTemplateMods
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Int32> globalFeatureMods
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> removeWorldTemplateRulesById
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.WorldTrait.ElementBandModifier> elementBandModifiers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  TagSet traitTagsSet
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.String filePath;
                     public class ElementBandModifier 
	         {
                     public ElementBandModifier ()  {
                throw new System.NotImplementedException();
            }
         public  System.String element
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single massMultiplier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single bandMultiplier
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  ProcGen {
              public class World 
	         {
                public       void ModStartLocation (ProcGen.MinMax hMod, ProcGen.MinMax vMod)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Validate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValidTrait (ProcGen.WorldTrait trait)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public World ()  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String description
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String nameTable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String asteroidIcon
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean disableWorldTraits
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.TraitRule> worldTraitRules
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single worldTraitScale
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.World.Skip skip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean moduleInterior
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.World.WorldCategory category
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2I worldsize
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.DefaultSettings defaultsOverrides
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.World.LayoutMethod layoutMethod
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.WeightedSubworldName> subworldFiles
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.AllowedCellsFilter> unknownCellsAllowedSubworlds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String startSubworldName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String startingBaseTemplate
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax startingBasePositionHorizontal
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMax startingBasePositionVertical
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Int32> globalFeatures
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.TemplateSpawnRules> worldTemplateRules
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> seasons
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> fixedTraits
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean adjacentTemporalTear
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String filePath;
                     public enum  WorldCategory {
                Asteroid,
                        Moon,
                }
         public enum  Skip {
                Never,
                        False,
                        Always,
                        True,
                        EditorOnly,
                }
         public enum  LayoutMethod {
                Default,
                        VoronoiTree,
                        PowerTree,
                }
         public class TraitRule 
	         {
                public       void Validate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TraitRule ()  {
                throw new System.NotImplementedException();
            }
                     public TraitRule (System.Int32 min, System.Int32 max)  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 min
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 max
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> requiredTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> specificTraits
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> forbiddenTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> forbiddenTraits
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
     public class TemplateSpawnRules 
	         {
                public       System.Boolean IsGuaranteeRule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TemplateSpawnRules ()  {
                throw new System.NotImplementedException();
            }
         public  System.String ruleId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> names
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.World.TemplateSpawnRules.ListRule listRule
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 someCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 moreCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 times
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single priority
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean allowDuplicates
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean allowExtremeTemperatureOverlap
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean useRelaxedFiltering
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.World.AllowedCellsFilter> allowedCellsFilter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  ListRule {
                GuaranteeOne,
                        GuaranteeSome,
                        GuaranteeSomeTryMore,
                        GuaranteeAll,
                        TryOne,
                        TrySome,
                        TryAll,
                }
    }
     public class AllowedCellsFilter 
	         {
                public       void Validate (System.String parentFile, System.Collections.Generic.List<ProcGen.WeightedSubworldName> parentCachedFiles)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AllowedCellsFilter ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.World.AllowedCellsFilter.TagCommand tagcommand
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String tag
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 minDistance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 maxDistance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.World.AllowedCellsFilter.Command command
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.Temperature.Range> temperatureRanges
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.SubWorld.ZoneType> zoneTypes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> subworldNames
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  TagCommand {
                Default,
                        AtTag,
                        NotAtTag,
                        DistanceFromTag,
                }
         public enum  Command {
                Clear,
                        Replace,
                        UnionWith,
                        IntersectWith,
                        ExceptWith,
                        SymmetricExceptWith,
                        All,
                }
    }
}

            }
                 namespace  ProcGen {
              public class MutatedWorldData 
	         {
                     public MutatedWorldData (ProcGen.World world, System.Collections.Generic.List<ProcGen.WorldTrait> traits)  {
                throw new System.NotImplementedException();
            }
                            public  ProcGen.World world;
                                    public  System.Collections.Generic.List<ProcGen.WorldTrait> traits;
                                    public  System.Collections.Generic.Dictionary<System.String, ProcGen.SubWorld> subworlds;
                                    public  System.Collections.Generic.Dictionary<System.String, ProcGen.FeatureSettings> features;
                                    public  ProcGen.TerrainElementBandSettings biomes;
                                    public  ProcGen.MobSettings mobs;
                }

            }
                 namespace  ProcGen {
              public class Worlds 
	         {
                public       System.Boolean HasWorld (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.World GetWorldData (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.String> GetNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetWorldName (System.String path, System.String prefix)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetIconFilename (System.String iconName)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadReferencedWorlds (System.String path, System.String prefix, System.Collections.Generic.ISet<System.String> referencedWorlds, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Validate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Worlds ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.Dictionary<System.String, ProcGen.World> worldCache;
                }

            }
                 namespace  ProcGen {
              public class ClusterLayouts 
	         {
                public       ProcGen.ClusterLayout GetClusterData (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.Dictionary<System.String, System.String> GetStartingBaseNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<System.String> GetNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LoadFiles (System.String path, System.String addPrefix, System.Collections.Generic.List<Klei.YamlIO.Error> errors)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.World GetWorldData (System.String clusterID, System.Int32 worldID)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ClusterLayouts ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Collections.Generic.Dictionary<System.String, ProcGen.ClusterLayout> clusterCache;
                }

            }
                 namespace  ProcGen {
              public class DefaultSettings 
	         {
                     public DefaultSettings ()  {
                throw new System.NotImplementedException();
            }
         public  BaseLocation baseData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, System.Object> data
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> defaultMoveTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<System.String> overworldAddTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.StartingWorldElementSetting> startingWorldElements
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class StartingWorldElementSetting 
	         {
                     public StartingWorldElementSetting ()  {
                throw new System.NotImplementedException();
            }
         public  System.String element
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single amount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class MobSettings 
	 			: IMerge<ProcGen.MobSettings>  
                    {
                public       System.Boolean HasMob (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Mob GetMob (System.String id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       TagSet GetMobTags ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    ProcGen.MobSettings Merge (ProcGen.MobSettings other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MobSettings ()  {
                throw new System.NotImplementedException();
            }
                     static MobSettings ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.ComposableDictionary<System.String, ProcGen.Mob> MobLookupTable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.Single AmbientMobDensity;
                }

            }
                 namespace  ProcGen {
              public class SpaceMapPOIPlacement 
	         {
                     public SpaceMapPOIPlacement ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<System.String> pois
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 numToSpawn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMaxI allowedRings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean avoidClumping
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean canSpawnDuplicates
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class WorldPlacement 
	         {
                public       void SetPosition (Vector2I pos)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSize (Vector2I size)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public WorldPlacement ()  {
                throw new System.NotImplementedException();
            }
         public  System.String world
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.MinMaxI allowedRings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 buffer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 x
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 y
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean startWorld
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen {
              public class ClusterLayout 
	         {
                public static      System.String GetName (System.String path, System.String addPrefix)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetStartWorld ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String GetCoordinatePrefix ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ClusterLayout ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<ProcGen.WorldPlacement> worldPlacements
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.SpaceMapPOIPlacement> poiPlacements
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String description
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String requiredDlcId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String forbiddenDlcId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 difficulty
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.ClusterLayout.Skip skip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 clusterCategory
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 startWorldIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 numRings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 menuOrder
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String coordinatePrefix
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public  System.String filePath;
                                    public static System.String directory;
                     public enum  Skip {
                Never,
                        Always,
                        EditorOnly,
                }
         public enum  ClusterCategory {
                vanilla,
                        spacedOutVanillaStyle,
                        spacedOutStyle,
                }
    }

            }
                 namespace  ProcGen {
              public class WorldGenTags 
	         {
                     public WorldGenTags ()  {
                throw new System.NotImplementedException();
            }
                     static WorldGenTags ()  {
                throw new System.NotImplementedException();
            }
                            public static Tag ConnectToSiblings;
                                    public static Tag ConnectTypeMinSpan;
                                    public static Tag ConnectTypeSpan;
                                    public static Tag ConnectTypeNone;
                                    public static Tag ConnectTypeFull;
                                    public static Tag ConnectTypeRandom;
                                    public static Tag Cell;
                                    public static Tag Edge;
                                    public static Tag Corner;
                                    public static Tag EdgeUnpassable;
                                    public static Tag EdgeClosed;
                                    public static Tag EdgeOpen;
                                    public static Tag IgnoreCaveOverride;
                                    public static Tag ErodePointToCentroid;
                                    public static Tag ErodePointToCentroidInv;
                                    public static Tag ErodePointToEdge;
                                    public static Tag ErodePointToEdgeInv;
                                    public static Tag ErodePointToBorder;
                                    public static Tag ErodePointToBorderInv;
                                    public static Tag ErodePointToBorderWeak;
                                    public static Tag ErodePointToWorldTop;
                                    public static Tag ErodePointToWorldTopOrSide;
                                    public static Tag DistFunctionPointCentroid;
                                    public static Tag DistFunctionPointEdge;
                                    public static Tag SplitOnParentDensity;
                                    public static Tag SplitTwice;
                                    public static Tag UltraHighDensitySplit;
                                    public static Tag VeryHighDensitySplit;
                                    public static Tag HighDensitySplit;
                                    public static Tag MediumDensitySplit;
                                    public static Tag UnassignedNode;
                                    public static Tag Feature;
                                    public static Tag CenteralFeature;
                                    public static Tag Overworld;
                                    public static Tag StartNear;
                                    public static Tag StartMedium;
                                    public static Tag StartFar;
                                    public static Tag NearEdge;
                                    public static Tag NearSurface;
                                    public static Tag NearDepths;
                                    public static Tag AtStart;
                                    public static Tag AtSurface;
                                    public static Tag AtDepths;
                                    public static Tag AtEdge;
                                    public static Tag EdgeOfVoid;
                                    public static Tag Dry;
                                    public static Tag Wet;
                                    public static Tag River;
                                    public static Tag StartWorld;
                                    public static Tag StartLocation;
                                    public static Tag NearStartLocation;
                                    public static Tag POI;
                                    public static Tag NoGlobalFeatureSpawning;
                                    public static Tag PreventAmbientMobsInFeature;
                                    public static Tag AllowExceedNodeBorders;
                                    public static Tag HighPriorityFeature;
                                    public static Tag RemoveWorldBorderOverVacuum;
                                    public static Tag CaveVoidSliver;
                                    public static Tag SwapLakesToBelow;
                                    public static Tag Geode;
                                    public static Tag TheVoid;
                                    public static Tag SprinkleOfMetal;
                                    public static Tag SprinkleOfOxyRock;
                                    public static Tag RocketInterior;
                                    public static Tag DEBUG_Split;
                                    public static Tag DEBUG_SplitForChildCount;
                                    public static Tag DEBUG_SplitTopSite;
                                    public static Tag DEBUG_SplitBottomSite;
                                    public static Tag DEBUG_SplitLargeStartingSites;
                                    public static Tag DEBUG_NoSplitForChildCount;
                                    public static TagSet DebugTags;
                                    public static TagSet MapTags;
                                    public static TagSet CommandTags;
                                    public static TagSet WorldTags;
                                    public static TagSet DistanceTags;
                }

            }
                 namespace  ProcGen.Noise {
              public class Combiner 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D leftModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D rightModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSouces (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D target, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D leftModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D rightModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Combiner ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Combiner.CombinerType combineType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  CombinerType {
                _UNSET_,
                        Add,
                        Max,
                        Min,
                        Multiply,
                        Power,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class ControlPointList 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<LibNoiseDotNet.Graphics.Tools.Noise.Modifier.ControlPoint> GetControls ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ControlPointList ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<ProcGen.Noise.ControlPointList.Control> points
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public class Control 
	         {
                     public Control ()  {
                throw new System.NotImplementedException();
            }
                     public Control (System.Single i, System.Single o)  {
                throw new System.NotImplementedException();
            }
         public  System.Single input
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single output
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  ProcGen.Noise {
              public class Filter 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSouces (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D target, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D sourceModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Filter ()  {
                throw new System.NotImplementedException();
            }
                     public Filter (ProcGen.Noise.Filter src)  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Filter.NoiseFilter filter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single frequency
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single lacunarity
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 octaves
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single offset
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single gain
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single exponent
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single scale
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single bias
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  NoiseFilter {
                _UNSET_,
                        Pipe,
                        SumFractal,
                        SinFractal,
                        Billow,
                        MultiFractal,
                        HeterogeneousMultiFractal,
                        HybridMultiFractal,
                        RidgedMultiFractal,
                        Voronoi,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class FloatList 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FloatList ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<System.Single> points
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Noise {
              public class Modifier 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D sourceModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSouces (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D target, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D sourceModule, ProcGen.Noise.FloatList controlFloats, ProcGen.Noise.ControlPointList controlPoints)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Modifier ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Modifier.ModifyType modifyType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single lower
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single upper
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single exponent
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean invert
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single scale
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single bias
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2f scale2d
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  ModifyType {
                _UNSET_,
                        Abs,
                        Clamp,
                        Exponent,
                        Invert,
                        ScaleBias,
                        Scale2d,
                        Curve,
                        Terrace,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class Primitive 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule (System.Int32 globalSeed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Primitive ()  {
                throw new System.NotImplementedException();
            }
                     public Primitive (ProcGen.Noise.Primitive src)  {
                throw new System.NotImplementedException();
            }
         public  LibNoiseDotNet.Graphics.Tools.Noise.NoisePrimitive primative
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  LibNoiseDotNet.Graphics.Tools.Noise.NoiseQuality quality
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 seed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single offset
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Noise {
              public class Selector 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D selectModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D leftModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D rightModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSouces (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D target, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D controlModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D rightModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D leftModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Selector ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Selector.SelectType selectType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single lower
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single upper
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single edge
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  SelectType {
                _UNSET_,
                        Blend,
                        Select,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class Transformer 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D CreateModule (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D sourceModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D xModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D yModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D zModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetSouces (LibNoiseDotNet.Graphics.Tools.Noise.IModule3D target, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D sourceModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D xModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D yModule, LibNoiseDotNet.Graphics.Tools.Noise.IModule3D zModule)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Transformer ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Transformer.TransformerType transformerType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single power
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2f vector
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  TransformerType {
                _UNSET_,
                        Displace,
                        Turbulence,
                        RotatePoint,
                        TranslatePoint,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class NoiseBase 
	         {
                public   virtual    System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NoiseBase ()  {
                throw new System.NotImplementedException();
            }
         public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2f pos
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Noise {
              public class SampleSettings 
	 			: ProcGen.Noise.NoiseBase  
                    {
                public      override System.Type GetObjectType ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SampleSettings ()  {
                throw new System.NotImplementedException();
            }
         public  System.Single zoom
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean normalise
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean seamless
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2f lowerBound
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Vector2f upperBound
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Noise {
              public class NoiseTreeFiles 
	         {
                public static      System.String GetDirectoryRel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetPathRel ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetTreeFilePathRel (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Noise.Tree LoadTree (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Single GetZoomForTree (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean ShouldNormaliseTree (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String[] GetTreeNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Noise.Tree GetTree (System.String name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D BuildTree (System.String name, System.Int32 globalSeed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public NoiseTreeFiles ()  {
                throw new System.NotImplementedException();
            }
                     static NoiseTreeFiles ()  {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<System.String> tree_files
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                                     public static System.String NOISE_FILE;
                }

            }
                 namespace  ProcGen.Noise {
              public class Link 
	         {
                     public Link ()  {
                throw new System.NotImplementedException();
            }
                     public Link (ProcGen.Noise.Link.Type type, System.String name)  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Link.Type type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                      public enum  Type {
                None,
                        Primitive,
                        Filter,
                        Transformer,
                        Selector,
                        Modifier,
                        Combiner,
                        FloatPoints,
                        ControlPoints,
                        Terminator,
                }
    }

            }
                 namespace  ProcGen.Noise {
              public class NodeLink 
	         {
                     public NodeLink ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.Link target
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Noise.Link source0
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Noise.Link source1
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Noise.Link source2
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  ProcGen.Noise.Link source3
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Noise {
              public class Tree 
	         {
                public       void ClearEmptyLists ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CreateEmptyLists ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       LibNoiseDotNet.Graphics.Tools.Noise.IModule3D BuildFinalModule (System.Int32 globalSeed)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String[] GetPrimitiveNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String[] GetFilterNames ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Tree ()  {
                throw new System.NotImplementedException();
            }
         public  ProcGen.Noise.SampleSettings settings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.List<ProcGen.Noise.NodeLink> links
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Primitive> primitives
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Filter> filters
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Transformer> transformers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Selector> selectors
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Modifier> modifiers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.Combiner> combiners
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.FloatList> floats
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Collections.Generic.Dictionary<System.String, ProcGen.Noise.ControlPointList> controlpoints
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  ProcGen.Map {
              public class Cell 
	 			: ProcGen.Node  
                    {
                     public Cell ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int64 NodeId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  ProcGen.Map {
              public class Corner 
	         {
                     public Corner (UnityEngine.Vector2 position)  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Vector2 position;
                }

            }
                 namespace  ProcGen.Map {
              public class Edge 
	 			: ProcGen.Arc  
                    {
                public       void SetCorners (ProcGen.Map.Corner corner0, ProcGen.Map.Corner corner1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       UnityEngine.Vector2 MidPoint ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Edge ()  {
                throw new System.NotImplementedException();
            }
                     public Edge (Satsuma.Arc arc, ProcGen.Map.Cell s0, ProcGen.Map.Cell s1, ProcGen.Map.Corner c0, ProcGen.Map.Corner c1)  {
                throw new System.NotImplementedException();
            }
                            public  ProcGen.Map.Corner corner0;
                                    public  ProcGen.Map.Corner corner1;
                }

            }
                 namespace  ProcGen.Map {
              public class MapGraph 
	 			: ProcGen.Graph<ProcGen.Map.Cell, ProcGen.Map.Edge>  
                    {
                public       ProcGen.Map.Edge GetEdge (ProcGen.Map.Cell site0, ProcGen.Map.Cell site1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Map.Edge AddEdge (ProcGen.Map.Cell site0, ProcGen.Map.Cell site1, ProcGen.Map.Corner corner0, ProcGen.Map.Corner corner1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Map.Edge AddOrGetEdge (ProcGen.Map.Cell site0, ProcGen.Map.Cell site1, ProcGen.Map.Corner corner0, ProcGen.Map.Corner corner1)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       ProcGen.Map.Corner AddOrGetCorner (UnityEngine.Vector2 position)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Collections.Generic.List<ProcGen.Map.Edge> GetEdgesWithTag (Tag tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearEdgesAndCorners ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void ClearTags ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Validate ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MapGraph (System.Int32 seed) : base(default(System.Int32)) {
                throw new System.NotImplementedException();
            }
         public  System.Collections.Generic.List<ProcGen.Map.Corner> corners
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Collections.Generic.List<ProcGen.Map.Corner> cornerList;
                }

            }
                 namespace  KSerialization {
              public abstract class Stats 
	         {
                public static      void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Write (System.Type type, System.Int64 num_bytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Read (System.Type type, System.Int64 num_bytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Print ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Stats ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public enum  MemberSerialization {
                OptOut,
                        OptIn,
                        Fields,
                        Invalid,
                }
    
            }
                 namespace  KSerialization {
              public class TypeInfo 
	         {
                public       void BuildGenericArgs ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean Equals (KSerialization.TypeInfo other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TypeInfo ()  {
                throw new System.NotImplementedException();
            }
                            public  System.Type type;
                                    public  KSerialization.SerializationTypeInfo info;
                                    public  KSerialization.TypeInfo[] subTypes;
                                    public  System.Type genericInstantiationType;
                                    public  System.Type[] genericTypeArgs;
                }

            }
                 namespace  KSerialization {
              public enum  SerializationTypeInfo {
                UserDefined,
                        SByte,
                        Byte,
                        Boolean,
                        Int16,
                        UInt16,
                        Int32,
                        UInt32,
                        Int64,
                        UInt64,
                        Single,
                        Double,
                        String,
                        Enumeration,
                        Vector2I,
                        Vector2,
                        Vector3,
                        Array,
                        Pair,
                        Dictionary,
                        List,
                        HashSet,
                        Queue,
                        Colour,
                        VALUE_MASK,
                        IS_VALUE_TYPE,
                        IS_GENERIC_TYPE,
                }
    
            }
                 namespace  KSerialization {
              public enum  BoundaryTag {
                DirectoryStart,
                        DirectoryEnd,
                        TemplateStart,
                        TemplateEnd,
                        FieldStart,
                        FieldEnd,
                        PropertyStart,
                        PropertyEnd,
                }
    
            }
                 namespace  KSerialization {
              public sealed class SerializationConfig 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public SerializationConfig (KSerialization.MemberSerialization memberSerialization)  {
                throw new System.NotImplementedException();
            }
         public  KSerialization.MemberSerialization MemberSerialization
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  KSerialization {
              public sealed class Serialize 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public Serialize ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public sealed class CustomSerialize 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public CustomSerialize ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public sealed class CustomDeserialize 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public CustomDeserialize ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public abstract class Helper 
	         {
                public static      System.Boolean IsUserDefinedType (KSerialization.SerializationTypeInfo type_info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsArray (KSerialization.SerializationTypeInfo type_info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsGenericType (KSerialization.SerializationTypeInfo type_info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsValueType (KSerialization.SerializationTypeInfo type_info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.SerializationTypeInfo EncodeSerializationType (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void WriteValue (System.IO.BinaryWriter writer, KSerialization.TypeInfo type_info, System.Object value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetSerializationMethods (System.Type type, System.Type type_a, System.Type type_b, System.Type type_c, out System.Reflection.MethodInfo method_a, out System.Reflection.MethodInfo method_b, out System.Reflection.MethodInfo method_c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsPOD (KSerialization.SerializationTypeInfo info)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsPOD (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String GetKTypeString (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ClearTypeInfoMask ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SetTypeInfoMask (KSerialization.SerializationTypeInfo mask)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Helper ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public class Serializer 
	         {
                public       void Serialize (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Serialize (System.Object obj, System.IO.BinaryWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SerializeTypeless (System.Object obj, System.IO.BinaryWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Serializer (System.IO.BinaryWriter writer)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public class Deserializer 
	         {
                public       System.Boolean Deserialize (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Deserialize (System.Object obj, IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeserializeTypeless (System.Type type, System.Object obj, IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeserializeTypeless (System.Object obj, IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean Deserialize (System.Type type, IReader reader, out System.Object result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Deserializer (IReader reader)  {
                throw new System.NotImplementedException();
            }
                            public  IReader reader;
                }

            }
                 namespace  KSerialization {
              public class Manager 
	         {
                public static      void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Type GetType (System.String type_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.TypeInfo GetTypeInfo (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.SerializationTemplate GetSerializationTemplate (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.SerializationTemplate GetSerializationTemplate (System.String type_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.DeserializationTemplate GetDeserializationTemplate (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.DeserializationTemplate GetDeserializationTemplate (System.String type_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SerializeDirectory (System.IO.BinaryWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DeserializeDirectory (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean HasDeserializationMapping (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.DeserializationMapping GetDeserializationMapping (System.Type type)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      KSerialization.DeserializationMapping GetDeserializationMapping (System.String type_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Manager ()  {
                throw new System.NotImplementedException();
            }
                     static Manager ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public class SerializationTemplate 
	         {
                public      override System.String ToString ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SerializeTemplate (System.IO.BinaryWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SerializeData (System.Object obj, System.IO.BinaryWriter writer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SerializationTemplate (System.Type type)  {
                throw new System.NotImplementedException();
            }
                            public  System.Type serializableType;
                                    public  KSerialization.TypeInfo typeInfo;
                                    public  System.Collections.Generic.List<KSerialization.SerializationTemplate.SerializationField> serializableFields;
                                    public  System.Collections.Generic.List<KSerialization.SerializationTemplate.SerializationProperty> serializableProperties;
                                    public  System.Reflection.MethodInfo onSerializing;
                                    public  System.Reflection.MethodInfo onSerialized;
                                    public  System.Reflection.MethodInfo customSerialize;
                     public struct SerializationField 
	         {
                            public  System.Reflection.FieldInfo field;
                                    public  KSerialization.TypeInfo typeInfo;
                }
     public struct SerializationProperty 
	         {
                            public  System.Reflection.PropertyInfo property;
                                    public  KSerialization.TypeInfo typeInfo;
                }
}

            }
                 namespace  KSerialization {
              public class DeserializationTemplate 
	         {
                     public DeserializationTemplate (System.String template_type_name, IReader reader)  {
                throw new System.NotImplementedException();
            }
                            public  System.String typeName;
                                    public  System.Reflection.MethodInfo onDeserializing;
                                    public  System.Reflection.MethodInfo onDeserialized;
                                    public  System.Reflection.MethodInfo customDeserialize;
                                    public  System.Collections.Generic.List<KSerialization.DeserializationTemplate.SerializedInfo> serializedMembers;
                     public struct SerializedInfo 
	         {
                            public  System.String name;
                                    public  KSerialization.TypeInfo typeInfo;
                }
}

            }
                 namespace  KSerialization {
              public class DeserializationMapping 
	         {
                public       System.Boolean Deserialize (System.Object obj, IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public DeserializationMapping (KSerialization.DeserializationTemplate in_template, KSerialization.SerializationTemplate out_template)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization {
              public abstract class IOHelper 
	         {
                public static      void WriteKleiString (System.IO.BinaryWriter writer, System.String str)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void WriteSingleFast (System.IO.BinaryWriter writer, System.Single value)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void WriteBoundaryTag (System.IO.BinaryWriter writer, System.Object tag)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CheckBoundaryTag (IReader reader, System.Object expected)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void Assert (System.Boolean condition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Vector2I ReadVector2I (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector2 ReadVector2 (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Vector3 ReadVector3 (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Color ReadColour (IReader reader)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static IOHelper ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  KSerialization.Converters {
              public sealed class StringEnumConverter 
	 			: System.Attribute,System.Runtime.InteropServices._Attribute  
                    {
                     public StringEnumConverter ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Geometry {
              public struct HorizontalEvent 
	         {
                     public HorizontalEvent (System.Single x, Geometry.Strip strip, System.Boolean isStart)  {
                throw new System.NotImplementedException();
            }
                            public  System.Single x;
                                    public  Geometry.Strip strip;
                                    public  System.Boolean isStart;
                }

            }
                 namespace  Geometry {
              public struct VerticalEvent 
	         {
                     public VerticalEvent (System.Single y, System.Boolean isStart, System.Boolean subtract)  {
                throw new System.NotImplementedException();
            }
                            public  System.Single y;
                                    public  System.Boolean isStart;
                                    public  System.Boolean subtract;
                }

            }
                 namespace  Geometry {
              public struct KRect 
	         {
                     public KRect (UnityEngine.Vector2 min, UnityEngine.Vector2 max)  {
                throw new System.NotImplementedException();
            }
                     public KRect (System.Single x0, System.Single y0, System.Single x1, System.Single y1)  {
                throw new System.NotImplementedException();
            }
                            public  UnityEngine.Vector2 min;
                                    public  UnityEngine.Vector2 max;
                }

            }
                 namespace  Geometry {
              public class Strip 
	         {
                     public Strip (System.Single yMin, System.Single yMax, System.Boolean subtract)  {
                throw new System.NotImplementedException();
            }
                            public  System.Single yMin;
                                    public  System.Single yMax;
                                    public  System.Boolean subtract;
                }

            }
                 namespace  Geometry {
              public class RectangleUtil 
	         {
                public static      void Subtract (Geometry.KRect r1, Geometry.KRect r2, System.Collections.Generic.List<Geometry.KRect> result, Geometry.HorizontalEvent[] events, Geometry.Strip[] strips, System.Collections.Generic.List<Geometry.Strip> activeStrips, System.Collections.Generic.List<Geometry.VerticalEvent> verticalEvents)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GenerateActiveRectangles (System.Single x0, System.Single x1, System.Collections.Generic.List<Geometry.KRect> result, System.Collections.Generic.List<Geometry.Strip> activeStrips, System.Collections.Generic.List<Geometry.VerticalEvent> verticalEvents)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RectangleUtil ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public class CSVReader 
	         {
                public static      void DebugOutputGrid (System.String[] grid)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String[] SplitCsvGrid (System.String csvText, System.String csv_name)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String[] SplitCsvLine (System.String line)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public CSVReader ()  {
                throw new System.NotImplementedException();
            }
                     static CSVReader ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public interface IFileDirectory 
	         {
                       System.String GetRoot ()  
                    ;
                           System.Byte[] ReadBytes (System.String filename)  
                    ;
                        /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                           System.String GetID ()  
                    ;
                           System.Boolean FileExists (System.String path)  
                    ;
                           Klei.FileHandle FindFileHandle (System.String filename)  
                    ;
                           System.Boolean IsModded ()  
                    ;
            }

            }
                 namespace  Klei {
              public class ZipFileDirectory 
	 			: Klei.IFileDirectory  
                    {
                public   virtual    System.String GetID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String GetRoot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] ReadBytes (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public   virtual    System.Boolean FileExists (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Klei.FileHandle FindFileHandle (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsModded ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ZipFileDirectory (System.String id, Ionic.Zip.ZipFile zipfile, System.String mount_point, System.Boolean isModded)  {
                throw new System.NotImplementedException();
            }
                     public ZipFileDirectory (System.String id, System.IO.Stream zip_data_stream, System.String mount_point, System.Boolean isModded)  {
                throw new System.NotImplementedException();
            }
         public  System.String MountPoint
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Klei {
              public class AliasDirectory 
	 			: Klei.IFileDirectory  
                    {
                public   virtual    System.String GetID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String GetRoot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] ReadBytes (System.String src_filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public   virtual    System.Boolean FileExists (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Klei.FileHandle FindFileHandle (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsModded ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AliasDirectory (System.String id, System.String actual_location, System.String path_prefix, System.Boolean isModded)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public class RootDirectory 
	 			: Klei.IFileDirectory  
                    {
                public   virtual    System.String GetID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String GetRoot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] ReadBytes (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.String ReadText (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public   virtual    System.Boolean FileExists (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Klei.FileHandle FindFileHandle (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsModded ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public RootDirectory ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public class MemoryFileDirectory 
	 			: Klei.IFileDirectory  
                    {
                public   virtual    System.String GetID ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.String GetRoot ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Byte[] ReadBytes (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Map (System.String filename, System.Byte[] data)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Unmap (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Clear ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public   virtual    System.Boolean FileExists (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    Klei.FileHandle FindFileHandle (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean IsModded ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MemoryFileDirectory (System.String id, System.String mount_point)  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public struct FileHandle 
	         {
                            public  System.String full_path;
                                    public  Klei.IFileDirectory source;
                }

            }
                 namespace  Klei {
              public abstract class FileSystem 
	         {
                public static      void Initialize ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Byte[] ReadBytes (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Klei.FileHandle FindFileHandle (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                    /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                        /*System.TypeLoadException: Inheritance security rules violated while overriding member: 'System.Text.RegularExpressions.Regex.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()
   at System.Reflection.RuntimeMethodInfo.GetParameters()
   at Microsoft.VisualStudio.TextTemplating65C11B85B995BADD53B62005A0E75A3DBDF9863492E8D81155C2467D16398482B13B7DBF1400887E154EDD5CFCEBBEB6D31045044B2AB1B2128D1DA67E6094A0.GeneratedTextTransformation.GenFunction(MethodInfo memberInfo)*/
                    public static      void GetFiles (System.String path, System.String filename_glob_pattern, System.Collections.Generic.ICollection<System.String> result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetFiles (System.String path, System.String filename_glob_pattern, System.Collections.Generic.ICollection<Klei.FileHandle> result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void GetFiles (System.String filename, System.Collections.Generic.ICollection<Klei.FileHandle> result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileExists (System.String path)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void ReadFiles (System.String filename, System.Collections.Generic.ICollection<System.Byte[]> result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsModdedFile (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ConvertToText (System.Byte[] bytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String Normalize (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String CombineAndNormalize (System.String[] paths)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void CheckForCaseSensitiveErrors (System.String filename)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static FileSystem ()  {
                throw new System.NotImplementedException();
            }
                            public static System.Collections.Generic.List<Klei.IFileDirectory> file_sources;
                }

            }
                 namespace  Klei {
              public abstract class FileUtil 
	         {
                public static      void ErrorDialog (Klei.FileUtil.ErrorType errorType, System.String errorSubject, System.String exceptionMessage, System.String exceptionStackTrace)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T DoIOFunc<T> (System.Func<T> io_op, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DoIOAction (System.Action io_op, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void DoIODialog (System.Action io_op, System.String io_subject, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T DoIODialog<T> (System.Func<T> io_op, System.String io_subject, T fail_result, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.IO.FileStream Create (System.String filename, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean CreateDirectory (System.String path, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean DeleteDirectory (System.String path, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean FileExists (System.String filename, System.Int32 retry_count)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static FileUtil ()  {
                throw new System.NotImplementedException();
            }
                            public static Klei.FileUtil.ErrorType errorType;
                                    public static System.String errorSubject;
                                    public static System.String exceptionMessage;
                                    public static System.String exceptionStackTrace;
                     public enum  ErrorType {
                None,
                        UnauthorizedAccess,
                        IOError,
                }
    }

            }
                 namespace  Klei {
              public class GenericGameSettings 
	         {
                public       void SaveSettings ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public GenericGameSettings ()  {
                throw new System.NotImplementedException();
            }
                     static GenericGameSettings ()  {
                throw new System.NotImplementedException();
            }
         public  Klei.GenericGameSettings instance
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean demoMode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean sleepWhenOutOfFocus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 demoTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean showDemoTimer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean debugEnable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean developerDebugEnable
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean disableGameOver
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean disablePopFx
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean autoResumeGame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean disableFogOfWar
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean acceleratedLifecycle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean enableEditorCrashReporting
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean allowInsufficientMaterialBuild
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean keepAllAutosaves
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean takeSaveScreenshots
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean disableAutosave
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean devAutoWorldGen
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 devWorldGenSeed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String devWorldGenCluster
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] devWorldGenSkip
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Klei.GenericGameSettings.PerformanceCapture performanceCapture
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Path
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                                     public  System.Boolean devAutoWorldGenActive;
                     public class PerformanceCapture 
	         {
                     public PerformanceCapture ()  {
                throw new System.NotImplementedException();
            }
         public  System.String saveGame
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Single waitTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean gcStats
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }
}

            }
                 namespace  Klei {
              public class MeshCreator 
	         {
                public static      void MakePlane (UnityEngine.GameObject target, System.Int32 width, System.Int32 height, System.Boolean hide)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MeshCreator ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Klei {
              public abstract class YamlIO 
	         {
                public static      void Save<T> (T some_object, System.String filename, System.Collections.Generic.List<Tuple<System.String, System.Type>> tagMappings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void SaveOrWarnUser<T> (T some_object, System.String filename, System.Collections.Generic.List<Tuple<System.String, System.Type>> tagMappings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T LoadFile<T> (Klei.FileHandle filehandle, Klei.YamlIO.ErrorHandler handle_error, System.Collections.Generic.List<Tuple<System.String, System.Type>> tagMappings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T LoadFile<T> (System.String filename, Klei.YamlIO.ErrorHandler handle_error, System.Collections.Generic.List<Tuple<System.String, System.Type>> tagMappings)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      void LogError (Klei.YamlIO.Error error, System.Boolean force_log_as_warning)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      T Parse<T> (System.String readText, Klei.FileHandle debugFileHandle, Klei.YamlIO.ErrorHandler handle_error, System.Collections.Generic.List<Tuple<System.String, System.Type>> tagMappings)  
        
            {
              throw new System.NotImplementedException();
            }
            
             public struct Error 
	         {
                            public  Klei.FileHandle file;
                                    public  System.String message;
                                    public  System.Exception inner_exception;
                                    public  System.String text;
                                    public  Klei.YamlIO.Error.Severity severity;
                     public enum  Severity {
                Fatal,
                        Recoverable,
                }
    }
    public delegate void ErrorHandler ();
    }

            }
                 namespace  HUSL {
              public class ColorConverter 
	         {
                protected static      System.Collections.Generic.IList<System.Double[]> GetBounds (System.Double L)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double IntersectLineLine (System.Collections.Generic.IList<System.Double> lineA, System.Collections.Generic.IList<System.Double> lineB)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double DistanceFromPole (System.Collections.Generic.IList<System.Double> point)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Boolean LengthOfRayUntilIntersect (System.Double theta, System.Collections.Generic.IList<System.Double> line, out System.Double length)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double MaxSafeChromaForL (System.Double L)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double MaxChromaForLH (System.Double L, System.Double H)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double DotProduct (System.Collections.Generic.IList<System.Double> a, System.Collections.Generic.IList<System.Double> b)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double Round (System.Double value, System.Int32 places)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double FromLinear (System.Double c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double ToLinear (System.Double c)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Collections.Generic.IList<System.Int32> RGBPrepare (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double YToL (System.Double Y)  
        
            {
              throw new System.NotImplementedException();
            }
            
                protected static      System.Double LToY (System.Double L)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> XYZToRGB (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> RGBToXYZ (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> XYZToLUV (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LUVToXYZ (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LUVToLCH (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LCHToLUV (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HUSLToLCH (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LCHToHUSL (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HUSLPToLCH (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LCHToHUSLP (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String RGBToHex (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HexToRGB (System.String hex)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> LCHToRGB (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> RGBToLCH (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HUSLToRGB (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> RGBToHUSL (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HUSLPToRGB (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> RGBToHUSLP (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String HUSLToHex (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String HUSLPToHex (System.Collections.Generic.IList<System.Double> tuple)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HexToHUSL (System.String s)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Collections.Generic.IList<System.Double> HexToHUSLP (System.String s)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Color HUSLToColor (System.Single h, System.Single s, System.Single l)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      UnityEngine.Color HUSLPToColor (System.Single h, System.Single s, System.Single l)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ColorConverter ()  {
                throw new System.NotImplementedException();
            }
                     static ColorConverter ()  {
                throw new System.NotImplementedException();
            }
                            protected static System.Double[][] M;
                                    protected static System.Double[][] MInv;
                                    protected static System.Double RefX;
                                    protected static System.Double RefY;
                                    protected static System.Double RefZ;
                                    protected static System.Double RefU;
                                    protected static System.Double RefV;
                                    protected static System.Double Kappa;
                                    protected static System.Double Epsilon;
                }

            }
                 namespace  Epic.OnlineServices {
              public class Handle 
	 			: System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public      override System.Boolean Equals (System.Object obj)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public      override System.Int32 GetHashCode ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public   virtual    System.Boolean Equals (Epic.OnlineServices.Handle other)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Handle (System.IntPtr innerHandle)  {
                throw new System.NotImplementedException();
            }
         public  System.IntPtr InnerHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices {
              public abstract class Helper 
	         {
                public static      System.Int32 GetAllocationCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.Boolean IsOperationComplete (Epic.OnlineServices.Result result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ToHexString (System.Byte[] byteArray)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     static Helper ()  {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices {
              public abstract class HelperExtensions 
	         {
                public static      System.Boolean IsOperationComplete (Epic.OnlineServices.Result result)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      System.String ToHexString (System.Byte[] byteArray)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Epic.OnlineServices {
              interface ICallbackInfo 
	         {
           System.IntPtr ClientDataAddress
                   
                 {
                                                get;
                                         }
                 }

            }
                 namespace  Epic.OnlineServices {
              interface IInitializable 
	         {
                       void Initialize ()  
                    ;
            }

            }
                 namespace  Epic.OnlineServices {
              public enum  AttributeType {
                Boolean,
                        Int64,
                        Double,
                        String,
                }
    
            }
                 namespace  Epic.OnlineServices {
              public abstract class Common 
	         {
                            public static System.Int32 PagequeryMaxcountMaximum;
                                    public static System.Int32 PagequeryMaxcountDefault;
                                    public static System.Int32 PaginationApiLatest;
                                    public static System.Int32 PagequeryApiLatest;
                                    public static System.UInt64 InvalidNotificationid;
                                    public static System.Int32 ProductuseridMaxLength;
                                    public static System.Int32 EpicaccountidMaxLength;
                }

            }
                 namespace  Epic.OnlineServices {
              public enum  ComparisonOp {
                Equal,
                        Notequal,
                        Greaterthan,
                        Greaterthanorequal,
                        Lessthan,
                        Lessthanorequal,
                        Distance,
                        Anyof,
                        Notanyof,
                        Oneof,
                        Notoneof,
                }
    
            }
                 namespace  Epic.OnlineServices {
              public sealed class ContinuanceToken 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result ToString (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ContinuanceToken (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices {
              public sealed class EpicAccountId 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result ToString (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Epic.OnlineServices.EpicAccountId FromString (System.String accountIdString)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EpicAccountId (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices {
              public enum  ExternalAccountType {
                Epic,
                        Steam,
                        Psn,
                        Xbl,
                        Discord,
                        Gog,
                        Nintendo,
                        Uplay,
                        Openid,
                        Apple,
                }
    
            }
                 namespace  Epic.OnlineServices {
              public enum  LoginStatus {
                NotLoggedIn,
                        UsingLocalProfile,
                        LoggedIn,
                }
    
            }
                 namespace  Epic.OnlineServices {
              public class PageQuery 
	         {
                     public PageQuery ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 StartIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 MaxCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices {
              public class PageResult 
	         {
                     public PageResult ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 StartIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Count
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 TotalCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices {
              public sealed class ProductUserId 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       System.Boolean IsValid ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result ToString (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Epic.OnlineServices.ProductUserId FromString (System.String accountIdString)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ProductUserId (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices {
              public enum  Result {
                Success,
                        NoConnection,
                        InvalidCredentials,
                        InvalidUser,
                        InvalidAuth,
                        AccessDenied,
                        MissingPermissions,
                        TokenNotAccount,
                        TooManyRequests,
                        AlreadyPending,
                        InvalidParameters,
                        InvalidRequest,
                        UnrecognizedResponse,
                        IncompatibleVersion,
                        NotConfigured,
                        AlreadyConfigured,
                        NotImplemented,
                        Canceled,
                        NotFound,
                        OperationWillRetry,
                        NoChange,
                        VersionMismatch,
                        LimitExceeded,
                        Disabled,
                        DuplicateNotAllowed,
                        MissingParametersDEPRECATED,
                        InvalidSandboxId,
                        TimedOut,
                        PartialResult,
                        MissingRole,
                        MissingFeature,
                        InvalidSandbox,
                        InvalidDeployment,
                        InvalidProduct,
                        InvalidProductUserID,
                        ServiceFailure,
                        CacheDirectoryMissing,
                        CacheDirectoryInvalid,
                        InvalidState,
                        RequestInProgress,
                        AuthAccountLocked,
                        AuthAccountLockedForUpdate,
                        AuthInvalidRefreshToken,
                        AuthInvalidToken,
                        AuthAuthenticationFailure,
                        AuthInvalidPlatformToken,
                        AuthWrongAccount,
                        AuthWrongClient,
                        AuthFullAccountRequired,
                        AuthHeadlessAccountRequired,
                        AuthPasswordResetRequired,
                        AuthPasswordCannotBeReused,
                        AuthExpired,
                        AuthScopeConsentRequired,
                        AuthApplicationNotFound,
                        AuthScopeNotFound,
                        AuthAccountFeatureRestricted,
                        AuthPinGrantCode,
                        AuthPinGrantExpired,
                        AuthPinGrantPending,
                        AuthExternalAuthNotLinked,
                        AuthExternalAuthRevoked,
                        AuthExternalAuthInvalid,
                        AuthExternalAuthRestricted,
                        AuthExternalAuthCannotLogin,
                        AuthExternalAuthExpired,
                        AuthExternalAuthIsLastLoginType,
                        AuthExchangeCodeNotFound,
                        AuthOriginatingExchangeCodeSessionExpired,
                        AuthPersistentAuthAccountNotActive,
                        AuthMFARequired,
                        AuthParentalControls,
                        AuthNoRealId,
                        FriendsInviteAwaitingAcceptance,
                        FriendsNoInvitation,
                        FriendsAlreadyFriends,
                        FriendsNotFriends,
                        FriendsTargetUserTooManyInvites,
                        FriendsLocalUserTooManyInvites,
                        FriendsTargetUserFriendLimitExceeded,
                        FriendsLocalUserFriendLimitExceeded,
                        PresenceDataInvalid,
                        PresenceDataLengthInvalid,
                        PresenceDataKeyInvalid,
                        PresenceDataKeyLengthInvalid,
                        PresenceDataValueInvalid,
                        PresenceDataValueLengthInvalid,
                        PresenceRichTextInvalid,
                        PresenceRichTextLengthInvalid,
                        PresenceStatusInvalid,
                        EcomEntitlementStale,
                        EcomCatalogOfferStale,
                        EcomCatalogItemStale,
                        EcomCatalogOfferPriceInvalid,
                        EcomCheckoutLoadError,
                        SessionsSessionInProgress,
                        SessionsTooManyPlayers,
                        SessionsNoPermission,
                        SessionsSessionAlreadyExists,
                        SessionsInvalidLock,
                        SessionsInvalidSession,
                        SessionsSandboxNotAllowed,
                        SessionsInviteFailed,
                        SessionsInviteNotFound,
                        SessionsUpsertNotAllowed,
                        SessionsAggregationFailed,
                        SessionsHostAtCapacity,
                        SessionsSandboxAtCapacity,
                        SessionsSessionNotAnonymous,
                        SessionsOutOfSync,
                        SessionsTooManyInvites,
                        SessionsPresenceSessionExists,
                        SessionsDeploymentAtCapacity,
                        SessionsNotAllowed,
                        PlayerDataStorageFilenameInvalid,
                        PlayerDataStorageFilenameLengthInvalid,
                        PlayerDataStorageFilenameInvalidChars,
                        PlayerDataStorageFileSizeTooLarge,
                        PlayerDataStorageFileSizeInvalid,
                        PlayerDataStorageFileHandleInvalid,
                        PlayerDataStorageDataInvalid,
                        PlayerDataStorageDataLengthInvalid,
                        PlayerDataStorageStartIndexInvalid,
                        PlayerDataStorageRequestInProgress,
                        PlayerDataStorageUserThrottled,
                        PlayerDataStorageEncryptionKeyNotSet,
                        PlayerDataStorageUserErrorFromDataCallback,
                        PlayerDataStorageFileHeaderHasNewerVersion,
                        PlayerDataStorageFileCorrupted,
                        ConnectExternalTokenValidationFailed,
                        ConnectUserAlreadyExists,
                        ConnectAuthExpired,
                        ConnectInvalidToken,
                        ConnectUnsupportedTokenType,
                        ConnectLinkAccountFailed,
                        ConnectExternalServiceUnavailable,
                        ConnectExternalServiceConfigurationFailure,
                        ConnectLinkAccountFailedMissingNintendoIdAccount,
                        SocialOverlayLoadError,
                        LobbyNotOwner,
                        LobbyInvalidLock,
                        LobbyLobbyAlreadyExists,
                        LobbySessionInProgress,
                        LobbyTooManyPlayers,
                        LobbyNoPermission,
                        LobbyInvalidSession,
                        LobbySandboxNotAllowed,
                        LobbyInviteFailed,
                        LobbyInviteNotFound,
                        LobbyUpsertNotAllowed,
                        LobbyAggregationFailed,
                        LobbyHostAtCapacity,
                        LobbySandboxAtCapacity,
                        LobbyTooManyInvites,
                        LobbyDeploymentAtCapacity,
                        LobbyNotAllowed,
                        LobbyMemberUpdateOnly,
                        LobbyPresenceLobbyExists,
                        TitleStorageUserErrorFromDataCallback,
                        TitleStorageEncryptionKeyNotSet,
                        TitleStorageFileCorrupted,
                        TitleStorageFileHeaderHasNewerVersion,
                        UnexpectedError,
                }
    
            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class CopyExternalUserInfoByAccountIdOptions 
	         {
                     public CopyExternalUserInfoByAccountIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class CopyExternalUserInfoByAccountTypeOptions 
	         {
                     public CopyExternalUserInfoByAccountTypeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class CopyExternalUserInfoByIndexOptions 
	         {
                     public CopyExternalUserInfoByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class CopyUserInfoOptions 
	         {
                     public CopyUserInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class ExternalUserInfo 
	         {
                     public ExternalUserInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class GetExternalUserInfoCountOptions 
	         {
                     public GetExternalUserInfoCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
             public delegate void OnQueryUserInfoByDisplayNameCallback ();
    
            }
                 namespace  Epic.OnlineServices.UserInfo {
             public delegate void OnQueryUserInfoByExternalAccountCallback ();
    
            }
                 namespace  Epic.OnlineServices.UserInfo {
             public delegate void OnQueryUserInfoCallback ();
    
            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoByDisplayNameCallbackInfo 
	         {
                     public QueryUserInfoByDisplayNameCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoByDisplayNameOptions 
	         {
                     public QueryUserInfoByDisplayNameOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoByExternalAccountCallbackInfo 
	         {
                     public QueryUserInfoByExternalAccountCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ExternalAccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoByExternalAccountOptions 
	         {
                     public QueryUserInfoByExternalAccountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ExternalAccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoCallbackInfo 
	         {
                     public QueryUserInfoCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class QueryUserInfoOptions 
	         {
                     public QueryUserInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public class UserInfoData 
	         {
                     public UserInfoData ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Country
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String PreferredLanguage
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Nickname
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UserInfo {
              public sealed class UserInfoInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryUserInfo (Epic.OnlineServices.UserInfo.QueryUserInfoOptions options, System.Object clientData, Epic.OnlineServices.UserInfo.OnQueryUserInfoCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryUserInfoByDisplayName (Epic.OnlineServices.UserInfo.QueryUserInfoByDisplayNameOptions options, System.Object clientData, Epic.OnlineServices.UserInfo.OnQueryUserInfoByDisplayNameCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryUserInfoByExternalAccount (Epic.OnlineServices.UserInfo.QueryUserInfoByExternalAccountOptions options, System.Object clientData, Epic.OnlineServices.UserInfo.OnQueryUserInfoByExternalAccountCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyUserInfo (Epic.OnlineServices.UserInfo.CopyUserInfoOptions options, out Epic.OnlineServices.UserInfo.UserInfoData outUserInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetExternalUserInfoCount (Epic.OnlineServices.UserInfo.GetExternalUserInfoCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyExternalUserInfoByIndex (Epic.OnlineServices.UserInfo.CopyExternalUserInfoByIndexOptions options, out Epic.OnlineServices.UserInfo.ExternalUserInfo outExternalUserInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyExternalUserInfoByAccountType (Epic.OnlineServices.UserInfo.CopyExternalUserInfoByAccountTypeOptions options, out Epic.OnlineServices.UserInfo.ExternalUserInfo outExternalUserInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyExternalUserInfoByAccountId (Epic.OnlineServices.UserInfo.CopyExternalUserInfoByAccountIdOptions options, out Epic.OnlineServices.UserInfo.ExternalUserInfo outExternalUserInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UserInfoInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 CopyexternaluserinfobyaccountidApiLatest;
                                    public static System.Int32 CopyexternaluserinfobyaccounttypeApiLatest;
                                    public static System.Int32 CopyexternaluserinfobyindexApiLatest;
                                    public static System.Int32 GetexternaluserinfocountApiLatest;
                                    public static System.Int32 ExternaluserinfoApiLatest;
                                    public static System.Int32 CopyuserinfoApiLatest;
                                    public static System.Int32 MaxDisplaynameUtf8Length;
                                    public static System.Int32 MaxDisplaynameCharacters;
                                    public static System.Int32 QueryuserinfobyexternalaccountApiLatest;
                                    public static System.Int32 QueryuserinfobydisplaynameApiLatest;
                                    public static System.Int32 QueryuserinfoApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.UI {
              public class AcknowledgeEventIdOptions 
	         {
                     public AcknowledgeEventIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Result Result
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class AddNotifyDisplaySettingsUpdatedOptions 
	         {
                     public AddNotifyDisplaySettingsUpdatedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class GetFriendsVisibleOptions 
	         {
                     public GetFriendsVisibleOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class GetToggleFriendsKeyOptions 
	         {
                     public GetToggleFriendsKeyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class HideFriendsCallbackInfo 
	         {
                     public HideFriendsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class HideFriendsOptions 
	         {
                     public HideFriendsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public enum  KeyCombination {
                None,
                        Space,
                        Backspace,
                        Tab,
                        Escape,
                        PageUp,
                        PageDown,
                        End,
                        Home,
                        Insert,
                        Delete,
                        Left,
                        Up,
                        Right,
                        Down,
                        Key0,
                        Key1,
                        ModifierShift,
                        Key2,
                        Key3,
                        Key4,
                        Key5,
                        Key6,
                        Key7,
                        Key8,
                        Key9,
                        KeyA,
                        KeyB,
                        KeyC,
                        KeyD,
                        KeyE,
                        KeyF,
                        KeyG,
                        KeyH,
                        KeyI,
                        KeyJ,
                        KeyK,
                        KeyL,
                        KeyM,
                        KeyN,
                        KeyO,
                        KeyP,
                        KeyQ,
                        KeyR,
                        KeyS,
                        KeyT,
                        KeyU,
                        KeyV,
                        KeyW,
                        KeyX,
                        KeyY,
                        KeyZ,
                        Numpad0,
                        Numpad1,
                        Numpad2,
                        Numpad3,
                        Numpad4,
                        Numpad5,
                        Numpad6,
                        Numpad7,
                        Numpad8,
                        Numpad9,
                        NumpadAsterisk,
                        NumpadPlus,
                        NumpadMinus,
                        NumpadPeriod,
                        NumpadDivide,
                        F1,
                        F2,
                        F3,
                        F4,
                        F5,
                        F6,
                        F7,
                        F8,
                        F9,
                        F10,
                        F11,
                        F12,
                        F13,
                        F14,
                        F15,
                        F16,
                        F17,
                        F18,
                        F19,
                        F20,
                        F21,
                        F22,
                        F23,
                        F24,
                        OemPlus,
                        OemComma,
                        OemMinus,
                        OemPeriod,
                        Oem1,
                        Oem2,
                        Oem3,
                        Oem4,
                        Oem5,
                        Oem6,
                        Oem7,
                        Oem8,
                        MaxKeyType,
                        KeyTypeMask,
                        Shift,
                        Control,
                        Alt,
                        Meta,
                        ValidModifierMask,
                        ModifierMask,
                }
    
            }
                 namespace  Epic.OnlineServices.UI {
              public enum  NotificationLocation {
                TopLeft,
                        TopRight,
                        BottomLeft,
                        BottomRight,
                }
    
            }
                 namespace  Epic.OnlineServices.UI {
             public delegate void OnDisplaySettingsUpdatedCallback ();
    
            }
                 namespace  Epic.OnlineServices.UI {
              public class OnDisplaySettingsUpdatedCallbackInfo 
	         {
                     public OnDisplaySettingsUpdatedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsVisible
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsExclusiveInput
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
             public delegate void OnHideFriendsCallback ();
    
            }
                 namespace  Epic.OnlineServices.UI {
             public delegate void OnShowFriendsCallback ();
    
            }
                 namespace  Epic.OnlineServices.UI {
              public class SetDisplayPreferenceOptions 
	         {
                     public SetDisplayPreferenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.UI.NotificationLocation NotificationLocation
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class SetToggleFriendsKeyOptions 
	         {
                     public SetToggleFriendsKeyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.UI.KeyCombination KeyCombination
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class ShowFriendsCallbackInfo 
	         {
                     public ShowFriendsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public class ShowFriendsOptions 
	         {
                     public ShowFriendsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.UI {
              public sealed class UIInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void ShowFriends (Epic.OnlineServices.UI.ShowFriendsOptions options, System.Object clientData, Epic.OnlineServices.UI.OnShowFriendsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void HideFriends (Epic.OnlineServices.UI.HideFriendsOptions options, System.Object clientData, Epic.OnlineServices.UI.OnHideFriendsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean GetFriendsVisible (Epic.OnlineServices.UI.GetFriendsVisibleOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyDisplaySettingsUpdated (Epic.OnlineServices.UI.AddNotifyDisplaySettingsUpdatedOptions options, System.Object clientData, Epic.OnlineServices.UI.OnDisplaySettingsUpdatedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyDisplaySettingsUpdated (System.UInt64 id)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetToggleFriendsKey (Epic.OnlineServices.UI.SetToggleFriendsKeyOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.UI.KeyCombination GetToggleFriendsKey (Epic.OnlineServices.UI.GetToggleFriendsKeyOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean IsValidKeyCombination (Epic.OnlineServices.UI.KeyCombination keyCombination)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetDisplayPreference (Epic.OnlineServices.UI.SetDisplayPreferenceOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.UI.NotificationLocation GetNotificationLocationPreference ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result AcknowledgeEventId (Epic.OnlineServices.UI.AcknowledgeEventIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public UIInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 AcknowledgecorrelationidApiLatest;
                                    public static System.Int32 AcknowledgeeventidApiLatest;
                                    public static System.Int32 SetdisplaypreferenceApiLatest;
                                    public static System.Int32 GettogglefriendskeyApiLatest;
                                    public static System.Int32 SettogglefriendskeyApiLatest;
                                    public static System.Int32 AddnotifydisplaysettingsupdatedApiLatest;
                                    public static System.Int32 GetfriendsvisibleApiLatest;
                                    public static System.Int32 HidefriendsApiLatest;
                                    public static System.Int32 ShowfriendsApiLatest;
                                    public static System.Int32 EventidInvalid;
                }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class CopyFileMetadataAtIndexOptions 
	         {
                     public CopyFileMetadataAtIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class CopyFileMetadataByFilenameOptions 
	         {
                     public CopyFileMetadataByFilenameOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class DeleteCacheCallbackInfo 
	         {
                     public DeleteCacheCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class DeleteCacheOptions 
	         {
                     public DeleteCacheOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class FileMetadata 
	         {
                     public FileMetadata ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 FileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String MD5Hash
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class FileTransferProgressCallbackInfo 
	         {
                     public FileTransferProgressCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 BytesTransferred
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TotalFileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class GetFileMetadataCountOptions 
	         {
                     public GetFileMetadataCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnDeleteCacheCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnFileTransferProgressCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnQueryFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnQueryFileListCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnReadFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
             public delegate void OnReadFileDataCallback ();
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class QueryFileCallbackInfo 
	         {
                     public QueryFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class QueryFileListCallbackInfo 
	         {
                     public QueryFileListCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 FileCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class QueryFileListOptions 
	         {
                     public QueryFileListOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] ListOfTags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class QueryFileOptions 
	         {
                     public QueryFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class ReadFileCallbackInfo 
	         {
                     public ReadFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class ReadFileDataCallbackInfo 
	         {
                     public ReadFileDataCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TotalFileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsLastChunk
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte[] DataChunk
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public class ReadFileOptions 
	         {
                     public ReadFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ReadChunkLengthBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.TitleStorage.OnReadFileDataCallback ReadFileDataCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.TitleStorage.OnFileTransferProgressCallback FileTransferProgressCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public enum  ReadResult {
                RrContinuereading,
                        RrFailrequest,
                        RrCancelrequest,
                }
    
            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public sealed class TitleStorageFileTransferRequest 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result GetFileRequestState ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetFilename (System.UInt32 filenameStringBufferSizeBytes, System.Text.StringBuilder outStringBuffer, out System.Int32 outStringLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CancelRequest ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TitleStorageFileTransferRequest (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.TitleStorage {
              public sealed class TitleStorageInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryFile (Epic.OnlineServices.TitleStorage.QueryFileOptions options, System.Object clientData, Epic.OnlineServices.TitleStorage.OnQueryFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryFileList (Epic.OnlineServices.TitleStorage.QueryFileListOptions options, System.Object clientData, Epic.OnlineServices.TitleStorage.OnQueryFileListCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyFileMetadataByFilename (Epic.OnlineServices.TitleStorage.CopyFileMetadataByFilenameOptions options, out Epic.OnlineServices.TitleStorage.FileMetadata outMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetFileMetadataCount (Epic.OnlineServices.TitleStorage.GetFileMetadataCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyFileMetadataAtIndex (Epic.OnlineServices.TitleStorage.CopyFileMetadataAtIndexOptions options, out Epic.OnlineServices.TitleStorage.FileMetadata outMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.TitleStorage.TitleStorageFileTransferRequest ReadFile (Epic.OnlineServices.TitleStorage.ReadFileOptions options, System.Object clientData, Epic.OnlineServices.TitleStorage.OnReadFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result DeleteCache (Epic.OnlineServices.TitleStorage.DeleteCacheOptions options, System.Object clientData, Epic.OnlineServices.TitleStorage.OnDeleteCacheCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public TitleStorageInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 DeletecacheoptionsApiLatest;
                                    public static System.Int32 ReadfileoptionsApiLatest;
                                    public static System.Int32 CopyfilemetadatabyfilenameoptionsApiLatest;
                                    public static System.Int32 CopyfilemetadataatindexoptionsApiLatest;
                                    public static System.Int32 GetfilemetadatacountoptionsApiLatest;
                                    public static System.Int32 QueryfilelistoptionsApiLatest;
                                    public static System.Int32 QueryfileoptionsApiLatest;
                                    public static System.Int32 FilemetadataApiLatest;
                                    public static System.Int32 FilenameMaxLengthBytes;
                }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class CopyStatByIndexOptions 
	         {
                     public CopyStatByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 StatIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class CopyStatByNameOptions 
	         {
                     public CopyStatByNameOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class GetStatCountOptions 
	         {
                     public GetStatCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class IngestData 
	         {
                     public IngestData ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 IngestAmount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class IngestStatCompleteCallbackInfo 
	         {
                     public IngestStatCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class IngestStatOptions 
	         {
                     public IngestStatOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Stats.IngestData[] Stats
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
             public delegate void OnIngestStatCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Stats {
             public delegate void OnQueryStatsCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Stats {
              public class OnQueryStatsCompleteCallbackInfo 
	         {
                     public OnQueryStatsCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class QueryStatsOptions 
	         {
                     public QueryStatsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> StartTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> EndTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] StatNames
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public class Stat 
	         {
                     public Stat ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> StartTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> EndTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Stats {
              public sealed class StatsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void IngestStat (Epic.OnlineServices.Stats.IngestStatOptions options, System.Object clientData, Epic.OnlineServices.Stats.OnIngestStatCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryStats (Epic.OnlineServices.Stats.QueryStatsOptions options, System.Object clientData, Epic.OnlineServices.Stats.OnQueryStatsCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetStatsCount (Epic.OnlineServices.Stats.GetStatCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyStatByIndex (Epic.OnlineServices.Stats.CopyStatByIndexOptions options, out Epic.OnlineServices.Stats.Stat outStat)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyStatByName (Epic.OnlineServices.Stats.CopyStatByNameOptions options, out Epic.OnlineServices.Stats.Stat outStat)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public StatsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 CopystatbynameApiLatest;
                                    public static System.Int32 CopystatbyindexApiLatest;
                                    public static System.Int32 GetstatcountApiLatest;
                                    public static System.Int32 GetstatscountApiLatest;
                                    public static System.Int32 StatApiLatest;
                                    public static System.Int32 TimeUndefined;
                                    public static System.Int32 QuerystatsApiLatest;
                                    public static System.Int32 MaxQueryStats;
                                    public static System.Int32 IngeststatApiLatest;
                                    public static System.Int32 MaxIngestStats;
                                    public static System.Int32 IngestdataApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public sealed class ActiveSession 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result CopyInfo (Epic.OnlineServices.Sessions.ActiveSessionCopyInfoOptions options, out Epic.OnlineServices.Sessions.ActiveSessionInfo outActiveSessionInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetRegisteredPlayerCount (Epic.OnlineServices.Sessions.ActiveSessionGetRegisteredPlayerCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.ProductUserId GetRegisteredPlayerByIndex (Epic.OnlineServices.Sessions.ActiveSessionGetRegisteredPlayerByIndexOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ActiveSession (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class ActiveSessionCopyInfoOptions 
	         {
                     public ActiveSessionCopyInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class ActiveSessionGetRegisteredPlayerByIndexOptions 
	         {
                     public ActiveSessionGetRegisteredPlayerByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 PlayerIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class ActiveSessionGetRegisteredPlayerCountOptions 
	         {
                     public ActiveSessionGetRegisteredPlayerCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class ActiveSessionInfo 
	         {
                     public ActiveSessionInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.OnlineSessionState State
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionDetailsInfo SessionDetails
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class AddNotifyJoinSessionAcceptedOptions 
	         {
                     public AddNotifyJoinSessionAcceptedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class AddNotifySessionInviteAcceptedOptions 
	         {
                     public AddNotifySessionInviteAcceptedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class AddNotifySessionInviteReceivedOptions 
	         {
                     public AddNotifySessionInviteReceivedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class AttributeData 
	         {
                     public AttributeData ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.AttributeDataValue Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class AttributeDataValue 
	         {
                     public AttributeDataValue ()  {
                throw new System.NotImplementedException();
            }
         public  System.Nullable<System.Int64> AsInt64
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Double> AsDouble
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Boolean> AsBool
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AsUtf8
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.AttributeType ValueType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CopyActiveSessionHandleOptions 
	         {
                     public CopyActiveSessionHandleOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CopySessionHandleByInviteIdOptions 
	         {
                     public CopySessionHandleByInviteIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CopySessionHandleByUiEventIdOptions 
	         {
                     public CopySessionHandleByUiEventIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CopySessionHandleForPresenceOptions 
	         {
                     public CopySessionHandleForPresenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CreateSessionModificationOptions 
	         {
                     public CreateSessionModificationOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String BucketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 MaxPlayers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean PresenceEnabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class CreateSessionSearchOptions 
	         {
                     public CreateSessionSearchOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxSearchResults
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class DestroySessionCallbackInfo 
	         {
                     public DestroySessionCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class DestroySessionOptions 
	         {
                     public DestroySessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class DumpSessionStateOptions 
	         {
                     public DumpSessionStateOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class EndSessionCallbackInfo 
	         {
                     public EndSessionCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class EndSessionOptions 
	         {
                     public EndSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class GetInviteCountOptions 
	         {
                     public GetInviteCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class GetInviteIdByIndexOptions 
	         {
                     public GetInviteIdByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class IsUserInSessionOptions 
	         {
                     public IsUserInSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class JoinSessionAcceptedCallbackInfo 
	         {
                     public JoinSessionAcceptedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class JoinSessionCallbackInfo 
	         {
                     public JoinSessionCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class JoinSessionOptions 
	         {
                     public JoinSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionDetails SessionHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean PresenceEnabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnDestroySessionCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnEndSessionCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnJoinSessionAcceptedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnJoinSessionCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnQueryInvitesCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnRegisterPlayersCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnRejectInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnSendInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnSessionInviteAcceptedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnSessionInviteReceivedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnStartSessionCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnUnregisterPlayersCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void OnUpdateSessionCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
              public enum  OnlineSessionPermissionLevel {
                PublicAdvertised,
                        JoinViaPresence,
                        InviteOnly,
                }
    
            }
                 namespace  Epic.OnlineServices.Sessions {
              public enum  OnlineSessionState {
                NoSession,
                        Creating,
                        Pending,
                        Starting,
                        InProgress,
                        Ending,
                        Ended,
                        Destroying,
                }
    
            }
                 namespace  Epic.OnlineServices.Sessions {
              public class QueryInvitesCallbackInfo 
	         {
                     public QueryInvitesCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class QueryInvitesOptions 
	         {
                     public QueryInvitesOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class RegisterPlayersCallbackInfo 
	         {
                     public RegisterPlayersCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class RegisterPlayersOptions 
	         {
                     public RegisterPlayersOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId[] PlayersToRegister
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class RejectInviteCallbackInfo 
	         {
                     public RejectInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class RejectInviteOptions 
	         {
                     public RejectInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SendInviteCallbackInfo 
	         {
                     public SendInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SendInviteOptions 
	         {
                     public SendInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public enum  SessionAttributeAdvertisementType {
                DontAdvertise,
                        Advertise,
                }
    
            }
                 namespace  Epic.OnlineServices.Sessions {
              public sealed class SessionDetails 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result CopyInfo (Epic.OnlineServices.Sessions.SessionDetailsCopyInfoOptions options, out Epic.OnlineServices.Sessions.SessionDetailsInfo outSessionInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetSessionAttributeCount (Epic.OnlineServices.Sessions.SessionDetailsGetSessionAttributeCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySessionAttributeByIndex (Epic.OnlineServices.Sessions.SessionDetailsCopySessionAttributeByIndexOptions options, out Epic.OnlineServices.Sessions.SessionDetailsAttribute outSessionAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySessionAttributeByKey (Epic.OnlineServices.Sessions.SessionDetailsCopySessionAttributeByKeyOptions options, out Epic.OnlineServices.Sessions.SessionDetailsAttribute outSessionAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SessionDetails (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsAttribute 
	         {
                     public SessionDetailsAttribute ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Sessions.AttributeData Data
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionAttributeAdvertisementType AdvertisementType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsCopyInfoOptions 
	         {
                     public SessionDetailsCopyInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsCopySessionAttributeByIndexOptions 
	         {
                     public SessionDetailsCopySessionAttributeByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 AttrIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsCopySessionAttributeByKeyOptions 
	         {
                     public SessionDetailsCopySessionAttributeByKeyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AttrKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsGetSessionAttributeCountOptions 
	         {
                     public SessionDetailsGetSessionAttributeCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsInfo 
	         {
                     public SessionDetailsInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String HostAddress
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 NumOpenPublicConnections
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionDetailsSettings Settings
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionDetailsSettings 
	         {
                     public SessionDetailsSettings ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String BucketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 NumPublicConnections
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean AllowJoinInProgress
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.OnlineSessionPermissionLevel PermissionLevel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean InvitesAllowed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionInviteAcceptedCallbackInfo 
	         {
                     public SessionInviteAcceptedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionInviteReceivedCallbackInfo 
	         {
                     public SessionInviteReceivedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public sealed class SessionModification 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result SetBucketId (Epic.OnlineServices.Sessions.SessionModificationSetBucketIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetHostAddress (Epic.OnlineServices.Sessions.SessionModificationSetHostAddressOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetPermissionLevel (Epic.OnlineServices.Sessions.SessionModificationSetPermissionLevelOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetJoinInProgressAllowed (Epic.OnlineServices.Sessions.SessionModificationSetJoinInProgressAllowedOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetMaxPlayers (Epic.OnlineServices.Sessions.SessionModificationSetMaxPlayersOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetInvitesAllowed (Epic.OnlineServices.Sessions.SessionModificationSetInvitesAllowedOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result AddAttribute (Epic.OnlineServices.Sessions.SessionModificationAddAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result RemoveAttribute (Epic.OnlineServices.Sessions.SessionModificationRemoveAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SessionModification (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationAddAttributeOptions 
	         {
                     public SessionModificationAddAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Sessions.AttributeData SessionAttribute
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionAttributeAdvertisementType AdvertisementType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationRemoveAttributeOptions 
	         {
                     public SessionModificationRemoveAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetBucketIdOptions 
	         {
                     public SessionModificationSetBucketIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String BucketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetHostAddressOptions 
	         {
                     public SessionModificationSetHostAddressOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String HostAddress
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetInvitesAllowedOptions 
	         {
                     public SessionModificationSetInvitesAllowedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean InvitesAllowed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetJoinInProgressAllowedOptions 
	         {
                     public SessionModificationSetJoinInProgressAllowedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Boolean AllowJoinInProgress
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetMaxPlayersOptions 
	         {
                     public SessionModificationSetMaxPlayersOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxPlayers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionModificationSetPermissionLevelOptions 
	         {
                     public SessionModificationSetPermissionLevelOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Sessions.OnlineSessionPermissionLevel PermissionLevel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public sealed class SessionSearch 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result SetSessionId (Epic.OnlineServices.Sessions.SessionSearchSetSessionIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetTargetUserId (Epic.OnlineServices.Sessions.SessionSearchSetTargetUserIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetParameter (Epic.OnlineServices.Sessions.SessionSearchSetParameterOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result RemoveParameter (Epic.OnlineServices.Sessions.SessionSearchRemoveParameterOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetMaxResults (Epic.OnlineServices.Sessions.SessionSearchSetMaxResultsOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Find (Epic.OnlineServices.Sessions.SessionSearchFindOptions options, System.Object clientData, Epic.OnlineServices.Sessions.SessionSearchOnFindCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetSearchResultCount (Epic.OnlineServices.Sessions.SessionSearchGetSearchResultCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySearchResultByIndex (Epic.OnlineServices.Sessions.SessionSearchCopySearchResultByIndexOptions options, out Epic.OnlineServices.Sessions.SessionDetails outSessionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SessionSearch (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchCopySearchResultByIndexOptions 
	         {
                     public SessionSearchCopySearchResultByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 SessionIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchFindCallbackInfo 
	         {
                     public SessionSearchFindCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchFindOptions 
	         {
                     public SessionSearchFindOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchGetSearchResultCountOptions 
	         {
                     public SessionSearchGetSearchResultCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
             public delegate void SessionSearchOnFindCallback ();
    
            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchRemoveParameterOptions 
	         {
                     public SessionSearchRemoveParameterOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ComparisonOp ComparisonOp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchSetMaxResultsOptions 
	         {
                     public SessionSearchSetMaxResultsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxSearchResults
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchSetParameterOptions 
	         {
                     public SessionSearchSetParameterOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Sessions.AttributeData Parameter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ComparisonOp ComparisonOp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchSetSessionIdOptions 
	         {
                     public SessionSearchSetSessionIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class SessionSearchSetTargetUserIdOptions 
	         {
                     public SessionSearchSetTargetUserIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public sealed class SessionsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result CreateSessionModification (Epic.OnlineServices.Sessions.CreateSessionModificationOptions options, out Epic.OnlineServices.Sessions.SessionModification outSessionModificationHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result UpdateSessionModification (Epic.OnlineServices.Sessions.UpdateSessionModificationOptions options, out Epic.OnlineServices.Sessions.SessionModification outSessionModificationHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateSession (Epic.OnlineServices.Sessions.UpdateSessionOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnUpdateSessionCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DestroySession (Epic.OnlineServices.Sessions.DestroySessionOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnDestroySessionCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void JoinSession (Epic.OnlineServices.Sessions.JoinSessionOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnJoinSessionCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void StartSession (Epic.OnlineServices.Sessions.StartSessionOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnStartSessionCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void EndSession (Epic.OnlineServices.Sessions.EndSessionOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnEndSessionCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RegisterPlayers (Epic.OnlineServices.Sessions.RegisterPlayersOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnRegisterPlayersCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnregisterPlayers (Epic.OnlineServices.Sessions.UnregisterPlayersOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnUnregisterPlayersCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SendInvite (Epic.OnlineServices.Sessions.SendInviteOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnSendInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RejectInvite (Epic.OnlineServices.Sessions.RejectInviteOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnRejectInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryInvites (Epic.OnlineServices.Sessions.QueryInvitesOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnQueryInvitesCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetInviteCount (Epic.OnlineServices.Sessions.GetInviteCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetInviteIdByIndex (Epic.OnlineServices.Sessions.GetInviteIdByIndexOptions options, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CreateSessionSearch (Epic.OnlineServices.Sessions.CreateSessionSearchOptions options, out Epic.OnlineServices.Sessions.SessionSearch outSessionSearchHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyActiveSessionHandle (Epic.OnlineServices.Sessions.CopyActiveSessionHandleOptions options, out Epic.OnlineServices.Sessions.ActiveSession outSessionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifySessionInviteReceived (Epic.OnlineServices.Sessions.AddNotifySessionInviteReceivedOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnSessionInviteReceivedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifySessionInviteReceived (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifySessionInviteAccepted (Epic.OnlineServices.Sessions.AddNotifySessionInviteAcceptedOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnSessionInviteAcceptedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifySessionInviteAccepted (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyJoinSessionAccepted (Epic.OnlineServices.Sessions.AddNotifyJoinSessionAcceptedOptions options, System.Object clientData, Epic.OnlineServices.Sessions.OnJoinSessionAcceptedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyJoinSessionAccepted (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySessionHandleByInviteId (Epic.OnlineServices.Sessions.CopySessionHandleByInviteIdOptions options, out Epic.OnlineServices.Sessions.SessionDetails outSessionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySessionHandleByUiEventId (Epic.OnlineServices.Sessions.CopySessionHandleByUiEventIdOptions options, out Epic.OnlineServices.Sessions.SessionDetails outSessionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySessionHandleForPresence (Epic.OnlineServices.Sessions.CopySessionHandleForPresenceOptions options, out Epic.OnlineServices.Sessions.SessionDetails outSessionHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result IsUserInSession (Epic.OnlineServices.Sessions.IsUserInSessionOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result DumpSessionState (Epic.OnlineServices.Sessions.DumpSessionStateOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public SessionsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 DumpsessionstateApiLatest;
                                    public static System.Int32 IsuserinsessionApiLatest;
                                    public static System.Int32 CopysessionhandleforpresenceApiLatest;
                                    public static System.Int32 CopysessionhandlebyuieventidApiLatest;
                                    public static System.Int32 CopysessionhandlebyinviteidApiLatest;
                                    public static System.Int32 AddnotifyjoinsessionacceptedApiLatest;
                                    public static System.Int32 AddnotifysessioninviteacceptedApiLatest;
                                    public static System.Int32 AddnotifysessioninvitereceivedApiLatest;
                                    public static System.Int32 CopyactivesessionhandleApiLatest;
                                    public static System.Int32 ActivesessionInfoApiLatest;
                                    public static System.Int32 SessiondetailsCopysessionattributebykeyApiLatest;
                                    public static System.Int32 SessiondetailsCopysessionattributebyindexApiLatest;
                                    public static System.Int32 SessiondetailsGetsessionattributecountApiLatest;
                                    public static System.Int32 SessiondetailsCopyinfoApiLatest;
                                    public static System.Int32 SessiondetailsInfoApiLatest;
                                    public static System.Int32 SessiondetailsSettingsApiLatest;
                                    public static System.Int32 SessionsearchRemoveparameterApiLatest;
                                    public static System.Int32 SessionsearchSetparameterApiLatest;
                                    public static System.Int32 SessionsearchSettargetuseridApiLatest;
                                    public static System.Int32 SessionsearchSetsessionidApiLatest;
                                    public static System.Int32 SessionsearchCopysearchresultbyindexApiLatest;
                                    public static System.Int32 SessionsearchGetsearchresultcountApiLatest;
                                    public static System.Int32 SessionsearchFindApiLatest;
                                    public static System.Int32 SessionsearchSetmaxsearchresultsApiLatest;
                                    public static System.Int32 MaxSearchResults;
                                    public static System.Int32 SessionmodificationRemoveattributeApiLatest;
                                    public static System.Int32 SessionmodificationAddattributeApiLatest;
                                    public static System.Int32 SessionattributeApiLatest;
                                    public static System.Int32 SessiondetailsAttributeApiLatest;
                                    public static System.Int32 ActivesessionGetregisteredplayerbyindexApiLatest;
                                    public static System.Int32 ActivesessionGetregisteredplayercountApiLatest;
                                    public static System.Int32 ActivesessionCopyinfoApiLatest;
                                    public static System.Int32 SessionattributedataApiLatest;
                                    public static System.Int32 AttributedataApiLatest;
                                    public static System.String SearchMinslotsavailable;
                                    public static System.String SearchNonemptyServersOnly;
                                    public static System.String SearchEmptyServersOnly;
                                    public static System.String SearchBucketId;
                                    public static System.Int32 SessionmodificationSetinvitesallowedApiLatest;
                                    public static System.Int32 SessionmodificationSetmaxplayersApiLatest;
                                    public static System.Int32 Maxregisteredplayers;
                                    public static System.Int32 SessionmodificationSetjoininprogressallowedApiLatest;
                                    public static System.Int32 SessionmodificationSetpermissionlevelApiLatest;
                                    public static System.Int32 SessionmodificationSethostaddressApiLatest;
                                    public static System.Int32 SessionmodificationSetbucketidApiLatest;
                                    public static System.Int32 UnregisterplayersApiLatest;
                                    public static System.Int32 RegisterplayersApiLatest;
                                    public static System.Int32 EndsessionApiLatest;
                                    public static System.Int32 StartsessionApiLatest;
                                    public static System.Int32 JoinsessionApiLatest;
                                    public static System.Int32 DestroysessionApiLatest;
                                    public static System.Int32 UpdatesessionApiLatest;
                                    public static System.Int32 CreatesessionsearchApiLatest;
                                    public static System.Int32 GetinviteidbyindexApiLatest;
                                    public static System.Int32 GetinvitecountApiLatest;
                                    public static System.Int32 QueryinvitesApiLatest;
                                    public static System.Int32 RejectinviteApiLatest;
                                    public static System.Int32 SendinviteApiLatest;
                                    public static System.Int32 InviteidMaxLength;
                                    public static System.Int32 UpdatesessionmodificationApiLatest;
                                    public static System.Int32 CreatesessionmodificationApiLatest;
                                    public static System.Int32 SessionmodificationMaxSessionidoverrideLength;
                                    public static System.Int32 SessionmodificationMinSessionidoverrideLength;
                                    public static System.Int32 SessionmodificationMaxSessionAttributeLength;
                                    public static System.Int32 SessionmodificationMaxSessionAttributes;
                }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class StartSessionCallbackInfo 
	         {
                     public StartSessionCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class StartSessionOptions 
	         {
                     public StartSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class UnregisterPlayersCallbackInfo 
	         {
                     public UnregisterPlayersCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class UnregisterPlayersOptions 
	         {
                     public UnregisterPlayersOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId[] PlayersToUnregister
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class UpdateSessionCallbackInfo 
	         {
                     public UpdateSessionCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class UpdateSessionModificationOptions 
	         {
                     public UpdateSessionModificationOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SessionName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Sessions {
              public class UpdateSessionOptions 
	         {
                     public UpdateSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Sessions.SessionModification SessionModificationHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class AddNotifyJoinGameAcceptedOptions 
	         {
                     public AddNotifyJoinGameAcceptedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class AddNotifyOnPresenceChangedOptions 
	         {
                     public AddNotifyOnPresenceChangedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class CopyPresenceOptions 
	         {
                     public CopyPresenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class CreatePresenceModificationOptions 
	         {
                     public CreatePresenceModificationOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class DataRecord 
	         {
                     public DataRecord ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class GetJoinInfoOptions 
	         {
                     public GetJoinInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class HasPresenceOptions 
	         {
                     public HasPresenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class Info 
	         {
                     public Info ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Presence.Status Status
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Platform
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String RichText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Presence.DataRecord[] Records
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class JoinGameAcceptedCallbackInfo 
	         {
                     public JoinGameAcceptedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String JoinInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
             public delegate void OnJoinGameAcceptedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Presence {
             public delegate void OnPresenceChangedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Presence {
             public delegate void OnQueryPresenceCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceChangedCallbackInfo 
	         {
                     public PresenceChangedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId PresenceUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public sealed class PresenceInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryPresence (Epic.OnlineServices.Presence.QueryPresenceOptions options, System.Object clientData, Epic.OnlineServices.Presence.OnQueryPresenceCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Boolean HasPresence (Epic.OnlineServices.Presence.HasPresenceOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyPresence (Epic.OnlineServices.Presence.CopyPresenceOptions options, out Epic.OnlineServices.Presence.Info outPresence)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CreatePresenceModification (Epic.OnlineServices.Presence.CreatePresenceModificationOptions options, out Epic.OnlineServices.Presence.PresenceModification outPresenceModificationHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SetPresence (Epic.OnlineServices.Presence.SetPresenceOptions options, System.Object clientData, Epic.OnlineServices.Presence.SetPresenceCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyOnPresenceChanged (Epic.OnlineServices.Presence.AddNotifyOnPresenceChangedOptions options, System.Object clientData, Epic.OnlineServices.Presence.OnPresenceChangedCallback notificationHandler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyOnPresenceChanged (System.UInt64 notificationId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyJoinGameAccepted (Epic.OnlineServices.Presence.AddNotifyJoinGameAcceptedOptions options, System.Object clientData, Epic.OnlineServices.Presence.OnJoinGameAcceptedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyJoinGameAccepted (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetJoinInfo (Epic.OnlineServices.Presence.GetJoinInfoOptions options, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PresenceInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 DeletedataApiLatest;
                                    public static System.Int32 PresencemodificationDeletedataApiLatest;
                                    public static System.Int32 PresencemodificationDatarecordidApiLatest;
                                    public static System.Int32 SetdataApiLatest;
                                    public static System.Int32 PresencemodificationSetdataApiLatest;
                                    public static System.Int32 SetrawrichtextApiLatest;
                                    public static System.Int32 PresencemodificationSetrawrichtextApiLatest;
                                    public static System.Int32 SetstatusApiLatest;
                                    public static System.Int32 PresencemodificationSetstatusApiLatest;
                                    public static System.Int32 RichTextMaxValueLength;
                                    public static System.Int32 DataMaxValueLength;
                                    public static System.Int32 DataMaxKeyLength;
                                    public static System.Int32 DataMaxKeys;
                                    public static System.Int32 PresencemodificationSetjoininfoApiLatest;
                                    public static System.Int32 PresencemodificationJoininfoMaxLength;
                                    public static System.Int32 GetjoininfoApiLatest;
                                    public static System.Int32 AddnotifyjoingameacceptedApiLatest;
                                    public static System.Int32 AddnotifyonpresencechangedApiLatest;
                                    public static System.Int32 SetpresenceApiLatest;
                                    public static System.Int32 CreatepresencemodificationApiLatest;
                                    public static System.Int32 CopypresenceApiLatest;
                                    public static System.Int32 HaspresenceApiLatest;
                                    public static System.Int32 QuerypresenceApiLatest;
                                    public static System.Int32 InfoApiLatest;
                                    public static System.Int32 DatarecordApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Presence {
              public sealed class PresenceModification 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result SetStatus (Epic.OnlineServices.Presence.PresenceModificationSetStatusOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetRawRichText (Epic.OnlineServices.Presence.PresenceModificationSetRawRichTextOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetData (Epic.OnlineServices.Presence.PresenceModificationSetDataOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result DeleteData (Epic.OnlineServices.Presence.PresenceModificationDeleteDataOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetJoinInfo (Epic.OnlineServices.Presence.PresenceModificationSetJoinInfoOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PresenceModification (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationDataRecordId 
	         {
                     public PresenceModificationDataRecordId ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationDeleteDataOptions 
	         {
                     public PresenceModificationDeleteDataOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Presence.PresenceModificationDataRecordId[] Records
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationSetDataOptions 
	         {
                     public PresenceModificationSetDataOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Presence.DataRecord[] Records
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationSetJoinInfoOptions 
	         {
                     public PresenceModificationSetJoinInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String JoinInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationSetRawRichTextOptions 
	         {
                     public PresenceModificationSetRawRichTextOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String RichText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class PresenceModificationSetStatusOptions 
	         {
                     public PresenceModificationSetStatusOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Presence.Status Status
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class QueryPresenceCallbackInfo 
	         {
                     public QueryPresenceCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class QueryPresenceOptions 
	         {
                     public QueryPresenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public class SetPresenceCallbackInfo 
	         {
                     public SetPresenceCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
             public delegate void SetPresenceCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Presence {
              public class SetPresenceOptions 
	         {
                     public SetPresenceOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Presence.PresenceModification PresenceModificationHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Presence {
              public enum  Status {
                Offline,
                        Online,
                        Away,
                        ExtendedAway,
                        DoNotDisturb,
                }
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class CopyFileMetadataAtIndexOptions 
	         {
                     public CopyFileMetadataAtIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class CopyFileMetadataByFilenameOptions 
	         {
                     public CopyFileMetadataByFilenameOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class DeleteFileCallbackInfo 
	         {
                     public DeleteFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class DeleteFileOptions 
	         {
                     public DeleteFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class DuplicateFileCallbackInfo 
	         {
                     public DuplicateFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class DuplicateFileOptions 
	         {
                     public DuplicateFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SourceFilename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DestinationFilename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class FileMetadata 
	         {
                     public FileMetadata ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 FileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String MD5Hash
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class FileTransferProgressCallbackInfo 
	         {
                     public FileTransferProgressCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 BytesTransferred
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TotalFileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class GetFileMetadataCountOptions 
	         {
                     public GetFileMetadataCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnDeleteFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnDuplicateFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnFileTransferProgressCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnQueryFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnQueryFileListCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnReadFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnReadFileDataCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnWriteFileCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
             public delegate void OnWriteFileDataCallback ();
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public sealed class PlayerDataStorageFileTransferRequest 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result GetFileRequestState ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetFilename (System.UInt32 filenameStringBufferSizeBytes, System.Text.StringBuilder outStringBuffer, out System.Int32 outStringLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CancelRequest ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PlayerDataStorageFileTransferRequest (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public sealed class PlayerDataStorageInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryFile (Epic.OnlineServices.PlayerDataStorage.QueryFileOptions queryFileOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnQueryFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryFileList (Epic.OnlineServices.PlayerDataStorage.QueryFileListOptions queryFileListOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnQueryFileListCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyFileMetadataByFilename (Epic.OnlineServices.PlayerDataStorage.CopyFileMetadataByFilenameOptions copyFileMetadataOptions, out Epic.OnlineServices.PlayerDataStorage.FileMetadata outMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetFileMetadataCount (Epic.OnlineServices.PlayerDataStorage.GetFileMetadataCountOptions getFileMetadataCountOptions, out System.Int32 outFileMetadataCount)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyFileMetadataAtIndex (Epic.OnlineServices.PlayerDataStorage.CopyFileMetadataAtIndexOptions copyFileMetadataOptions, out Epic.OnlineServices.PlayerDataStorage.FileMetadata outMetadata)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DuplicateFile (Epic.OnlineServices.PlayerDataStorage.DuplicateFileOptions duplicateOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnDuplicateFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DeleteFile (Epic.OnlineServices.PlayerDataStorage.DeleteFileOptions deleteOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnDeleteFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.PlayerDataStorage.PlayerDataStorageFileTransferRequest ReadFile (Epic.OnlineServices.PlayerDataStorage.ReadFileOptions readOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnReadFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.PlayerDataStorage.PlayerDataStorageFileTransferRequest WriteFile (Epic.OnlineServices.PlayerDataStorage.WriteFileOptions writeOptions, System.Object clientData, Epic.OnlineServices.PlayerDataStorage.OnWriteFileCompleteCallback completionCallback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PlayerDataStorageInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 WritefileoptionsApiLatest;
                                    public static System.Int32 ReadfileoptionsApiLatest;
                                    public static System.Int32 DeletefileoptionsApiLatest;
                                    public static System.Int32 DuplicatefileoptionsApiLatest;
                                    public static System.Int32 CopyfilemetadatabyfilenameoptionsApiLatest;
                                    public static System.Int32 CopyfilemetadataatindexoptionsApiLatest;
                                    public static System.Int32 GetfilemetadatacountoptionsApiLatest;
                                    public static System.Int32 QueryfilelistoptionsApiLatest;
                                    public static System.Int32 QueryfileoptionsApiLatest;
                                    public static System.Int32 FilemetadataApiLatest;
                                    public static System.Int32 FileMaxSizeBytes;
                                    public static System.Int32 FilenameMaxLengthBytes;
                }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class QueryFileCallbackInfo 
	         {
                     public QueryFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class QueryFileListCallbackInfo 
	         {
                     public QueryFileListCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 FileCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class QueryFileListOptions 
	         {
                     public QueryFileListOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class QueryFileOptions 
	         {
                     public QueryFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class ReadFileCallbackInfo 
	         {
                     public ReadFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class ReadFileDataCallbackInfo 
	         {
                     public ReadFileDataCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TotalFileSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsLastChunk
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte[] DataChunk
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class ReadFileOptions 
	         {
                     public ReadFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ReadChunkLengthBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.PlayerDataStorage.OnReadFileDataCallback ReadFileDataCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.PlayerDataStorage.OnFileTransferProgressCallback FileTransferProgressCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public enum  ReadResult {
                ContinueReading,
                        FailRequest,
                        CancelRequest,
                }
    
            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class WriteFileCallbackInfo 
	         {
                     public WriteFileCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class WriteFileDataCallbackInfo 
	         {
                     public WriteFileDataCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 DataBufferLengthBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public class WriteFileOptions 
	         {
                     public WriteFileOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Filename
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ChunkLengthBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.PlayerDataStorage.OnWriteFileDataCallback WriteFileDataCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.PlayerDataStorage.OnFileTransferProgressCallback FileTransferProgressCallback
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.PlayerDataStorage {
              public enum  WriteResult {
                ContinueWriting,
                        CompleteRequest,
                        FailRequest,
                        CancelRequest,
                }
    
            }
                 namespace  Epic.OnlineServices.Platform {
             public delegate void AllocateMemoryFunc ();
    
            }
                 namespace  Epic.OnlineServices.Platform {
              public class ClientCredentials 
	         {
                     public ClientCredentials ()  {
                throw new System.NotImplementedException();
            }
         public  System.String ClientId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ClientSecret
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Platform {
              public class InitializeOptions 
	         {
                     public InitializeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Platform.AllocateMemoryFunc AllocateMemoryFunction
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Platform.ReallocateMemoryFunc ReallocateMemoryFunction
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Platform.ReleaseMemoryFunc ReleaseMemoryFunction
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.IntPtr SystemInitializeOptions
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Platform {
              public class Options 
	         {
                     public Options ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.IntPtr Reserved
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ProductId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String SandboxId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Platform.ClientCredentials ClientCredentials
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsServer
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EncryptionKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OverrideCountryCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OverrideLocaleCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DeploymentId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Platform.PlatformFlags Flags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CacheDirectory
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TickBudgetInMilliseconds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Platform {
              public enum  PlatformFlags {
                None,
                        LoadingInEditor,
                        DisableOverlay,
                        DisableSocialOverlay,
                }
    
            }
                 namespace  Epic.OnlineServices.Platform {
              public sealed class PlatformInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public static      Epic.OnlineServices.Result Initialize (Epic.OnlineServices.Platform.InitializeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Epic.OnlineServices.Result Shutdown ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Epic.OnlineServices.Platform.PlatformInterface Create (Epic.OnlineServices.Platform.Options options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Tick ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Metrics.MetricsInterface GetMetricsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Auth.AuthInterface GetAuthInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Connect.ConnectInterface GetConnectInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Ecom.EcomInterface GetEcomInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.UI.UIInterface GetUIInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Friends.FriendsInterface GetFriendsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Presence.PresenceInterface GetPresenceInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Sessions.SessionsInterface GetSessionsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Lobby.LobbyInterface GetLobbyInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.UserInfo.UserInfoInterface GetUserInfoInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.P2P.P2PInterface GetP2PInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.PlayerDataStorage.PlayerDataStorageInterface GetPlayerDataStorageInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.TitleStorage.TitleStorageInterface GetTitleStorageInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Achievements.AchievementsInterface GetAchievementsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Stats.StatsInterface GetStatsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Leaderboards.LeaderboardsInterface GetLeaderboardsInterface ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetActiveCountryCode (Epic.OnlineServices.EpicAccountId localUserId, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetActiveLocaleCode (Epic.OnlineServices.EpicAccountId localUserId, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetOverrideCountryCode (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetOverrideLocaleCode (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetOverrideCountryCode (System.String newCountryCode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetOverrideLocaleCode (System.String newLocaleCode)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CheckForLauncherAndRestart ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public PlatformInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 OptionsApiLatest;
                                    public static System.Int32 LocalecodeMaxBufferLen;
                                    public static System.Int32 LocalecodeMaxLength;
                                    public static System.Int32 CountrycodeMaxBufferLen;
                                    public static System.Int32 CountrycodeMaxLength;
                                    public static System.Int32 InitializeApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Platform {
             public delegate void ReallocateMemoryFunc ();
    
            }
                 namespace  Epic.OnlineServices.Platform {
             public delegate void ReleaseMemoryFunc ();
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class AcceptConnectionOptions 
	         {
                     public AcceptConnectionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId RemoteUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class AddNotifyPeerConnectionClosedOptions 
	         {
                     public AddNotifyPeerConnectionClosedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class AddNotifyPeerConnectionRequestOptions 
	         {
                     public AddNotifyPeerConnectionRequestOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class CloseConnectionOptions 
	         {
                     public CloseConnectionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId RemoteUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class CloseConnectionsOptions 
	         {
                     public CloseConnectionsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public enum  ConnectionClosedReason {
                Unknown,
                        ClosedByLocalUser,
                        ClosedByPeer,
                        TimedOut,
                        TooManyConnections,
                        InvalidMessage,
                        InvalidData,
                        ConnectionFailed,
                        ConnectionClosed,
                        NegotiationFailed,
                        UnexpectedError,
                }
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class GetNATTypeOptions 
	         {
                     public GetNATTypeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class GetNextReceivedPacketSizeOptions 
	         {
                     public GetNextReceivedPacketSizeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Byte> RequestedChannel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class GetPortRangeOptions 
	         {
                     public GetPortRangeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class GetRelayControlOptions 
	         {
                     public GetRelayControlOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public enum  NATType {
                Unknown,
                        Open,
                        Moderate,
                        Strict,
                }
    
            }
                 namespace  Epic.OnlineServices.P2P {
             public delegate void OnIncomingConnectionRequestCallback ();
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class OnIncomingConnectionRequestInfo 
	         {
                     public OnIncomingConnectionRequestInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId RemoteUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
             public delegate void OnQueryNATTypeCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class OnQueryNATTypeCompleteInfo 
	         {
                     public OnQueryNATTypeCompleteInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.NATType NATType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
             public delegate void OnRemoteConnectionClosedCallback ();
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class OnRemoteConnectionClosedInfo 
	         {
                     public OnRemoteConnectionClosedInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId RemoteUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.ConnectionClosedReason Reason
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public sealed class P2PInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result SendPacket (Epic.OnlineServices.P2P.SendPacketOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetNextReceivedPacketSize (Epic.OnlineServices.P2P.GetNextReceivedPacketSizeOptions options, out System.UInt32 outPacketSizeBytes)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result ReceivePacket (Epic.OnlineServices.P2P.ReceivePacketOptions options, out Epic.OnlineServices.ProductUserId outPeerId, out Epic.OnlineServices.P2P.SocketId outSocketId, out System.Byte outChannel, System.Byte[] outData, out System.UInt32 outBytesWritten)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyPeerConnectionRequest (Epic.OnlineServices.P2P.AddNotifyPeerConnectionRequestOptions options, System.Object clientData, Epic.OnlineServices.P2P.OnIncomingConnectionRequestCallback connectionRequestHandler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyPeerConnectionRequest (System.UInt64 notificationId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyPeerConnectionClosed (Epic.OnlineServices.P2P.AddNotifyPeerConnectionClosedOptions options, System.Object clientData, Epic.OnlineServices.P2P.OnRemoteConnectionClosedCallback connectionClosedHandler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyPeerConnectionClosed (System.UInt64 notificationId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result AcceptConnection (Epic.OnlineServices.P2P.AcceptConnectionOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CloseConnection (Epic.OnlineServices.P2P.CloseConnectionOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CloseConnections (Epic.OnlineServices.P2P.CloseConnectionsOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryNATType (Epic.OnlineServices.P2P.QueryNATTypeOptions options, System.Object clientData, Epic.OnlineServices.P2P.OnQueryNATTypeCompleteCallback nATTypeQueriedHandler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetNATType (Epic.OnlineServices.P2P.GetNATTypeOptions options, out Epic.OnlineServices.P2P.NATType outNATType)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetRelayControl (Epic.OnlineServices.P2P.SetRelayControlOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetRelayControl (Epic.OnlineServices.P2P.GetRelayControlOptions options, out Epic.OnlineServices.P2P.RelayControl outRelayControl)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetPortRange (Epic.OnlineServices.P2P.SetPortRangeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetPortRange (Epic.OnlineServices.P2P.GetPortRangeOptions options, out System.UInt16 outPort, out System.UInt16 outNumAdditionalPortsToTry)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public P2PInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 GetportrangeApiLatest;
                                    public static System.Int32 SetportrangeApiLatest;
                                    public static System.Int32 GetrelaycontrolApiLatest;
                                    public static System.Int32 SetrelaycontrolApiLatest;
                                    public static System.Int32 GetnattypeApiLatest;
                                    public static System.Int32 QuerynattypeApiLatest;
                                    public static System.Int32 CloseconnectionsApiLatest;
                                    public static System.Int32 CloseconnectionApiLatest;
                                    public static System.Int32 AcceptconnectionApiLatest;
                                    public static System.Int32 AddnotifypeerconnectionclosedApiLatest;
                                    public static System.Int32 AddnotifypeerconnectionrequestApiLatest;
                                    public static System.Int32 ReceivepacketApiLatest;
                                    public static System.Int32 GetnextreceivedpacketsizeApiLatest;
                                    public static System.Int32 SendpacketApiLatest;
                                    public static System.Int32 SocketidApiLatest;
                                    public static System.Int32 MaxConnections;
                                    public static System.Int32 MaxPacketSize;
                }

            }
                 namespace  Epic.OnlineServices.P2P {
              public enum  PacketReliability {
                UnreliableUnordered,
                        ReliableUnordered,
                        ReliableOrdered,
                }
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class QueryNATTypeOptions 
	         {
                     public QueryNATTypeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class ReceivePacketOptions 
	         {
                     public ReceivePacketOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 MaxDataSizeBytes
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Byte> RequestedChannel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public enum  RelayControl {
                NoRelays,
                        AllowRelays,
                        ForceRelays,
                }
    
            }
                 namespace  Epic.OnlineServices.P2P {
              public class SendPacketOptions 
	         {
                     public SendPacketOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId RemoteUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.SocketId SocketId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte Channel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte[] Data
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean AllowDelayedDelivery
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.P2P.PacketReliability Reliability
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class SetPortRangeOptions 
	         {
                     public SetPortRangeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt16 Port
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt16 MaxAdditionalPortsToTry
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class SetRelayControlOptions 
	         {
                     public SetRelayControlOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.P2P.RelayControl RelayControl
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.P2P {
              public class SocketId 
	         {
                     public SocketId ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String SocketName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public class BeginPlayerSessionOptions 
	         {
                     public BeginPlayerSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Metrics.BeginPlayerSessionOptionsAccountId AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Metrics.UserControllerType ControllerType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ServerIp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String GameSessionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public class BeginPlayerSessionOptionsAccountId 
	         {
                     public BeginPlayerSessionOptionsAccountId ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Metrics.MetricsAccountIdType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId Epic
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String External
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public class EndPlayerSessionOptions 
	         {
                     public EndPlayerSessionOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Metrics.EndPlayerSessionOptionsAccountId AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public class EndPlayerSessionOptionsAccountId 
	         {
                     public EndPlayerSessionOptionsAccountId ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Metrics.MetricsAccountIdType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId Epic
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String External
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public enum  MetricsAccountIdType {
                Epic,
                        External,
                }
    
            }
                 namespace  Epic.OnlineServices.Metrics {
              public sealed class MetricsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result BeginPlayerSession (Epic.OnlineServices.Metrics.BeginPlayerSessionOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result EndPlayerSession (Epic.OnlineServices.Metrics.EndPlayerSessionOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public MetricsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 EndplayersessionApiLatest;
                                    public static System.Int32 BeginplayersessionApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Metrics {
              public enum  UserControllerType {
                Unknown,
                        MouseKeyboard,
                        GamepadControl,
                        TouchControl,
                }
    
            }
                 namespace  Epic.OnlineServices.Logging {
              public enum  LogCategory {
                Core,
                        Auth,
                        Friends,
                        Presence,
                        UserInfo,
                        HttpSerialization,
                        Ecom,
                        P2P,
                        Sessions,
                        RateLimiter,
                        PlayerDataStorage,
                        Analytics,
                        Messaging,
                        Connect,
                        Overlay,
                        Achievements,
                        Stats,
                        Ui,
                        Lobby,
                        Leaderboards,
                        Keychain,
                        IdentityProvider,
                        TitleStorage,
                        AllCategories,
                }
    
            }
                 namespace  Epic.OnlineServices.Logging {
              public enum  LogLevel {
                Off,
                        Fatal,
                        Error,
                        Warning,
                        Info,
                        Verbose,
                        VeryVerbose,
                }
    
            }
                 namespace  Epic.OnlineServices.Logging {
              public class LogMessage 
	         {
                     public LogMessage ()  {
                throw new System.NotImplementedException();
            }
         public  System.String Category
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Message
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Logging.LogLevel Level
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Logging {
             public delegate void LogMessageFunc ();
    
            }
                 namespace  Epic.OnlineServices.Logging {
              public abstract class LoggingInterface 
	         {
                public static      Epic.OnlineServices.Result SetCallback (Epic.OnlineServices.Logging.LogMessageFunc callback)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public static      Epic.OnlineServices.Result SetLogLevel (Epic.OnlineServices.Logging.LogCategory logCategory, Epic.OnlineServices.Logging.LogLevel logLevel)  
        
            {
              throw new System.NotImplementedException();
            }
            
        }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyJoinLobbyAcceptedOptions 
	         {
                     public AddNotifyJoinLobbyAcceptedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyLobbyInviteAcceptedOptions 
	         {
                     public AddNotifyLobbyInviteAcceptedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyLobbyInviteReceivedOptions 
	         {
                     public AddNotifyLobbyInviteReceivedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyLobbyMemberStatusReceivedOptions 
	         {
                     public AddNotifyLobbyMemberStatusReceivedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyLobbyMemberUpdateReceivedOptions 
	         {
                     public AddNotifyLobbyMemberUpdateReceivedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AddNotifyLobbyUpdateReceivedOptions 
	         {
                     public AddNotifyLobbyUpdateReceivedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class Attribute 
	         {
                     public Attribute ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.AttributeData Data
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyAttributeVisibility Visibility
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AttributeData 
	         {
                     public AttributeData ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.AttributeDataValue Value
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class AttributeDataValue 
	         {
                     public AttributeDataValue ()  {
                throw new System.NotImplementedException();
            }
         public  System.Nullable<System.Int64> AsInt64
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Double> AsDouble
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.Boolean> AsBool
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AsUtf8
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.AttributeType ValueType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CopyLobbyDetailsHandleByInviteIdOptions 
	         {
                     public CopyLobbyDetailsHandleByInviteIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CopyLobbyDetailsHandleByUiEventIdOptions 
	         {
                     public CopyLobbyDetailsHandleByUiEventIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CopyLobbyDetailsHandleOptions 
	         {
                     public CopyLobbyDetailsHandleOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CreateLobbyCallbackInfo 
	         {
                     public CreateLobbyCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CreateLobbyOptions 
	         {
                     public CreateLobbyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 MaxLobbyMembers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyPermissionLevel PermissionLevel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean PresenceEnabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class CreateLobbySearchOptions 
	         {
                     public CreateLobbySearchOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxResults
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class DestroyLobbyCallbackInfo 
	         {
                     public DestroyLobbyCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class DestroyLobbyOptions 
	         {
                     public DestroyLobbyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class GetInviteCountOptions 
	         {
                     public GetInviteCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class GetInviteIdByIndexOptions 
	         {
                     public GetInviteIdByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class JoinLobbyAcceptedCallbackInfo 
	         {
                     public JoinLobbyAcceptedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt64 UiEventId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class JoinLobbyCallbackInfo 
	         {
                     public JoinLobbyCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class JoinLobbyOptions 
	         {
                     public JoinLobbyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyDetails LobbyDetailsHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean PresenceEnabled
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class KickMemberCallbackInfo 
	         {
                     public KickMemberCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class KickMemberOptions 
	         {
                     public KickMemberOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LeaveLobbyCallbackInfo 
	         {
                     public LeaveLobbyCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LeaveLobbyOptions 
	         {
                     public LeaveLobbyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public enum  LobbyAttributeVisibility {
                Public,
                        Private,
                }
    
            }
                 namespace  Epic.OnlineServices.Lobby {
              public sealed class LobbyDetails 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.ProductUserId GetLobbyOwner (Epic.OnlineServices.Lobby.LobbyDetailsGetLobbyOwnerOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyInfo (Epic.OnlineServices.Lobby.LobbyDetailsCopyInfoOptions options, out Epic.OnlineServices.Lobby.LobbyDetailsInfo outLobbyDetailsInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetAttributeCount (Epic.OnlineServices.Lobby.LobbyDetailsGetAttributeCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAttributeByIndex (Epic.OnlineServices.Lobby.LobbyDetailsCopyAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute outAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAttributeByKey (Epic.OnlineServices.Lobby.LobbyDetailsCopyAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute outAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetMemberCount (Epic.OnlineServices.Lobby.LobbyDetailsGetMemberCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.ProductUserId GetMemberByIndex (Epic.OnlineServices.Lobby.LobbyDetailsGetMemberByIndexOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetMemberAttributeCount (Epic.OnlineServices.Lobby.LobbyDetailsGetMemberAttributeCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyMemberAttributeByIndex (Epic.OnlineServices.Lobby.LobbyDetailsCopyMemberAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute outAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyMemberAttributeByKey (Epic.OnlineServices.Lobby.LobbyDetailsCopyMemberAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute outAttribute)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LobbyDetails (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsCopyAttributeByIndexOptions 
	         {
                     public LobbyDetailsCopyAttributeByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 AttrIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsCopyAttributeByKeyOptions 
	         {
                     public LobbyDetailsCopyAttributeByKeyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AttrKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsCopyInfoOptions 
	         {
                     public LobbyDetailsCopyInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsCopyMemberAttributeByIndexOptions 
	         {
                     public LobbyDetailsCopyMemberAttributeByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 AttrIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsCopyMemberAttributeByKeyOptions 
	         {
                     public LobbyDetailsCopyMemberAttributeByKeyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AttrKey
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsGetAttributeCountOptions 
	         {
                     public LobbyDetailsGetAttributeCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsGetLobbyOwnerOptions 
	         {
                     public LobbyDetailsGetLobbyOwnerOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsGetMemberAttributeCountOptions 
	         {
                     public LobbyDetailsGetMemberAttributeCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsGetMemberByIndexOptions 
	         {
                     public LobbyDetailsGetMemberByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MemberIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsGetMemberCountOptions 
	         {
                     public LobbyDetailsGetMemberCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyDetailsInfo 
	         {
                     public LobbyDetailsInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LobbyOwnerUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyPermissionLevel PermissionLevel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 AvailableSlots
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 MaxMembers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean AllowInvites
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public sealed class LobbyInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void CreateLobby (Epic.OnlineServices.Lobby.CreateLobbyOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnCreateLobbyCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DestroyLobby (Epic.OnlineServices.Lobby.DestroyLobbyOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnDestroyLobbyCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void JoinLobby (Epic.OnlineServices.Lobby.JoinLobbyOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnJoinLobbyCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LeaveLobby (Epic.OnlineServices.Lobby.LeaveLobbyOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLeaveLobbyCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result UpdateLobbyModification (Epic.OnlineServices.Lobby.UpdateLobbyModificationOptions options, out Epic.OnlineServices.Lobby.LobbyModification outLobbyModificationHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UpdateLobby (Epic.OnlineServices.Lobby.UpdateLobbyOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnUpdateLobbyCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void PromoteMember (Epic.OnlineServices.Lobby.PromoteMemberOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnPromoteMemberCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void KickMember (Epic.OnlineServices.Lobby.KickMemberOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnKickMemberCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLobbyUpdateReceived (Epic.OnlineServices.Lobby.AddNotifyLobbyUpdateReceivedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLobbyUpdateReceivedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLobbyUpdateReceived (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLobbyMemberUpdateReceived (Epic.OnlineServices.Lobby.AddNotifyLobbyMemberUpdateReceivedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLobbyMemberUpdateReceivedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLobbyMemberUpdateReceived (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLobbyMemberStatusReceived (Epic.OnlineServices.Lobby.AddNotifyLobbyMemberStatusReceivedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLobbyMemberStatusReceivedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLobbyMemberStatusReceived (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SendInvite (Epic.OnlineServices.Lobby.SendInviteOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnSendInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RejectInvite (Epic.OnlineServices.Lobby.RejectInviteOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnRejectInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryInvites (Epic.OnlineServices.Lobby.QueryInvitesOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnQueryInvitesCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetInviteCount (Epic.OnlineServices.Lobby.GetInviteCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetInviteIdByIndex (Epic.OnlineServices.Lobby.GetInviteIdByIndexOptions options, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CreateLobbySearch (Epic.OnlineServices.Lobby.CreateLobbySearchOptions options, out Epic.OnlineServices.Lobby.LobbySearch outLobbySearchHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLobbyInviteReceived (Epic.OnlineServices.Lobby.AddNotifyLobbyInviteReceivedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLobbyInviteReceivedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLobbyInviteReceived (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLobbyInviteAccepted (Epic.OnlineServices.Lobby.AddNotifyLobbyInviteAcceptedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnLobbyInviteAcceptedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLobbyInviteAccepted (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyJoinLobbyAccepted (Epic.OnlineServices.Lobby.AddNotifyJoinLobbyAcceptedOptions options, System.Object clientData, Epic.OnlineServices.Lobby.OnJoinLobbyAcceptedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyJoinLobbyAccepted (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLobbyDetailsHandleByInviteId (Epic.OnlineServices.Lobby.CopyLobbyDetailsHandleByInviteIdOptions options, out Epic.OnlineServices.Lobby.LobbyDetails outLobbyDetailsHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLobbyDetailsHandleByUiEventId (Epic.OnlineServices.Lobby.CopyLobbyDetailsHandleByUiEventIdOptions options, out Epic.OnlineServices.Lobby.LobbyDetails outLobbyDetailsHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLobbyDetailsHandle (Epic.OnlineServices.Lobby.CopyLobbyDetailsHandleOptions options, out Epic.OnlineServices.Lobby.LobbyDetails outLobbyDetailsHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LobbyInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 LobbysearchCopysearchresultbyindexApiLatest;
                                    public static System.Int32 LobbysearchGetsearchresultcountApiLatest;
                                    public static System.Int32 LobbysearchSetmaxresultsApiLatest;
                                    public static System.Int32 LobbysearchRemoveparameterApiLatest;
                                    public static System.Int32 LobbysearchSetparameterApiLatest;
                                    public static System.Int32 LobbysearchSettargetuseridApiLatest;
                                    public static System.Int32 LobbysearchSetlobbyidApiLatest;
                                    public static System.Int32 LobbysearchFindApiLatest;
                                    public static System.Int32 LobbydetailsGetmemberbyindexApiLatest;
                                    public static System.Int32 LobbydetailsGetmembercountApiLatest;
                                    public static System.Int32 LobbydetailsCopymemberattributebykeyApiLatest;
                                    public static System.Int32 LobbydetailsCopymemberattributebyindexApiLatest;
                                    public static System.Int32 LobbydetailsGetmemberattributecountApiLatest;
                                    public static System.Int32 LobbydetailsCopyattributebykeyApiLatest;
                                    public static System.Int32 LobbydetailsCopyattributebyindexApiLatest;
                                    public static System.Int32 LobbydetailsGetattributecountApiLatest;
                                    public static System.Int32 LobbydetailsCopyinfoApiLatest;
                                    public static System.Int32 LobbydetailsGetlobbyownerApiLatest;
                                    public static System.Int32 LobbymodificationRemovememberattributeApiLatest;
                                    public static System.Int32 LobbymodificationAddmemberattributeApiLatest;
                                    public static System.Int32 LobbymodificationRemoveattributeApiLatest;
                                    public static System.Int32 LobbymodificationAddattributeApiLatest;
                                    public static System.Int32 LobbymodificationSetmaxmembersApiLatest;
                                    public static System.Int32 LobbymodificationSetpermissionlevelApiLatest;
                                    public static System.Int32 AttributeApiLatest;
                                    public static System.Int32 AttributedataApiLatest;
                                    public static System.String SearchMinslotsavailable;
                                    public static System.String SearchMincurrentmembers;
                                    public static System.Int32 CopylobbydetailshandleApiLatest;
                                    public static System.Int32 GetinviteidbyindexApiLatest;
                                    public static System.Int32 GetinvitecountApiLatest;
                                    public static System.Int32 QueryinvitesApiLatest;
                                    public static System.Int32 RejectinviteApiLatest;
                                    public static System.Int32 SendinviteApiLatest;
                                    public static System.Int32 CreatelobbysearchApiLatest;
                                    public static System.Int32 CopylobbydetailshandlebyuieventidApiLatest;
                                    public static System.Int32 CopylobbydetailshandlebyinviteidApiLatest;
                                    public static System.Int32 AddnotifyjoinlobbyacceptedApiLatest;
                                    public static System.Int32 AddnotifylobbyinviteacceptedApiLatest;
                                    public static System.Int32 AddnotifylobbyinvitereceivedApiLatest;
                                    public static System.Int32 InviteidMaxLength;
                                    public static System.Int32 AddnotifylobbymemberstatusreceivedApiLatest;
                                    public static System.Int32 AddnotifylobbymemberupdatereceivedApiLatest;
                                    public static System.Int32 AddnotifylobbyupdatereceivedApiLatest;
                                    public static System.Int32 KickmemberApiLatest;
                                    public static System.Int32 PromotememberApiLatest;
                                    public static System.Int32 UpdatelobbyApiLatest;
                                    public static System.Int32 UpdatelobbymodificationApiLatest;
                                    public static System.Int32 LeavelobbyApiLatest;
                                    public static System.Int32 JoinlobbyApiLatest;
                                    public static System.Int32 DestroylobbyApiLatest;
                                    public static System.Int32 CreatelobbyApiLatest;
                                    public static System.Int32 LobbydetailsInfoApiLatest;
                                    public static System.Int32 LobbymodificationMaxAttributeLength;
                                    public static System.Int32 LobbymodificationMaxAttributes;
                                    public static System.Int32 MaxSearchResults;
                                    public static System.Int32 MaxLobbyMembers;
                                    public static System.Int32 MaxLobbies;
                }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyInviteAcceptedCallbackInfo 
	         {
                     public LobbyInviteAcceptedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyInviteReceivedCallbackInfo 
	         {
                     public LobbyInviteReceivedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public enum  LobbyMemberStatus {
                Joined,
                        Left,
                        Disconnected,
                        Kicked,
                        Promoted,
                        Closed,
                }
    
            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyMemberStatusReceivedCallbackInfo 
	         {
                     public LobbyMemberStatusReceivedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyMemberStatus CurrentStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyMemberUpdateReceivedCallbackInfo 
	         {
                     public LobbyMemberUpdateReceivedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public sealed class LobbyModification 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result SetPermissionLevel (Epic.OnlineServices.Lobby.LobbyModificationSetPermissionLevelOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetMaxMembers (Epic.OnlineServices.Lobby.LobbyModificationSetMaxMembersOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result AddAttribute (Epic.OnlineServices.Lobby.LobbyModificationAddAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result RemoveAttribute (Epic.OnlineServices.Lobby.LobbyModificationRemoveAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result AddMemberAttribute (Epic.OnlineServices.Lobby.LobbyModificationAddMemberAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result RemoveMemberAttribute (Epic.OnlineServices.Lobby.LobbyModificationRemoveMemberAttributeOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LobbyModification (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationAddAttributeOptions 
	         {
                     public LobbyModificationAddAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.AttributeData Attribute
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyAttributeVisibility Visibility
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationAddMemberAttributeOptions 
	         {
                     public LobbyModificationAddMemberAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.AttributeData Attribute
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyAttributeVisibility Visibility
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationRemoveAttributeOptions 
	         {
                     public LobbyModificationRemoveAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationRemoveMemberAttributeOptions 
	         {
                     public LobbyModificationRemoveMemberAttributeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationSetMaxMembersOptions 
	         {
                     public LobbyModificationSetMaxMembersOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxMembers
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyModificationSetPermissionLevelOptions 
	         {
                     public LobbyModificationSetPermissionLevelOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyPermissionLevel PermissionLevel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public enum  LobbyPermissionLevel {
                Publicadvertised,
                        Joinviapresence,
                        Inviteonly,
                }
    
            }
                 namespace  Epic.OnlineServices.Lobby {
              public sealed class LobbySearch 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void Find (Epic.OnlineServices.Lobby.LobbySearchFindOptions options, System.Object clientData, Epic.OnlineServices.Lobby.LobbySearchOnFindCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetLobbyId (Epic.OnlineServices.Lobby.LobbySearchSetLobbyIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetTargetUserId (Epic.OnlineServices.Lobby.LobbySearchSetTargetUserIdOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetParameter (Epic.OnlineServices.Lobby.LobbySearchSetParameterOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result RemoveParameter (Epic.OnlineServices.Lobby.LobbySearchRemoveParameterOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result SetMaxResults (Epic.OnlineServices.Lobby.LobbySearchSetMaxResultsOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetSearchResultCount (Epic.OnlineServices.Lobby.LobbySearchGetSearchResultCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopySearchResultByIndex (Epic.OnlineServices.Lobby.LobbySearchCopySearchResultByIndexOptions options, out Epic.OnlineServices.Lobby.LobbyDetails outLobbyDetailsHandle)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LobbySearch (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchCopySearchResultByIndexOptions 
	         {
                     public LobbySearchCopySearchResultByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 LobbyIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchFindCallbackInfo 
	         {
                     public LobbySearchFindCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchFindOptions 
	         {
                     public LobbySearchFindOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchGetSearchResultCountOptions 
	         {
                     public LobbySearchGetSearchResultCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void LobbySearchOnFindCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchRemoveParameterOptions 
	         {
                     public LobbySearchRemoveParameterOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Key
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ComparisonOp ComparisonOp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchSetLobbyIdOptions 
	         {
                     public LobbySearchSetLobbyIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchSetMaxResultsOptions 
	         {
                     public LobbySearchSetMaxResultsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 MaxResults
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchSetParameterOptions 
	         {
                     public LobbySearchSetParameterOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.AttributeData Parameter
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ComparisonOp ComparisonOp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbySearchSetTargetUserIdOptions 
	         {
                     public LobbySearchSetTargetUserIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class LobbyUpdateReceivedCallbackInfo 
	         {
                     public LobbyUpdateReceivedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnCreateLobbyCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnDestroyLobbyCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnJoinLobbyAcceptedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnJoinLobbyCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnKickMemberCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLeaveLobbyCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLobbyInviteAcceptedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLobbyInviteReceivedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLobbyMemberStatusReceivedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLobbyMemberUpdateReceivedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnLobbyUpdateReceivedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnPromoteMemberCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnQueryInvitesCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnRejectInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnSendInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
             public delegate void OnUpdateLobbyCallback ();
    
            }
                 namespace  Epic.OnlineServices.Lobby {
              public class PromoteMemberCallbackInfo 
	         {
                     public PromoteMemberCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class PromoteMemberOptions 
	         {
                     public PromoteMemberOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class QueryInvitesCallbackInfo 
	         {
                     public QueryInvitesCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class QueryInvitesOptions 
	         {
                     public QueryInvitesOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class RejectInviteCallbackInfo 
	         {
                     public RejectInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class RejectInviteOptions 
	         {
                     public RejectInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String InviteId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class SendInviteCallbackInfo 
	         {
                     public SendInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class SendInviteOptions 
	         {
                     public SendInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class UpdateLobbyCallbackInfo 
	         {
                     public UpdateLobbyCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class UpdateLobbyModificationOptions 
	         {
                     public UpdateLobbyModificationOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LobbyId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Lobby {
              public class UpdateLobbyOptions 
	         {
                     public UpdateLobbyOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Lobby.LobbyModification LobbyModificationHandle
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardDefinitionByIndexOptions 
	         {
                     public CopyLeaderboardDefinitionByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 LeaderboardIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardDefinitionByLeaderboardIdOptions 
	         {
                     public CopyLeaderboardDefinitionByLeaderboardIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LeaderboardId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardRecordByIndexOptions 
	         {
                     public CopyLeaderboardRecordByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 LeaderboardRecordIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardRecordByUserIdOptions 
	         {
                     public CopyLeaderboardRecordByUserIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardUserScoreByIndexOptions 
	         {
                     public CopyLeaderboardUserScoreByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 LeaderboardUserScoreIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class CopyLeaderboardUserScoreByUserIdOptions 
	         {
                     public CopyLeaderboardUserScoreByUserIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class Definition 
	         {
                     public Definition ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LeaderboardId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Leaderboards.LeaderboardAggregation Aggregation
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> StartTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> EndTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class GetLeaderboardDefinitionCountOptions 
	         {
                     public GetLeaderboardDefinitionCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class GetLeaderboardRecordCountOptions 
	         {
                     public GetLeaderboardRecordCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class GetLeaderboardUserScoreCountOptions 
	         {
                     public GetLeaderboardUserScoreCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public enum  LeaderboardAggregation {
                Min,
                        Max,
                        Sum,
                        Latest,
                }
    
            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class LeaderboardRecord 
	         {
                     public LeaderboardRecord ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Rank
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Score
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String UserDisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class LeaderboardUserScore 
	         {
                     public LeaderboardUserScore ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Score
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public sealed class LeaderboardsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryLeaderboardDefinitions (Epic.OnlineServices.Leaderboards.QueryLeaderboardDefinitionsOptions options, System.Object clientData, Epic.OnlineServices.Leaderboards.OnQueryLeaderboardDefinitionsCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetLeaderboardDefinitionCount (Epic.OnlineServices.Leaderboards.GetLeaderboardDefinitionCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardDefinitionByIndex (Epic.OnlineServices.Leaderboards.CopyLeaderboardDefinitionByIndexOptions options, out Epic.OnlineServices.Leaderboards.Definition outLeaderboardDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardDefinitionByLeaderboardId (Epic.OnlineServices.Leaderboards.CopyLeaderboardDefinitionByLeaderboardIdOptions options, out Epic.OnlineServices.Leaderboards.Definition outLeaderboardDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryLeaderboardRanks (Epic.OnlineServices.Leaderboards.QueryLeaderboardRanksOptions options, System.Object clientData, Epic.OnlineServices.Leaderboards.OnQueryLeaderboardRanksCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetLeaderboardRecordCount (Epic.OnlineServices.Leaderboards.GetLeaderboardRecordCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardRecordByIndex (Epic.OnlineServices.Leaderboards.CopyLeaderboardRecordByIndexOptions options, out Epic.OnlineServices.Leaderboards.LeaderboardRecord outLeaderboardRecord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardRecordByUserId (Epic.OnlineServices.Leaderboards.CopyLeaderboardRecordByUserIdOptions options, out Epic.OnlineServices.Leaderboards.LeaderboardRecord outLeaderboardRecord)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryLeaderboardUserScores (Epic.OnlineServices.Leaderboards.QueryLeaderboardUserScoresOptions options, System.Object clientData, Epic.OnlineServices.Leaderboards.OnQueryLeaderboardUserScoresCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetLeaderboardUserScoreCount (Epic.OnlineServices.Leaderboards.GetLeaderboardUserScoreCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardUserScoreByIndex (Epic.OnlineServices.Leaderboards.CopyLeaderboardUserScoreByIndexOptions options, out Epic.OnlineServices.Leaderboards.LeaderboardUserScore outLeaderboardUserScore)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyLeaderboardUserScoreByUserId (Epic.OnlineServices.Leaderboards.CopyLeaderboardUserScoreByUserIdOptions options, out Epic.OnlineServices.Leaderboards.LeaderboardUserScore outLeaderboardUserScore)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public LeaderboardsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 CopyleaderboardrecordbyuseridApiLatest;
                                    public static System.Int32 CopyleaderboardrecordbyindexApiLatest;
                                    public static System.Int32 GetleaderboardrecordcountApiLatest;
                                    public static System.Int32 LeaderboardrecordApiLatest;
                                    public static System.Int32 QueryleaderboardranksApiLatest;
                                    public static System.Int32 CopyleaderboarduserscorebyuseridApiLatest;
                                    public static System.Int32 CopyleaderboarduserscorebyindexApiLatest;
                                    public static System.Int32 GetleaderboarduserscorecountApiLatest;
                                    public static System.Int32 LeaderboarduserscoreApiLatest;
                                    public static System.Int32 QueryleaderboarduserscoresApiLatest;
                                    public static System.Int32 UserscoresquerystatinfoApiLatest;
                                    public static System.Int32 CopyleaderboarddefinitionbyleaderboardidApiLatest;
                                    public static System.Int32 CopyleaderboarddefinitionbyindexApiLatest;
                                    public static System.Int32 GetleaderboarddefinitioncountApiLatest;
                                    public static System.Int32 DefinitionApiLatest;
                                    public static System.Int32 QueryleaderboarddefinitionsApiLatest;
                                    public static System.Int32 TimeUndefined;
                }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
             public delegate void OnQueryLeaderboardDefinitionsCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class OnQueryLeaderboardDefinitionsCompleteCallbackInfo 
	         {
                     public OnQueryLeaderboardDefinitionsCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
             public delegate void OnQueryLeaderboardRanksCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class OnQueryLeaderboardRanksCompleteCallbackInfo 
	         {
                     public OnQueryLeaderboardRanksCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
             public delegate void OnQueryLeaderboardUserScoresCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class OnQueryLeaderboardUserScoresCompleteCallbackInfo 
	         {
                     public OnQueryLeaderboardUserScoresCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class QueryLeaderboardDefinitionsOptions 
	         {
                     public QueryLeaderboardDefinitionsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Nullable<System.DateTimeOffset> StartTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> EndTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class QueryLeaderboardRanksOptions 
	         {
                     public QueryLeaderboardRanksOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String LeaderboardId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class QueryLeaderboardUserScoresOptions 
	         {
                     public QueryLeaderboardUserScoresOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId[] UserIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Leaderboards.UserScoresQueryStatInfo[] StatInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> StartTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> EndTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Leaderboards {
              public class UserScoresQueryStatInfo 
	         {
                     public UserScoresQueryStatInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String StatName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Leaderboards.LeaderboardAggregation Aggregation
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class AcceptInviteCallbackInfo 
	         {
                     public AcceptInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class AcceptInviteOptions 
	         {
                     public AcceptInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class AddNotifyFriendsUpdateOptions 
	         {
                     public AddNotifyFriendsUpdateOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public sealed class FriendsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryFriends (Epic.OnlineServices.Friends.QueryFriendsOptions options, System.Object clientData, Epic.OnlineServices.Friends.OnQueryFriendsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void SendInvite (Epic.OnlineServices.Friends.SendInviteOptions options, System.Object clientData, Epic.OnlineServices.Friends.OnSendInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void AcceptInvite (Epic.OnlineServices.Friends.AcceptInviteOptions options, System.Object clientData, Epic.OnlineServices.Friends.OnAcceptInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RejectInvite (Epic.OnlineServices.Friends.RejectInviteOptions options, System.Object clientData, Epic.OnlineServices.Friends.OnRejectInviteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetFriendsCount (Epic.OnlineServices.Friends.GetFriendsCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.EpicAccountId GetFriendAtIndex (Epic.OnlineServices.Friends.GetFriendAtIndexOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Friends.FriendsStatus GetStatus (Epic.OnlineServices.Friends.GetStatusOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyFriendsUpdate (Epic.OnlineServices.Friends.AddNotifyFriendsUpdateOptions options, System.Object clientData, Epic.OnlineServices.Friends.OnFriendsUpdateCallback friendsUpdateHandler)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyFriendsUpdate (System.UInt64 notificationId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public FriendsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 AddnotifyfriendsupdateApiLatest;
                                    public static System.Int32 GetstatusApiLatest;
                                    public static System.Int32 GetfriendatindexApiLatest;
                                    public static System.Int32 GetfriendscountApiLatest;
                                    public static System.Int32 DeletefriendApiLatest;
                                    public static System.Int32 RejectinviteApiLatest;
                                    public static System.Int32 AcceptinviteApiLatest;
                                    public static System.Int32 SendinviteApiLatest;
                                    public static System.Int32 QueryfriendsApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Friends {
              public enum  FriendsStatus {
                NotFriends,
                        InviteSent,
                        InviteReceived,
                        Friends,
                }
    
            }
                 namespace  Epic.OnlineServices.Friends {
              public class GetFriendAtIndexOptions 
	         {
                     public GetFriendAtIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class GetFriendsCountOptions 
	         {
                     public GetFriendsCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class GetStatusOptions 
	         {
                     public GetStatusOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
             public delegate void OnAcceptInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Friends {
             public delegate void OnFriendsUpdateCallback ();
    
            }
                 namespace  Epic.OnlineServices.Friends {
              public class OnFriendsUpdateInfo 
	         {
                     public OnFriendsUpdateInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Friends.FriendsStatus PreviousStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Friends.FriendsStatus CurrentStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
             public delegate void OnQueryFriendsCallback ();
    
            }
                 namespace  Epic.OnlineServices.Friends {
             public delegate void OnRejectInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Friends {
             public delegate void OnSendInviteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Friends {
              public class QueryFriendsCallbackInfo 
	         {
                     public QueryFriendsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class QueryFriendsOptions 
	         {
                     public QueryFriendsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class RejectInviteCallbackInfo 
	         {
                     public RejectInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class RejectInviteOptions 
	         {
                     public RejectInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class SendInviteCallbackInfo 
	         {
                     public SendInviteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Friends {
              public class SendInviteOptions 
	         {
                     public SendInviteOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CatalogItem 
	         {
                     public CatalogItem ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String CatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EntitlementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TitleText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DescriptionText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LongDescriptionText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TechnicalDetailsText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DeveloperText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Ecom.EcomItemType ItemType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int64 EntitlementEndTimestamp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CatalogOffer 
	         {
                     public CatalogOffer ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.Int32 ServerIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TitleText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DescriptionText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LongDescriptionText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TechnicalDetailsText_DEPRECATED
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CurrencyCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Result PriceResult
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 OriginalPrice
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 CurrentPrice
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Byte DiscountPercentage
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int64 ExpirationTimestamp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 PurchasedCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 PurchaseLimit
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean AvailableForPurchase
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CatalogRelease 
	         {
                     public CatalogRelease ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String[] CompatibleAppIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] CompatiblePlatforms
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ReleaseNote
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CheckoutCallbackInfo 
	         {
                     public CheckoutCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TransactionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CheckoutEntry 
	         {
                     public CheckoutEntry ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CheckoutOptions 
	         {
                     public CheckoutOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OverrideCatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Ecom.CheckoutEntry[] Entries
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyEntitlementByIdOptions 
	         {
                     public CopyEntitlementByIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EntitlementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyEntitlementByIndexOptions 
	         {
                     public CopyEntitlementByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 EntitlementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyEntitlementByNameAndIndexOptions 
	         {
                     public CopyEntitlementByNameAndIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EntitlementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Index
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyItemByIdOptions 
	         {
                     public CopyItemByIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyItemImageInfoByIndexOptions 
	         {
                     public CopyItemImageInfoByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ImageInfoIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyItemReleaseByIndexOptions 
	         {
                     public CopyItemReleaseByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ReleaseIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyOfferByIdOptions 
	         {
                     public CopyOfferByIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyOfferByIndexOptions 
	         {
                     public CopyOfferByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 OfferIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyOfferImageInfoByIndexOptions 
	         {
                     public CopyOfferImageInfoByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ImageInfoIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyOfferItemByIndexOptions 
	         {
                     public CopyOfferItemByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ItemIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyTransactionByIdOptions 
	         {
                     public CopyTransactionByIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TransactionId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class CopyTransactionByIndexOptions 
	         {
                     public CopyTransactionByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 TransactionIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public sealed class EcomInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryOwnership (Epic.OnlineServices.Ecom.QueryOwnershipOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnQueryOwnershipCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryOwnershipToken (Epic.OnlineServices.Ecom.QueryOwnershipTokenOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnQueryOwnershipTokenCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryEntitlements (Epic.OnlineServices.Ecom.QueryEntitlementsOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnQueryEntitlementsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryOffers (Epic.OnlineServices.Ecom.QueryOffersOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnQueryOffersCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Checkout (Epic.OnlineServices.Ecom.CheckoutOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnCheckoutCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RedeemEntitlements (Epic.OnlineServices.Ecom.RedeemEntitlementsOptions options, System.Object clientData, Epic.OnlineServices.Ecom.OnRedeemEntitlementsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetEntitlementsCount (Epic.OnlineServices.Ecom.GetEntitlementsCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetEntitlementsByNameCount (Epic.OnlineServices.Ecom.GetEntitlementsByNameCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyEntitlementByIndex (Epic.OnlineServices.Ecom.CopyEntitlementByIndexOptions options, out Epic.OnlineServices.Ecom.Entitlement outEntitlement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyEntitlementByNameAndIndex (Epic.OnlineServices.Ecom.CopyEntitlementByNameAndIndexOptions options, out Epic.OnlineServices.Ecom.Entitlement outEntitlement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyEntitlementById (Epic.OnlineServices.Ecom.CopyEntitlementByIdOptions options, out Epic.OnlineServices.Ecom.Entitlement outEntitlement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetOfferCount (Epic.OnlineServices.Ecom.GetOfferCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyOfferByIndex (Epic.OnlineServices.Ecom.CopyOfferByIndexOptions options, out Epic.OnlineServices.Ecom.CatalogOffer outOffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyOfferById (Epic.OnlineServices.Ecom.CopyOfferByIdOptions options, out Epic.OnlineServices.Ecom.CatalogOffer outOffer)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetOfferItemCount (Epic.OnlineServices.Ecom.GetOfferItemCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyOfferItemByIndex (Epic.OnlineServices.Ecom.CopyOfferItemByIndexOptions options, out Epic.OnlineServices.Ecom.CatalogItem outItem)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyItemById (Epic.OnlineServices.Ecom.CopyItemByIdOptions options, out Epic.OnlineServices.Ecom.CatalogItem outItem)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetOfferImageInfoCount (Epic.OnlineServices.Ecom.GetOfferImageInfoCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyOfferImageInfoByIndex (Epic.OnlineServices.Ecom.CopyOfferImageInfoByIndexOptions options, out Epic.OnlineServices.Ecom.KeyImageInfo outImageInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetItemImageInfoCount (Epic.OnlineServices.Ecom.GetItemImageInfoCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyItemImageInfoByIndex (Epic.OnlineServices.Ecom.CopyItemImageInfoByIndexOptions options, out Epic.OnlineServices.Ecom.KeyImageInfo outImageInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetItemReleaseCount (Epic.OnlineServices.Ecom.GetItemReleaseCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyItemReleaseByIndex (Epic.OnlineServices.Ecom.CopyItemReleaseByIndexOptions options, out Epic.OnlineServices.Ecom.CatalogRelease outRelease)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetTransactionCount (Epic.OnlineServices.Ecom.GetTransactionCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyTransactionByIndex (Epic.OnlineServices.Ecom.CopyTransactionByIndexOptions options, out Epic.OnlineServices.Ecom.Transaction outTransaction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyTransactionById (Epic.OnlineServices.Ecom.CopyTransactionByIdOptions options, out Epic.OnlineServices.Ecom.Transaction outTransaction)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public EcomInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 TransactionCopyentitlementbyindexApiLatest;
                                    public static System.Int32 TransactionGetentitlementscountApiLatest;
                                    public static System.Int32 CopytransactionbyidApiLatest;
                                    public static System.Int32 CopytransactionbyindexApiLatest;
                                    public static System.Int32 GettransactioncountApiLatest;
                                    public static System.Int32 CopyitemreleasebyindexApiLatest;
                                    public static System.Int32 GetitemreleasecountApiLatest;
                                    public static System.Int32 CopyitemimageinfobyindexApiLatest;
                                    public static System.Int32 GetitemimageinfocountApiLatest;
                                    public static System.Int32 CopyofferimageinfobyindexApiLatest;
                                    public static System.Int32 GetofferimageinfocountApiLatest;
                                    public static System.Int32 CopyitembyidApiLatest;
                                    public static System.Int32 CopyofferitembyindexApiLatest;
                                    public static System.Int32 GetofferitemcountApiLatest;
                                    public static System.Int32 CopyofferbyidApiLatest;
                                    public static System.Int32 CopyofferbyindexApiLatest;
                                    public static System.Int32 GetoffercountApiLatest;
                                    public static System.Int32 CopyentitlementbyidApiLatest;
                                    public static System.Int32 CopyentitlementbynameandindexApiLatest;
                                    public static System.Int32 CopyentitlementbyindexApiLatest;
                                    public static System.Int32 GetentitlementsbynamecountApiLatest;
                                    public static System.Int32 GetentitlementscountApiLatest;
                                    public static System.Int32 RedeementitlementsMaxIds;
                                    public static System.Int32 RedeementitlementsApiLatest;
                                    public static System.Int32 TransactionidMaximumLength;
                                    public static System.Int32 CheckoutMaxEntries;
                                    public static System.Int32 CheckoutApiLatest;
                                    public static System.Int32 QueryoffersApiLatest;
                                    public static System.Int32 QueryentitlementsMaxEntitlementIds;
                                    public static System.Int32 QueryentitlementsApiLatest;
                                    public static System.Int32 QueryownershiptokenMaxCatalogitemIds;
                                    public static System.Int32 QueryownershiptokenApiLatest;
                                    public static System.Int32 QueryownershipMaxCatalogIds;
                                    public static System.Int32 QueryownershipApiLatest;
                                    public static System.Int32 CheckoutentryApiLatest;
                                    public static System.Int32 CatalogreleaseApiLatest;
                                    public static System.Int32 KeyimageinfoApiLatest;
                                    public static System.Int32 CatalogofferExpirationtimestampUndefined;
                                    public static System.Int32 CatalogofferApiLatest;
                                    public static System.Int32 CatalogitemEntitlementendtimestampUndefined;
                                    public static System.Int32 CatalogitemApiLatest;
                                    public static System.Int32 ItemownershipApiLatest;
                                    public static System.Int32 EntitlementEndtimestampUndefined;
                                    public static System.Int32 EntitlementApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public enum  EcomItemType {
                Durable,
                        Consumable,
                        Other,
                }
    
            }
                 namespace  Epic.OnlineServices.Ecom {
              public class Entitlement 
	         {
                     public Entitlement ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String EntitlementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EntitlementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CatalogItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 ServerIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean Redeemed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int64 EndTimestamp
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetEntitlementsByNameCountOptions 
	         {
                     public GetEntitlementsByNameCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String EntitlementName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetEntitlementsCountOptions 
	         {
                     public GetEntitlementsCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetItemImageInfoCountOptions 
	         {
                     public GetItemImageInfoCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetItemReleaseCountOptions 
	         {
                     public GetItemReleaseCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ItemId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetOfferCountOptions 
	         {
                     public GetOfferCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetOfferImageInfoCountOptions 
	         {
                     public GetOfferImageInfoCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetOfferItemCountOptions 
	         {
                     public GetOfferItemCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OfferId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class GetTransactionCountOptions 
	         {
                     public GetTransactionCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class ItemOwnership 
	         {
                     public ItemOwnership ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Ecom.OwnershipStatus OwnershipStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class KeyImageInfo 
	         {
                     public KeyImageInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Url
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Width
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 Height
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnCheckoutCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnQueryEntitlementsCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnQueryOffersCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnQueryOwnershipCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnQueryOwnershipTokenCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
             public delegate void OnRedeemEntitlementsCallback ();
    
            }
                 namespace  Epic.OnlineServices.Ecom {
              public enum  OwnershipStatus {
                NotOwned,
                        Owned,
                }
    
            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryEntitlementsCallbackInfo 
	         {
                     public QueryEntitlementsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryEntitlementsOptions 
	         {
                     public QueryEntitlementsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] EntitlementNames
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IncludeRedeemed
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOffersCallbackInfo 
	         {
                     public QueryOffersCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOffersOptions 
	         {
                     public QueryOffersOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OverrideCatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOwnershipCallbackInfo 
	         {
                     public QueryOwnershipCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Ecom.ItemOwnership[] ItemOwnership
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOwnershipOptions 
	         {
                     public QueryOwnershipOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] CatalogItemIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOwnershipTokenCallbackInfo 
	         {
                     public QueryOwnershipTokenCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String OwnershipToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class QueryOwnershipTokenOptions 
	         {
                     public QueryOwnershipTokenOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] CatalogItemIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CatalogNamespace
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class RedeemEntitlementsCallbackInfo 
	         {
                     public RedeemEntitlementsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class RedeemEntitlementsOptions 
	         {
                     public RedeemEntitlementsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] EntitlementIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public sealed class Transaction 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       Epic.OnlineServices.Result GetTransactionId (System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetEntitlementsCount (Epic.OnlineServices.Ecom.TransactionGetEntitlementsCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyEntitlementByIndex (Epic.OnlineServices.Ecom.TransactionCopyEntitlementByIndexOptions options, out Epic.OnlineServices.Ecom.Entitlement outEntitlement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Release ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public Transaction (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
        }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class TransactionCopyEntitlementByIndexOptions 
	         {
                     public TransactionCopyEntitlementByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 EntitlementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Ecom {
              public class TransactionGetEntitlementsCountOptions 
	         {
                     public TransactionGetEntitlementsCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class AddNotifyAuthExpirationOptions 
	         {
                     public AddNotifyAuthExpirationOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class AddNotifyLoginStatusChangedOptions 
	         {
                     public AddNotifyLoginStatusChangedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class AuthExpirationCallbackInfo 
	         {
                     public AuthExpirationCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public sealed class ConnectInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void Login (Epic.OnlineServices.Connect.LoginOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnLoginCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CreateUser (Epic.OnlineServices.Connect.CreateUserOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnCreateUserCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LinkAccount (Epic.OnlineServices.Connect.LinkAccountOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnLinkAccountCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnlinkAccount (Epic.OnlineServices.Connect.UnlinkAccountOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnUnlinkAccountCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void CreateDeviceId (Epic.OnlineServices.Connect.CreateDeviceIdOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnCreateDeviceIdCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DeleteDeviceId (Epic.OnlineServices.Connect.DeleteDeviceIdOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnDeleteDeviceIdCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void TransferDeviceIdAccount (Epic.OnlineServices.Connect.TransferDeviceIdAccountOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnTransferDeviceIdAccountCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryExternalAccountMappings (Epic.OnlineServices.Connect.QueryExternalAccountMappingsOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnQueryExternalAccountMappingsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryProductUserIdMappings (Epic.OnlineServices.Connect.QueryProductUserIdMappingsOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnQueryProductUserIdMappingsCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.ProductUserId GetExternalAccountMapping (Epic.OnlineServices.Connect.GetExternalAccountMappingsOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result GetProductUserIdMapping (Epic.OnlineServices.Connect.GetProductUserIdMappingOptions options, System.Text.StringBuilder outBuffer, System.Int32 inOutBufferLength)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetProductUserExternalAccountCount (Epic.OnlineServices.Connect.GetProductUserExternalAccountCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyProductUserExternalAccountByIndex (Epic.OnlineServices.Connect.CopyProductUserExternalAccountByIndexOptions options, out Epic.OnlineServices.Connect.ExternalAccountInfo outExternalAccountInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyProductUserExternalAccountByAccountType (Epic.OnlineServices.Connect.CopyProductUserExternalAccountByAccountTypeOptions options, out Epic.OnlineServices.Connect.ExternalAccountInfo outExternalAccountInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyProductUserExternalAccountByAccountId (Epic.OnlineServices.Connect.CopyProductUserExternalAccountByAccountIdOptions options, out Epic.OnlineServices.Connect.ExternalAccountInfo outExternalAccountInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyProductUserInfo (Epic.OnlineServices.Connect.CopyProductUserInfoOptions options, out Epic.OnlineServices.Connect.ExternalAccountInfo outExternalAccountInfo)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetLoggedInUsersCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.ProductUserId GetLoggedInUserByIndex (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.LoginStatus GetLoginStatus (Epic.OnlineServices.ProductUserId localUserId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyAuthExpiration (Epic.OnlineServices.Connect.AddNotifyAuthExpirationOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnAuthExpirationCallback notification)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyAuthExpiration (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLoginStatusChanged (Epic.OnlineServices.Connect.AddNotifyLoginStatusChangedOptions options, System.Object clientData, Epic.OnlineServices.Connect.OnLoginStatusChangedCallback notification)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLoginStatusChanged (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public ConnectInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 AddnotifyloginstatuschangedApiLatest;
                                    public static System.Int32 OnauthexpirationcallbackApiLatest;
                                    public static System.Int32 AddnotifyauthexpirationApiLatest;
                                    public static System.Int32 ExternalaccountinfoApiLatest;
                                    public static System.Int32 TimeUndefined;
                                    public static System.Int32 CopyproductuserinfoApiLatest;
                                    public static System.Int32 CopyproductuserexternalaccountbyaccountidApiLatest;
                                    public static System.Int32 CopyproductuserexternalaccountbyaccounttypeApiLatest;
                                    public static System.Int32 CopyproductuserexternalaccountbyindexApiLatest;
                                    public static System.Int32 GetproductuserexternalaccountcountApiLatest;
                                    public static System.Int32 GetproductuseridmappingApiLatest;
                                    public static System.Int32 QueryproductuseridmappingsApiLatest;
                                    public static System.Int32 GetexternalaccountmappingsApiLatest;
                                    public static System.Int32 GetexternalaccountmappingApiLatest;
                                    public static System.Int32 QueryexternalaccountmappingsMaxAccountIds;
                                    public static System.Int32 QueryexternalaccountmappingsApiLatest;
                                    public static System.Int32 TransferdeviceidaccountApiLatest;
                                    public static System.Int32 DeletedeviceidApiLatest;
                                    public static System.Int32 CreatedeviceidDevicemodelMaxLength;
                                    public static System.Int32 CreatedeviceidApiLatest;
                                    public static System.Int32 UnlinkaccountApiLatest;
                                    public static System.Int32 LinkaccountApiLatest;
                                    public static System.Int32 CreateuserApiLatest;
                                    public static System.Int32 LoginApiLatest;
                                    public static System.Int32 UserlogininfoApiLatest;
                                    public static System.Int32 UserlogininfoDisplaynameMaxLength;
                                    public static System.Int32 CredentialsApiLatest;
                                    public static System.Int32 ExternalAccountIdMaxLength;
                }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CopyProductUserExternalAccountByAccountIdOptions 
	         {
                     public CopyProductUserExternalAccountByAccountIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CopyProductUserExternalAccountByAccountTypeOptions 
	         {
                     public CopyProductUserExternalAccountByAccountTypeOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CopyProductUserExternalAccountByIndexOptions 
	         {
                     public CopyProductUserExternalAccountByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 ExternalAccountInfoIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CopyProductUserInfoOptions 
	         {
                     public CopyProductUserInfoOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CreateDeviceIdCallbackInfo 
	         {
                     public CreateDeviceIdCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CreateDeviceIdOptions 
	         {
                     public CreateDeviceIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String DeviceModel
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CreateUserCallbackInfo 
	         {
                     public CreateUserCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class CreateUserOptions 
	         {
                     public CreateUserOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ContinuanceToken ContinuanceToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class Credentials 
	         {
                     public Credentials ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Token
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Connect.ExternalCredentialType Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class DeleteDeviceIdCallbackInfo 
	         {
                     public DeleteDeviceIdCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class DeleteDeviceIdOptions 
	         {
                     public DeleteDeviceIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class ExternalAccountInfo 
	         {
                     public ExternalAccountInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId ProductUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> LastLoginTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public enum  ExternalCredentialType {
                Epic,
                        SteamAppTicket,
                        PsnIdToken,
                        XblXstsToken,
                        DiscordAccessToken,
                        GogSessionTicket,
                        NintendoIdToken,
                        NintendoNsaIdToken,
                        UplayAccessToken,
                        OpenidAccessToken,
                        DeviceidAccessToken,
                        AppleIdToken,
                }
    
            }
                 namespace  Epic.OnlineServices.Connect {
              public class GetExternalAccountMappingsOptions 
	         {
                     public GetExternalAccountMappingsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String TargetExternalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class GetProductUserExternalAccountCountOptions 
	         {
                     public GetProductUserExternalAccountCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class GetProductUserIdMappingOptions 
	         {
                     public GetProductUserIdMappingOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId TargetProductUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class LinkAccountCallbackInfo 
	         {
                     public LinkAccountCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class LinkAccountOptions 
	         {
                     public LinkAccountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ContinuanceToken ContinuanceToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class LoginCallbackInfo 
	         {
                     public LoginCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ContinuanceToken ContinuanceToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class LoginOptions 
	         {
                     public LoginOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Connect.Credentials Credentials
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Connect.UserLoginInfo UserLoginInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class LoginStatusChangedCallbackInfo 
	         {
                     public LoginStatusChangedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.LoginStatus PreviousStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.LoginStatus CurrentStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnAuthExpirationCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnCreateDeviceIdCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnCreateUserCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnDeleteDeviceIdCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnLinkAccountCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnLoginCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnLoginStatusChangedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnQueryExternalAccountMappingsCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnQueryProductUserIdMappingsCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnTransferDeviceIdAccountCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
             public delegate void OnUnlinkAccountCallback ();
    
            }
                 namespace  Epic.OnlineServices.Connect {
              public class QueryExternalAccountMappingsCallbackInfo 
	         {
                     public QueryExternalAccountMappingsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class QueryExternalAccountMappingsOptions 
	         {
                     public QueryExternalAccountMappingsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] ExternalAccountIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class QueryProductUserIdMappingsCallbackInfo 
	         {
                     public QueryProductUserIdMappingsCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class QueryProductUserIdMappingsOptions 
	         {
                     public QueryProductUserIdMappingsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ExternalAccountType AccountIdType_DEPRECATED
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId[] ProductUserIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class TransferDeviceIdAccountCallbackInfo 
	         {
                     public TransferDeviceIdAccountCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class TransferDeviceIdAccountOptions 
	         {
                     public TransferDeviceIdAccountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId PrimaryLocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalDeviceUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId ProductUserIdToPreserve
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class UnlinkAccountCallbackInfo 
	         {
                     public UnlinkAccountCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class UnlinkAccountOptions 
	         {
                     public UnlinkAccountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Connect {
              public class UserLoginInfo 
	         {
                     public UserLoginInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class AccountFeatureRestrictedInfo 
	         {
                     public AccountFeatureRestrictedInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String VerificationURI
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class AddNotifyLoginStatusChangedOptions 
	         {
                     public AddNotifyLoginStatusChangedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public sealed class AuthInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void Login (Epic.OnlineServices.Auth.LoginOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnLoginCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void Logout (Epic.OnlineServices.Auth.LogoutOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnLogoutCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void LinkAccount (Epic.OnlineServices.Auth.LinkAccountOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnLinkAccountCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void DeletePersistentAuth (Epic.OnlineServices.Auth.DeletePersistentAuthOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnDeletePersistentAuthCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void VerifyUserAuth (Epic.OnlineServices.Auth.VerifyUserAuthOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnVerifyUserAuthCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.Int32 GetLoggedInAccountsCount ()  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.EpicAccountId GetLoggedInAccountByIndex (System.Int32 index)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.LoginStatus GetLoginStatus (Epic.OnlineServices.EpicAccountId localUserId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyUserAuthToken (Epic.OnlineServices.Auth.CopyUserAuthTokenOptions options, Epic.OnlineServices.EpicAccountId localUserId, out Epic.OnlineServices.Auth.Token outUserAuthToken)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyLoginStatusChanged (Epic.OnlineServices.Auth.AddNotifyLoginStatusChangedOptions options, System.Object clientData, Epic.OnlineServices.Auth.OnLoginStatusChangedCallback notification)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyLoginStatusChanged (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AuthInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 DeletepersistentauthApiLatest;
                                    public static System.Int32 AddnotifyloginstatuschangedApiLatest;
                                    public static System.Int32 CopyuserauthtokenApiLatest;
                                    public static System.Int32 VerifyuserauthApiLatest;
                                    public static System.Int32 LinkaccountApiLatest;
                                    public static System.Int32 LogoutApiLatest;
                                    public static System.Int32 LoginApiLatest;
                                    public static System.Int32 AccountfeaturerestrictedinfoApiLatest;
                                    public static System.Int32 PingrantinfoApiLatest;
                                    public static System.Int32 CredentialsApiLatest;
                                    public static System.Int32 TokenApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Auth {
              public enum  AuthScopeFlags {
                NoFlags,
                        BasicProfile,
                        FriendsList,
                        Presence,
                        FriendsManagement,
                }
    
            }
                 namespace  Epic.OnlineServices.Auth {
              public enum  AuthTokenType {
                Client,
                        User,
                }
    
            }
                 namespace  Epic.OnlineServices.Auth {
              public class CopyUserAuthTokenOptions 
	         {
                     public CopyUserAuthTokenOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class Credentials 
	         {
                     public Credentials ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Id
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Token
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.LoginCredentialType Type
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.IntPtr SystemAuthCredentialsOptions
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Connect.ExternalCredentialType ExternalType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class DeletePersistentAuthCallbackInfo 
	         {
                     public DeletePersistentAuthCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class DeletePersistentAuthOptions 
	         {
                     public DeletePersistentAuthOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String RefreshToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class LinkAccountCallbackInfo 
	         {
                     public LinkAccountCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.PinGrantInfo PinGrantInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public enum  LinkAccountFlags {
                NoFlags,
                        NintendoNsaId,
                }
    
            }
                 namespace  Epic.OnlineServices.Auth {
              public class LinkAccountOptions 
	         {
                     public LinkAccountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Auth.LinkAccountFlags LinkAccountFlags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ContinuanceToken ContinuanceToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class LoginCallbackInfo 
	         {
                     public LoginCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.PinGrantInfo PinGrantInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ContinuanceToken ContinuanceToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.AccountFeatureRestrictedInfo AccountFeatureRestrictedInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public enum  LoginCredentialType {
                Password,
                        ExchangeCode,
                        PersistentAuth,
                        DeviceCode,
                        Developer,
                        RefreshToken,
                        AccountPortal,
                        ExternalAuth,
                }
    
            }
                 namespace  Epic.OnlineServices.Auth {
              public class LoginOptions 
	         {
                     public LoginOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Auth.Credentials Credentials
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.AuthScopeFlags ScopeFlags
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class LoginStatusChangedCallbackInfo 
	         {
                     public LoginStatusChangedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.LoginStatus PrevStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.LoginStatus CurrentStatus
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class LogoutCallbackInfo 
	         {
                     public LogoutCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class LogoutOptions 
	         {
                     public LogoutOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.EpicAccountId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnDeletePersistentAuthCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnLinkAccountCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnLoginCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnLoginStatusChangedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnLogoutCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
             public delegate void OnVerifyUserAuthCallback ();
    
            }
                 namespace  Epic.OnlineServices.Auth {
              public class PinGrantInfo 
	         {
                     public PinGrantInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String UserCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String VerificationURI
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 ExpiresIn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String VerificationURIComplete
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class Token 
	         {
                     public Token ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String App
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ClientId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId AccountId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AccessToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double ExpiresIn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String ExpiresAt
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Auth.AuthTokenType AuthType
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String RefreshToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double RefreshExpiresIn
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String RefreshExpiresAt
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class VerifyUserAuthCallbackInfo 
	         {
                     public VerifyUserAuthCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Auth {
              public class VerifyUserAuthOptions 
	         {
                     public VerifyUserAuthOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.Auth.Token AuthToken
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public sealed class AchievementsInterface 
	 			: Epic.OnlineServices.Handle,System.IEquatable<Epic.OnlineServices.Handle>  
                    {
                public       void QueryDefinitions (Epic.OnlineServices.Achievements.QueryDefinitionsOptions options, System.Object clientData, Epic.OnlineServices.Achievements.OnQueryDefinitionsCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetAchievementDefinitionCount (Epic.OnlineServices.Achievements.GetAchievementDefinitionCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAchievementDefinitionV2ByIndex (Epic.OnlineServices.Achievements.CopyAchievementDefinitionV2ByIndexOptions options, out Epic.OnlineServices.Achievements.DefinitionV2 outDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAchievementDefinitionV2ByAchievementId (Epic.OnlineServices.Achievements.CopyAchievementDefinitionV2ByAchievementIdOptions options, out Epic.OnlineServices.Achievements.DefinitionV2 outDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void QueryPlayerAchievements (Epic.OnlineServices.Achievements.QueryPlayerAchievementsOptions options, System.Object clientData, Epic.OnlineServices.Achievements.OnQueryPlayerAchievementsCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetPlayerAchievementCount (Epic.OnlineServices.Achievements.GetPlayerAchievementCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyPlayerAchievementByIndex (Epic.OnlineServices.Achievements.CopyPlayerAchievementByIndexOptions options, out Epic.OnlineServices.Achievements.PlayerAchievement outAchievement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyPlayerAchievementByAchievementId (Epic.OnlineServices.Achievements.CopyPlayerAchievementByAchievementIdOptions options, out Epic.OnlineServices.Achievements.PlayerAchievement outAchievement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void UnlockAchievements (Epic.OnlineServices.Achievements.UnlockAchievementsOptions options, System.Object clientData, Epic.OnlineServices.Achievements.OnUnlockAchievementsCompleteCallback completionDelegate)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyAchievementsUnlockedV2 (Epic.OnlineServices.Achievements.AddNotifyAchievementsUnlockedV2Options options, System.Object clientData, Epic.OnlineServices.Achievements.OnAchievementsUnlockedCallbackV2 notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       void RemoveNotifyAchievementsUnlocked (System.UInt64 inId)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAchievementDefinitionByIndex (Epic.OnlineServices.Achievements.CopyAchievementDefinitionByIndexOptions options, out Epic.OnlineServices.Achievements.Definition outDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyAchievementDefinitionByAchievementId (Epic.OnlineServices.Achievements.CopyAchievementDefinitionByAchievementIdOptions options, out Epic.OnlineServices.Achievements.Definition outDefinition)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt32 GetUnlockedAchievementCount (Epic.OnlineServices.Achievements.GetUnlockedAchievementCountOptions options)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyUnlockedAchievementByIndex (Epic.OnlineServices.Achievements.CopyUnlockedAchievementByIndexOptions options, out Epic.OnlineServices.Achievements.UnlockedAchievement outAchievement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       Epic.OnlineServices.Result CopyUnlockedAchievementByAchievementId (Epic.OnlineServices.Achievements.CopyUnlockedAchievementByAchievementIdOptions options, out Epic.OnlineServices.Achievements.UnlockedAchievement outAchievement)  
        
            {
              throw new System.NotImplementedException();
            }
            
                public       System.UInt64 AddNotifyAchievementsUnlocked (Epic.OnlineServices.Achievements.AddNotifyAchievementsUnlockedOptions options, System.Object clientData, Epic.OnlineServices.Achievements.OnAchievementsUnlockedCallback notificationFn)  
        
            {
              throw new System.NotImplementedException();
            }
            
                     public AchievementsInterface (System.IntPtr innerHandle) : base(default(System.IntPtr)) {
                throw new System.NotImplementedException();
            }
                            public static System.Int32 AddnotifyachievementsunlockedApiLatest;
                                    public static System.Int32 CopyunlockedachievementbyachievementidApiLatest;
                                    public static System.Int32 CopyunlockedachievementbyindexApiLatest;
                                    public static System.Int32 GetunlockedachievementcountApiLatest;
                                    public static System.Int32 UnlockedachievementApiLatest;
                                    public static System.Int32 CopydefinitionbyachievementidApiLatest;
                                    public static System.Int32 CopydefinitionbyindexApiLatest;
                                    public static System.Int32 DefinitionApiLatest;
                                    public static System.Int32 Addnotifyachievementsunlockedv2ApiLatest;
                                    public static System.Int32 UnlockachievementsApiLatest;
                                    public static System.Int32 CopyplayerachievementbyachievementidApiLatest;
                                    public static System.Int32 CopyplayerachievementbyindexApiLatest;
                                    public static System.Int32 GetplayerachievementcountApiLatest;
                                    public static System.Int32 PlayerachievementApiLatest;
                                    public static System.Int32 AchievementUnlocktimeUndefined;
                                    public static System.Int32 QueryplayerachievementsApiLatest;
                                    public static System.Int32 Copydefinitionv2ByachievementidApiLatest;
                                    public static System.Int32 Copyachievementdefinitionv2ByachievementidApiLatest;
                                    public static System.Int32 Copydefinitionv2ByindexApiLatest;
                                    public static System.Int32 Copyachievementdefinitionv2ByindexApiLatest;
                                    public static System.Int32 GetachievementdefinitioncountApiLatest;
                                    public static System.Int32 Definitionv2ApiLatest;
                                    public static System.Int32 PlayerstatinfoApiLatest;
                                    public static System.Int32 StatthresholdApiLatest;
                                    public static System.Int32 StatthresholdsApiLatest;
                                    public static System.Int32 QuerydefinitionsApiLatest;
                }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class AddNotifyAchievementsUnlockedOptions 
	         {
                     public AddNotifyAchievementsUnlockedOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class AddNotifyAchievementsUnlockedV2Options 
	         {
                     public AddNotifyAchievementsUnlockedV2Options ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyAchievementDefinitionByAchievementIdOptions 
	         {
                     public CopyAchievementDefinitionByAchievementIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyAchievementDefinitionByIndexOptions 
	         {
                     public CopyAchievementDefinitionByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 AchievementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyAchievementDefinitionV2ByAchievementIdOptions 
	         {
                     public CopyAchievementDefinitionV2ByAchievementIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyAchievementDefinitionV2ByIndexOptions 
	         {
                     public CopyAchievementDefinitionV2ByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.UInt32 AchievementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyPlayerAchievementByAchievementIdOptions 
	         {
                     public CopyPlayerAchievementByAchievementIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyPlayerAchievementByIndexOptions 
	         {
                     public CopyPlayerAchievementByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 AchievementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyUnlockedAchievementByAchievementIdOptions 
	         {
                     public CopyUnlockedAchievementByAchievementIdOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class CopyUnlockedAchievementByIndexOptions 
	         {
                     public CopyUnlockedAchievementByIndexOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 AchievementIndex
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class Definition 
	         {
                     public Definition ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Description
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedDisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String HiddenDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String CompletionDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String UnlockedIconId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedIconId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsHidden
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Achievements.StatThresholds[] StatThresholds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class DefinitionV2 
	         {
                     public DefinitionV2 ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String UnlockedDisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String UnlockedDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedDisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedDescription
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String FlavorText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String UnlockedIconURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String LockedIconURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Boolean IsHidden
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Achievements.StatThresholds[] StatThresholds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class GetAchievementDefinitionCountOptions 
	         {
                     public GetAchievementDefinitionCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class GetPlayerAchievementCountOptions 
	         {
                     public GetPlayerAchievementCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class GetUnlockedAchievementCountOptions 
	         {
                     public GetUnlockedAchievementCountOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
             public delegate void OnAchievementsUnlockedCallback ();
    
            }
                 namespace  Epic.OnlineServices.Achievements {
              public class OnAchievementsUnlockedCallbackInfo 
	         {
                     public OnAchievementsUnlockedCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] AchievementIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
             public delegate void OnAchievementsUnlockedCallbackV2 ();
    
            }
                 namespace  Epic.OnlineServices.Achievements {
              public class OnAchievementsUnlockedCallbackV2Info 
	         {
                     public OnAchievementsUnlockedCallbackV2Info ()  {
                throw new System.NotImplementedException();
            }
         public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> UnlockTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
             public delegate void OnQueryDefinitionsCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Achievements {
              public class OnQueryDefinitionsCompleteCallbackInfo 
	         {
                     public OnQueryDefinitionsCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
             public delegate void OnQueryPlayerAchievementsCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Achievements {
              public class OnQueryPlayerAchievementsCompleteCallbackInfo 
	         {
                     public OnQueryPlayerAchievementsCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
             public delegate void OnUnlockAchievementsCompleteCallback ();
    
            }
                 namespace  Epic.OnlineServices.Achievements {
              public class OnUnlockAchievementsCompleteCallbackInfo 
	         {
                     public OnUnlockAchievementsCompleteCallbackInfo ()  {
                throw new System.NotImplementedException();
            }
         public  Epic.OnlineServices.Result ResultCode
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Object ClientData
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.UInt32 AchievementsCount
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class PlayerAchievement 
	         {
                     public PlayerAchievement ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Double Progress
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> UnlockTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.Achievements.PlayerStatInfo[] StatInfo
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String DisplayName
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String Description
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String IconURL
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String FlavorText
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class PlayerStatInfo 
	         {
                     public PlayerStatInfo ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 CurrentValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 ThresholdValue
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class QueryDefinitionsOptions 
	         {
                     public QueryDefinitionsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId LocalUserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  Epic.OnlineServices.EpicAccountId EpicUserId_DEPRECATED
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] HiddenAchievementIds_DEPRECATED
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class QueryPlayerAchievementsOptions 
	         {
                     public QueryPlayerAchievementsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class StatThresholds 
	         {
                     public StatThresholds ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String Name
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Int32 Threshold
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class UnlockAchievementsOptions 
	         {
                     public UnlockAchievementsOptions ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  Epic.OnlineServices.ProductUserId UserId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.String[] AchievementIds
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
                 namespace  Epic.OnlineServices.Achievements {
              public class UnlockedAchievement 
	         {
                     public UnlockedAchievement ()  {
                throw new System.NotImplementedException();
            }
         public  System.Int32 ApiVersion
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                         }
                  public  System.String AchievementId
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                  public  System.Nullable<System.DateTimeOffset> UnlockTime
                   
                 {
                                                get { throw new System.NotImplementedException(); }
                                                    set {  }
                                         }
                 }

            }
        
